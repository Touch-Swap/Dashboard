"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@refinedev";
exports.ids = ["vendor-chunks/@refinedev"];
exports.modules = {

/***/ "(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/formats.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@refinedev/core/node_modules/qs/lib/formats.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9jb3JlL25vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZmluZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvY29yZS9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanM/NDY3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciByZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyIHBlcmNlbnRUd2VudGllcyA9IC8lMjAvZztcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnZGVmYXVsdCc6IEZvcm1hdC5SRkMzOTg2LFxuICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFJGQzE3Mzg6IEZvcm1hdC5SRkMxNzM4LFxuICAgIFJGQzM5ODY6IEZvcm1hdC5SRkMzOTg2XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/formats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@refinedev/core/node_modules/qs/lib/index.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/stringify.js\");\nvar parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/parse.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/formats.js\");\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9jb3JlL25vZGVfbW9kdWxlcy9xcy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsMEZBQWE7QUFDckMsWUFBWSxtQkFBTyxDQUFDLGtGQUFTO0FBQzdCLGNBQWMsbUJBQU8sQ0FBQyxzRkFBVzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZmluZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvY29yZS9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzP2U5NDciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/parse.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@refinedev/core/node_modules/qs/lib/parse.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/utils.js\");\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowEmptyArrays: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decodeDotInKeys: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    duplicates: 'combine',\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = { __proto__: null };\n\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        var existing = has.call(obj, key);\n        if (existing && options.duplicates === 'combine') {\n            obj[key] = utils.combine(obj[key], val);\n        } else if (!existing || options.duplicates === 'last') {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = options.allowEmptyArrays && leaf === '' ? [] : [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;\n            var index = parseInt(decodedRoot, 10);\n            if (!options.parseArrays && decodedRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== decodedRoot\n                && String(index) === decodedRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (decodedRoot !== '__proto__') {\n                obj[decodedRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\n\n    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n        throw new TypeError('The duplicates option must be either combine, first, or last');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        duplicates: duplicates,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/stringify.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@refinedev/core/node_modules/qs/lib/stringify.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar getSideChannel = __webpack_require__(/*! side-channel */ \"(ssr)/./node_modules/side-channel/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/utils.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/formats.js\");\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    allowEmptyArrays,\n    strictNullHandling,\n    skipNulls,\n    encodeDotInKeys,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\\./g, '%2E') : prefix;\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;\n\n    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n        return adjustedPrefix + '[]';\n    }\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            allowEmptyArrays,\n            strictNullHandling,\n            skipNulls,\n            encodeDotInKeys,\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    var arrayFormat;\n    if (opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\n    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.allowEmptyArrays,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encodeDotInKeys,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@refinedev/core/node_modules/qs/lib/utils.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/formats.js\");\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar limit = 1024;\n\n/* eslint operator-linebreak: [2, \"before\"] */\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var j = 0; j < string.length; j += limit) {\n        var segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        var arr = [];\n\n        for (var i = 0; i < segment.length; ++i) {\n            var c = segment.charCodeAt(i);\n            if (\n                c === 0x2D // -\n                || c === 0x2E // .\n                || c === 0x5F // _\n                || c === 0x7E // ~\n                || (c >= 0x30 && c <= 0x39) // 0-9\n                || (c >= 0x41 && c <= 0x5A) // a-z\n                || (c >= 0x61 && c <= 0x7A) // A-Z\n                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n\n            if (c < 0x80) {\n                arr[arr.length] = hexTable[c];\n                continue;\n            }\n\n            if (c < 0x800) {\n                arr[arr.length] = hexTable[0xC0 | (c >> 6)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            if (c < 0xD800 || c >= 0xE000) {\n                arr[arr.length] = hexTable[0xE0 | (c >> 12)]\n                    + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            i += 1;\n            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));\n\n            arr[arr.length] = hexTable[0xF0 | (c >> 18)]\n                + hexTable[0x80 | ((c >> 12) & 0x3F)]\n                + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                + hexTable[0x80 | (c & 0x3F)];\n        }\n\n        out += arr.join('');\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/formats.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/formats.js ***!
  \******************************************************************************/
/***/ ((module) => {

eval("\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9uZXh0anMtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZmluZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvbmV4dGpzLXJvdXRlci9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanM/OGY1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciByZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyIHBlcmNlbnRUd2VudGllcyA9IC8lMjAvZztcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnZGVmYXVsdCc6IEZvcm1hdC5SRkMzOTg2LFxuICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFJGQzE3Mzg6IEZvcm1hdC5SRkMxNzM4LFxuICAgIFJGQzM5ODY6IEZvcm1hdC5SRkMzOTg2XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/formats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/stringify.js\");\nvar parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/parse.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/formats.js\");\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9uZXh0anMtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsbUdBQWE7QUFDckMsWUFBWSxtQkFBTyxDQUFDLDJGQUFTO0FBQzdCLGNBQWMsbUJBQU8sQ0FBQywrRkFBVzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZmluZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvbmV4dGpzLXJvdXRlci9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzPzc2M2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/parse.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/parse.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/utils.js\");\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowEmptyArrays: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decodeDotInKeys: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    duplicates: 'combine',\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = { __proto__: null };\n\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        var existing = has.call(obj, key);\n        if (existing && options.duplicates === 'combine') {\n            obj[key] = utils.combine(obj[key], val);\n        } else if (!existing || options.duplicates === 'last') {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = options.allowEmptyArrays && leaf === '' ? [] : [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;\n            var index = parseInt(decodedRoot, 10);\n            if (!options.parseArrays && decodedRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== decodedRoot\n                && String(index) === decodedRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (decodedRoot !== '__proto__') {\n                obj[decodedRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\n\n    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n        throw new TypeError('The duplicates option must be either combine, first, or last');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        duplicates: duplicates,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/stringify.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/stringify.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar getSideChannel = __webpack_require__(/*! side-channel */ \"(ssr)/./node_modules/side-channel/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/utils.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/formats.js\");\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    allowEmptyArrays,\n    strictNullHandling,\n    skipNulls,\n    encodeDotInKeys,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\\./g, '%2E') : prefix;\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;\n\n    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n        return adjustedPrefix + '[]';\n    }\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            allowEmptyArrays,\n            strictNullHandling,\n            skipNulls,\n            encodeDotInKeys,\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    var arrayFormat;\n    if (opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\n    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.allowEmptyArrays,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encodeDotInKeys,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/utils.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/formats.js\");\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar limit = 1024;\n\n/* eslint operator-linebreak: [2, \"before\"] */\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var j = 0; j < string.length; j += limit) {\n        var segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        var arr = [];\n\n        for (var i = 0; i < segment.length; ++i) {\n            var c = segment.charCodeAt(i);\n            if (\n                c === 0x2D // -\n                || c === 0x2E // .\n                || c === 0x5F // _\n                || c === 0x7E // ~\n                || (c >= 0x30 && c <= 0x39) // 0-9\n                || (c >= 0x41 && c <= 0x5A) // a-z\n                || (c >= 0x61 && c <= 0x7A) // A-Z\n                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n\n            if (c < 0x80) {\n                arr[arr.length] = hexTable[c];\n                continue;\n            }\n\n            if (c < 0x800) {\n                arr[arr.length] = hexTable[0xC0 | (c >> 6)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            if (c < 0xD800 || c >= 0xE000) {\n                arr[arr.length] = hexTable[0xE0 | (c >> 12)]\n                    + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            i += 1;\n            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));\n\n            arr[arr.length] = hexTable[0xF0 | (c >> 18)]\n                + hexTable[0x80 | ((c >> 12) & 0x3F)]\n                + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                + hexTable[0x80 | (c & 0x3F)];\n        }\n\n        out += arr.join('');\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/core/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/core/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessControlContext: () => (/* binding */ Xe),\n/* harmony export */   AuthPage: () => (/* binding */ Fu),\n/* harmony export */   Authenticated: () => (/* binding */ ec),\n/* harmony export */   AutoSaveIndicator: () => (/* binding */ pc),\n/* harmony export */   CanAccess: () => (/* binding */ nc),\n/* harmony export */   ErrorComponent: () => (/* binding */ Iu),\n/* harmony export */   GitHubBanner: () => (/* binding */ uc),\n/* harmony export */   I18nContext: () => (/* binding */ Qe),\n/* harmony export */   KeyBuilder: () => (/* binding */ xt),\n/* harmony export */   LayoutWrapper: () => (/* binding */ Ju),\n/* harmony export */   LoginPage: () => (/* binding */ Qr),\n/* harmony export */   ReadyPage: () => (/* binding */ yo),\n/* harmony export */   Refine: () => (/* binding */ ju),\n/* harmony export */   ResourceContext: () => (/* binding */ it),\n/* harmony export */   RouteChangeHandler: () => (/* binding */ go),\n/* harmony export */   TranslationContext: () => (/* binding */ Qe),\n/* harmony export */   UndoableQueue: () => (/* binding */ Ks),\n/* harmony export */   WelcomePage: () => (/* binding */ Ku),\n/* harmony export */   createTreeView: () => (/* binding */ Ho),\n/* harmony export */   file2Base64: () => (/* binding */ ia),\n/* harmony export */   flattenObjectKeys: () => (/* binding */ ur),\n/* harmony export */   generateDefaultDocumentTitle: () => (/* binding */ _o),\n/* harmony export */   getDefaultFilter: () => (/* binding */ aa),\n/* harmony export */   getDefaultSortOrder: () => (/* binding */ na),\n/* harmony export */   getNextPageParam: () => (/* binding */ or),\n/* harmony export */   getPreviousPageParam: () => (/* binding */ sr),\n/* harmony export */   handleUseParams: () => (/* binding */ Ao),\n/* harmony export */   importCSVMapper: () => (/* binding */ $t),\n/* harmony export */   keys: () => (/* binding */ Oe),\n/* harmony export */   legacyResourceTransform: () => (/* binding */ nr),\n/* harmony export */   matchResourceFromRoute: () => (/* binding */ Go),\n/* harmony export */   parseTableParams: () => (/* binding */ pr),\n/* harmony export */   parseTableParamsFromQuery: () => (/* binding */ sa),\n/* harmony export */   pickDataProvider: () => (/* binding */ _),\n/* harmony export */   pickNotDeprecated: () => (/* binding */ S),\n/* harmony export */   propertyPathToArray: () => (/* binding */ Jo),\n/* harmony export */   queryKeys: () => (/* binding */ Qo),\n/* harmony export */   routeGenerator: () => (/* binding */ tr),\n/* harmony export */   setInitialFilters: () => (/* binding */ mr),\n/* harmony export */   setInitialSorters: () => (/* binding */ fr),\n/* harmony export */   stringifyTableParams: () => (/* binding */ dr),\n/* harmony export */   unionFilters: () => (/* binding */ ht),\n/* harmony export */   unionSorters: () => (/* binding */ lr),\n/* harmony export */   useActiveAuthProvider: () => (/* binding */ J),\n/* harmony export */   useApiUrl: () => (/* binding */ za),\n/* harmony export */   useAuthenticated: () => (/* binding */ Pa),\n/* harmony export */   useBack: () => (/* binding */ co),\n/* harmony export */   useBreadcrumb: () => (/* binding */ TC),\n/* harmony export */   useCan: () => (/* binding */ xr),\n/* harmony export */   useCanWithoutCache: () => (/* binding */ dR),\n/* harmony export */   useCancelNotification: () => (/* binding */ je),\n/* harmony export */   useCheckError: () => (/* binding */ ha),\n/* harmony export */   useCloneButton: () => (/* binding */ Yb),\n/* harmony export */   useCreate: () => (/* binding */ Bt),\n/* harmony export */   useCreateButton: () => (/* binding */ Jb),\n/* harmony export */   useCreateMany: () => (/* binding */ oo),\n/* harmony export */   useCustom: () => (/* binding */ Xa),\n/* harmony export */   useCustomMutation: () => (/* binding */ Ja),\n/* harmony export */   useDataProvider: () => (/* binding */ se),\n/* harmony export */   useDelete: () => (/* binding */ ro),\n/* harmony export */   useDeleteButton: () => (/* binding */ Lu),\n/* harmony export */   useDeleteMany: () => (/* binding */ Oa),\n/* harmony export */   useEditButton: () => (/* binding */ Zb),\n/* harmony export */   useExport: () => (/* binding */ RP),\n/* harmony export */   useExportButton: () => (/* binding */ tv),\n/* harmony export */   useForgotPassword: () => (/* binding */ Zr),\n/* harmony export */   useForm: () => (/* binding */ EP),\n/* harmony export */   useGetIdentity: () => (/* binding */ $r),\n/* harmony export */   useGetLocale: () => (/* binding */ uo),\n/* harmony export */   useGetToPath: () => (/* binding */ lt),\n/* harmony export */   useGo: () => (/* binding */ ge),\n/* harmony export */   useHandleNotification: () => (/* binding */ de),\n/* harmony export */   useImport: () => (/* binding */ hh),\n/* harmony export */   useImportButton: () => (/* binding */ rv),\n/* harmony export */   useInfiniteList: () => (/* binding */ oi),\n/* harmony export */   useInvalidate: () => (/* binding */ Ce),\n/* harmony export */   useIsAuthenticated: () => (/* binding */ gr),\n/* harmony export */   useIsExistAuthentication: () => (/* binding */ qr),\n/* harmony export */   useKeys: () => (/* binding */ O),\n/* harmony export */   useLink: () => (/* binding */ rt),\n/* harmony export */   useList: () => (/* binding */ Qt),\n/* harmony export */   useListButton: () => (/* binding */ qb),\n/* harmony export */   useLiveMode: () => (/* binding */ Vs),\n/* harmony export */   useLoadingOvertime: () => (/* binding */ ee),\n/* harmony export */   useLog: () => (/* binding */ Ne),\n/* harmony export */   useLogList: () => (/* binding */ oC),\n/* harmony export */   useLogin: () => (/* binding */ At),\n/* harmony export */   useLogout: () => (/* binding */ yr),\n/* harmony export */   useMany: () => (/* binding */ eo),\n/* harmony export */   useMenu: () => (/* binding */ bu),\n/* harmony export */   useMeta: () => (/* binding */ q),\n/* harmony export */   useModal: () => (/* binding */ vh),\n/* harmony export */   useMutationMode: () => (/* binding */ ke),\n/* harmony export */   useNavigation: () => (/* binding */ ce),\n/* harmony export */   useNotification: () => (/* binding */ we),\n/* harmony export */   useOnError: () => (/* binding */ pe),\n/* harmony export */   useOne: () => (/* binding */ Vt),\n/* harmony export */   useParse: () => (/* binding */ so),\n/* harmony export */   useParsed: () => (/* binding */ ae),\n/* harmony export */   usePermissions: () => (/* binding */ ua),\n/* harmony export */   usePublish: () => (/* binding */ Be),\n/* harmony export */   useRedirectionAfterSubmission: () => (/* binding */ zs),\n/* harmony export */   useRefineContext: () => (/* binding */ ne),\n/* harmony export */   useRefineOptions: () => (/* binding */ Ct),\n/* harmony export */   useRefreshButton: () => (/* binding */ Eu),\n/* harmony export */   useRegister: () => (/* binding */ jr),\n/* harmony export */   useResource: () => (/* binding */ z),\n/* harmony export */   useResourceParams: () => (/* binding */ Ke),\n/* harmony export */   useResourceSubscription: () => (/* binding */ at),\n/* harmony export */   useResourceWithRoute: () => (/* binding */ As),\n/* harmony export */   useRouterContext: () => (/* binding */ te),\n/* harmony export */   useRouterType: () => (/* binding */ Z),\n/* harmony export */   useSaveButton: () => (/* binding */ ev),\n/* harmony export */   useSelect: () => (/* binding */ CR),\n/* harmony export */   useSetLocale: () => (/* binding */ io),\n/* harmony export */   useShow: () => (/* binding */ lh),\n/* harmony export */   useShowButton: () => (/* binding */ Xb),\n/* harmony export */   useSubscription: () => (/* binding */ Tx),\n/* harmony export */   useSyncWithLocation: () => (/* binding */ Kr),\n/* harmony export */   useTable: () => (/* binding */ kR),\n/* harmony export */   useTitle: () => (/* binding */ qn),\n/* harmony export */   useToPath: () => (/* binding */ nu),\n/* harmony export */   useTranslate: () => (/* binding */ G),\n/* harmony export */   useTranslation: () => (/* binding */ uP),\n/* harmony export */   useUpdate: () => (/* binding */ to),\n/* harmony export */   useUpdateMany: () => (/* binding */ Ga),\n/* harmony export */   useUpdatePassword: () => (/* binding */ Jr),\n/* harmony export */   useUserFriendlyName: () => (/* binding */ nt),\n/* harmony export */   useWarnAboutChange: () => (/* binding */ dt),\n/* harmony export */   userFriendlyResourceName: () => (/* binding */ Ot)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @refinedev/devtools-internal */ \"(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es/differenceWith.js */ \"(ssr)/./node_modules/lodash-es/differenceWith.js\");\n/* harmony import */ var lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/unionWith.js */ \"(ssr)/./node_modules/lodash-es/unionWith.js\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/@refinedev/core/node_modules/qs/lib/index.js\");\n/* harmony import */ var warn_once__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! warn-once */ \"(ssr)/./node_modules/warn-once/index.js\");\n/* harmony import */ var lodash_es_fromPairs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/fromPairs.js */ \"(ssr)/./node_modules/lodash-es/fromPairs.js\");\n/* harmony import */ var lodash_es_zip_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/zip.js */ \"(ssr)/./node_modules/lodash-es/zip.js\");\n/* harmony import */ var pluralize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pluralize */ \"(ssr)/./node_modules/pluralize/pluralize.js\");\n/* harmony import */ var lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/debounce.js */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs\");\n/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es/isEqual.js */ \"(ssr)/./node_modules/lodash-es/isEqual.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! papaparse */ \"(ssr)/./node_modules/papaparse/papaparse.js\");\n/* harmony import */ var lodash_es_chunk_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es/chunk.js */ \"(ssr)/./node_modules/lodash-es/chunk.js\");\n/* harmony import */ var lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es/get.js */ \"(ssr)/./node_modules/lodash-es/get.js\");\n/* harmony import */ var lodash_es_uniqBy_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es/uniqBy.js */ \"(ssr)/./node_modules/lodash-es/uniqBy.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs\");\n/* __next_internal_client_entry_do_not_use__ AccessControlContext,AuthPage,Authenticated,AutoSaveIndicator,CanAccess,ErrorComponent,GitHubBanner,I18nContext,KeyBuilder,LayoutWrapper,LoginPage,ReadyPage,Refine,ResourceContext,RouteChangeHandler,TranslationContext,UndoableQueue,WelcomePage,createTreeView,file2Base64,flattenObjectKeys,generateDefaultDocumentTitle,getDefaultFilter,getDefaultSortOrder,getNextPageParam,getPreviousPageParam,handleUseParams,importCSVMapper,keys,legacyResourceTransform,matchResourceFromRoute,parseTableParams,parseTableParamsFromQuery,pickDataProvider,pickNotDeprecated,propertyPathToArray,queryKeys,routeGenerator,setInitialFilters,setInitialSorters,stringifyTableParams,unionFilters,unionSorters,useActiveAuthProvider,useApiUrl,useAuthenticated,useBack,useBreadcrumb,useCan,useCanWithoutCache,useCancelNotification,useCheckError,useCloneButton,useCreate,useCreateButton,useCreateMany,useCustom,useCustomMutation,useDataProvider,useDelete,useDeleteButton,useDeleteMany,useEditButton,useExport,useExportButton,useForgotPassword,useForm,useGetIdentity,useGetLocale,useGetToPath,useGo,useHandleNotification,useImport,useImportButton,useInfiniteList,useInvalidate,useIsAuthenticated,useIsExistAuthentication,useKeys,useLink,useList,useListButton,useLiveMode,useLoadingOvertime,useLog,useLogList,useLogin,useLogout,useMany,useMenu,useMeta,useModal,useMutationMode,useNavigation,useNotification,useOnError,useOne,useParse,useParsed,usePermissions,usePublish,useRedirectionAfterSubmission,useRefineContext,useRefineOptions,useRefreshButton,useRegister,useResource,useResourceParams,useResourceSubscription,useResourceWithRoute,useRouterContext,useRouterType,useSaveButton,useSelect,useSetLocale,useShow,useShowButton,useSubscription,useSyncWithLocation,useTable,useTitle,useToPath,useTranslate,useTranslation,useUpdate,useUpdateMany,useUpdatePassword,useUserFriendlyName,useWarnAboutChange,userFriendlyResourceName auto */ var Gn = Object.defineProperty;\nvar o = (e, t)=>Gn(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n\n\n\n\nvar wo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Io = o(({ children: e, isProvided: t, ...r })=>{\n    let { replace: s } = ce(), n = o(async (p)=>{\n        var u;\n        try {\n            return await ((u = r.login) == null ? void 0 : u.call(r, p));\n        } catch (d) {\n            return Promise.reject(d);\n        }\n    }, \"loginFunc\"), a = o(async (p)=>{\n        var u;\n        try {\n            return await ((u = r.register) == null ? void 0 : u.call(r, p));\n        } catch (d) {\n            return Promise.reject(d);\n        }\n    }, \"registerFunc\"), i = o(async (p)=>{\n        var u;\n        try {\n            return await ((u = r.logout) == null ? void 0 : u.call(r, p));\n        } catch (d) {\n            return Promise.reject(d);\n        }\n    }, \"logoutFunc\"), c = o(async (p)=>{\n        var u;\n        try {\n            return await ((u = r.checkAuth) == null ? void 0 : u.call(r, p)), Promise.resolve();\n        } catch (d) {\n            return d != null && d.redirectPath && s(d.redirectPath), Promise.reject(d);\n        }\n    }, \"checkAuthFunc\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(wo.Provider, {\n        value: {\n            ...r,\n            login: n,\n            logout: i,\n            checkAuth: c,\n            register: a,\n            isProvided: t\n        }\n    }, e);\n}, \"LegacyAuthContextProvider\"), So = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Fo = o(({ children: e, isProvided: t, ...r })=>{\n    let s = o(async (u)=>{\n        var d;\n        try {\n            return await ((d = r.login) == null ? void 0 : d.call(r, u));\n        } catch (l) {\n            return console.warn(\"Unhandled Error in login: refine always expects a resolved promise.\", l), Promise.reject(l);\n        }\n    }, \"handleLogin\"), n = o(async (u)=>{\n        var d;\n        try {\n            return await ((d = r.register) == null ? void 0 : d.call(r, u));\n        } catch (l) {\n            return console.warn(\"Unhandled Error in register: refine always expects a resolved promise.\", l), Promise.reject(l);\n        }\n    }, \"handleRegister\"), a = o(async (u)=>{\n        var d;\n        try {\n            return await ((d = r.logout) == null ? void 0 : d.call(r, u));\n        } catch (l) {\n            return console.warn(\"Unhandled Error in logout: refine always expects a resolved promise.\", l), Promise.reject(l);\n        }\n    }, \"handleLogout\"), i = o(async (u)=>{\n        var d;\n        try {\n            let l = await ((d = r.check) == null ? void 0 : d.call(r, u));\n            return Promise.resolve(l);\n        } catch (l) {\n            return console.warn(\"Unhandled Error in check: refine always expects a resolved promise.\", l), Promise.reject(l);\n        }\n    }, \"handleCheck\"), c = o(async (u)=>{\n        var d;\n        try {\n            let l = await ((d = r.forgotPassword) == null ? void 0 : d.call(r, u));\n            return Promise.resolve(l);\n        } catch (l) {\n            return console.warn(\"Unhandled Error in forgotPassword: refine always expects a resolved promise.\", l), Promise.reject(l);\n        }\n    }, \"handleForgotPassword\"), p = o(async (u)=>{\n        var d;\n        try {\n            let l = await ((d = r.updatePassword) == null ? void 0 : d.call(r, u));\n            return Promise.resolve(l);\n        } catch (l) {\n            return console.warn(\"Unhandled Error in updatePassword: refine always expects a resolved promise.\", l), Promise.reject(l);\n        }\n    }, \"handleUpdatePassword\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(So.Provider, {\n        value: {\n            ...r,\n            login: s,\n            logout: a,\n            check: i,\n            register: n,\n            forgotPassword: c,\n            updatePassword: p,\n            isProvided: t\n        }\n    }, e);\n}, \"AuthBindingsContextProvider\"), ue = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(wo), \"useLegacyAuthContext\"), fe = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(So), \"useAuthBindingsContext\");\n\n\n\n\nvar wt = o((e)=>e / 1e3, \"userFriendlySecond\");\n\n\nvar $t = o((e, t = (r)=>r)=>{\n    let [r, ...s] = e;\n    return s.map((n)=>(0,lodash_es_fromPairs_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,lodash_es_zip_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(r, n))).map((n, a, i)=>t.call(void 0, n, a, i));\n}, \"importCSVMapper\");\n\nvar Ot = o((e = \"\", t)=>{\n    let r = It(e);\n    return t === \"singular\" ? pluralize__WEBPACK_IMPORTED_MODULE_4__.singular(r) : pluralize__WEBPACK_IMPORTED_MODULE_4__.plural(r);\n}, \"userFriendlyResourceName\");\nvar Ao = o((e = {})=>e != null && e.id ? {\n        ...e,\n        id: decodeURIComponent(e.id)\n    } : e, \"handleUseParams\");\nfunction Ye(e, t) {\n    return e.findIndex((r, s)=>s <= e.length - t.length && t.every((n, a)=>e[s + a] === n));\n}\no(Ye, \"arrayFindIndex\");\nfunction $n(e) {\n    if (e[0] === \"data\") {\n        let t = e.slice(1);\n        if (t[2] === \"many\") t[2] = \"getMany\";\n        else if (t[2] === \"infinite\") t[2] = \"list\";\n        else if (t[2] === \"one\") t[2] = \"detail\";\n        else if (t[1] === \"custom\") {\n            let r = {\n                ...t[2]\n            };\n            return delete r.method, delete r.url, [\n                t[0],\n                t[1],\n                t[2].method,\n                t[2].url,\n                r\n            ];\n        }\n        return t;\n    }\n    if (e[0] === \"audit\" && e[2] === \"list\") return [\n        \"logList\",\n        e[1],\n        e[3]\n    ];\n    if (e[0] === \"access\" && e.length === 4) return [\n        \"useCan\",\n        {\n            resource: e[1],\n            action: e[2],\n            ...e[3]\n        }\n    ];\n    if (e[0] === \"auth\") {\n        if (Ye(e, [\n            \"auth\",\n            \"login\"\n        ]) !== -1) return [\n            \"useLogin\"\n        ];\n        if (Ye(e, [\n            \"auth\",\n            \"logout\"\n        ]) !== -1) return [\n            \"useLogout\"\n        ];\n        if (Ye(e, [\n            \"auth\",\n            \"identity\"\n        ]) !== -1) return [\n            \"getUserIdentity\"\n        ];\n        if (Ye(e, [\n            \"auth\",\n            \"register\"\n        ]) !== -1) return [\n            \"useRegister\"\n        ];\n        if (Ye(e, [\n            \"auth\",\n            \"forgotPassword\"\n        ]) !== -1) return [\n            \"useForgotPassword\"\n        ];\n        if (Ye(e, [\n            \"auth\",\n            \"check\"\n        ]) !== -1) return [\n            \"useAuthenticated\",\n            e[2]\n        ];\n        if (Ye(e, [\n            \"auth\",\n            \"onError\"\n        ]) !== -1) return [\n            \"useCheckError\"\n        ];\n        if (Ye(e, [\n            \"auth\",\n            \"permissions\"\n        ]) !== -1) return [\n            \"usePermissions\"\n        ];\n        if (Ye(e, [\n            \"auth\",\n            \"updatePassword\"\n        ]) !== -1) return [\n            \"useUpdatePassword\"\n        ];\n    }\n    return e;\n}\no($n, \"convertToLegacy\");\nvar Ee = class {\n    constructor(t = []){\n        this.segments = [];\n        this.segments = t;\n    }\n    key() {\n        return this.segments;\n    }\n    legacy() {\n        return $n(this.segments);\n    }\n    get(t) {\n        return t ? this.legacy() : this.segments;\n    }\n};\no(Ee, \"BaseKeyBuilder\");\nvar $e = class extends Ee {\n    params(t) {\n        return new Ee([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no($e, \"ParamsKeyBuilder\");\nvar zt = class extends Ee {\n    id(t) {\n        return new $e([\n            ...this.segments,\n            t ? String(t) : void 0\n        ]);\n    }\n};\no(zt, \"DataIdRequiringKeyBuilder\");\nvar _t = class extends Ee {\n    ids(...t) {\n        return new $e([\n            ...this.segments,\n            ...t.length ? [\n                t.map((r)=>String(r))\n            ] : []\n        ]);\n    }\n};\no(_t, \"DataIdsRequiringKeyBuilder\");\nvar jt = class extends Ee {\n    action(t) {\n        if (t === \"one\") return new zt([\n            ...this.segments,\n            t\n        ]);\n        if (t === \"many\") return new _t([\n            ...this.segments,\n            t\n        ]);\n        if ([\n            \"list\",\n            \"infinite\"\n        ].includes(t)) return new $e([\n            ...this.segments,\n            t\n        ]);\n        throw new Error(\"Invalid action type\");\n    }\n};\no(jt, \"DataResourceKeyBuilder\");\nvar Xt = class extends Ee {\n    resource(t) {\n        return new jt([\n            ...this.segments,\n            t\n        ]);\n    }\n    mutation(t) {\n        return new $e([\n            ...t === \"custom\" ? this.segments : [\n                this.segments[0]\n            ],\n            t\n        ]);\n    }\n};\no(Xt, \"DataKeyBuilder\");\nvar Zt = class extends Ee {\n    action(t) {\n        return new $e([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(Zt, \"AuthKeyBuilder\");\nvar Yt = class extends Ee {\n    action(t) {\n        return new $e([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(Yt, \"AccessResourceKeyBuilder\");\nvar Jt = class extends Ee {\n    resource(t) {\n        return new Yt([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(Jt, \"AccessKeyBuilder\");\nvar qt = class extends Ee {\n    action(t) {\n        return new $e([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(qt, \"AuditActionKeyBuilder\");\nvar er = class extends Ee {\n    resource(t) {\n        return new qt([\n            ...this.segments,\n            t\n        ]);\n    }\n    action(t) {\n        return new $e([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(er, \"AuditKeyBuilder\");\nvar xt = class extends Ee {\n    data(t) {\n        return new Xt([\n            \"data\",\n            t || \"default\"\n        ]);\n    }\n    auth() {\n        return new Zt([\n            \"auth\"\n        ]);\n    }\n    access() {\n        return new Jt([\n            \"access\"\n        ]);\n    }\n    audit() {\n        return new er([\n            \"audit\"\n        ]);\n    }\n};\no(xt, \"KeyBuilder\");\nvar Oe = o(()=>new xt([]), \"keys\");\nvar S = o((...e)=>e.find((t)=>typeof t < \"u\"), \"pickNotDeprecated\");\nvar Qo = o((e, t, r, s)=>{\n    let n = t || \"default\", a = {\n        all: [\n            n\n        ],\n        resourceAll: [\n            n,\n            e || \"\"\n        ],\n        list: (i)=>[\n                ...a.resourceAll,\n                \"list\",\n                {\n                    ...i,\n                    ...S(r, s) || {}\n                }\n            ],\n        many: (i)=>[\n                ...a.resourceAll,\n                \"getMany\",\n                i == null ? void 0 : i.map(String),\n                {\n                    ...S(r, s) || {}\n                }\n            ].filter((c)=>c !== void 0),\n        detail: (i)=>[\n                ...a.resourceAll,\n                \"detail\",\n                i == null ? void 0 : i.toString(),\n                {\n                    ...S(r, s) || {}\n                }\n            ],\n        logList: (i)=>[\n                \"logList\",\n                e,\n                i,\n                s\n            ].filter((c)=>c !== void 0)\n    };\n    return a;\n}, \"queryKeys\"), Je = o((e)=>(t, r, s, n)=>{\n        let a = r || \"default\";\n        return {\n            all: Oe().data(a).get(e),\n            resourceAll: Oe().data(r).resource(t ?? \"\").get(e),\n            list: (c)=>Oe().data(r).resource(t ?? \"\").action(\"list\").params({\n                    ...c,\n                    ...S(s, n) || {}\n                }).get(e),\n            many: (c)=>Oe().data(r).resource(t ?? \"\").action(\"many\").ids(...c ?? []).params({\n                    ...S(s, n) || {}\n                }).get(e),\n            detail: (c)=>Oe().data(r).resource(t ?? \"\").action(\"one\").id(c ?? \"\").params({\n                    ...S(s, n) || {}\n                }).get(e),\n            logList: (c)=>[\n                    ...Oe().audit().resource(t).action(\"list\").params(c).get(e),\n                    n\n                ].filter((p)=>p !== void 0)\n        };\n    }, \"queryKeysReplacement\");\nvar kr = o((e, t)=>!e || !t ? !1 : !!e.find((r)=>r === t), \"hasPermission\");\nvar Pt = o((e)=>e.startsWith(\":\"), \"isParameter\");\nvar _e = o((e)=>e.split(\"/\").filter((r)=>r !== \"\"), \"splitToSegments\");\nvar Vo = o((e, t)=>{\n    let r = _e(e), s = _e(t);\n    return r.length === s.length;\n}, \"isSegmentCountsSame\");\nvar be = o((e)=>e.replace(/^\\/|\\/$/g, \"\"), \"removeLeadingTrailingSlashes\");\nvar Bo = o((e, t)=>{\n    let r = be(e), s = be(t);\n    if (!Vo(r, s)) return !1;\n    let n = _e(r);\n    return _e(s).every((i, c)=>Pt(i) || i === n[c]);\n}, \"checkBySegments\");\nvar No = o((e, t, r)=>{\n    let s = be(r || \"\"), n = `${s}${s ? \"/\" : \"\"}${e}`;\n    return t === \"list\" ? n = `${n}` : t === \"create\" ? n = `${n}/create` : t === \"edit\" ? n = `${n}/edit/:id` : t === \"show\" ? n = `${n}/show/:id` : t === \"clone\" && (n = `${n}/clone/:id`), `/${n.replace(/^\\//, \"\")}`;\n}, \"getDefaultActionPath\");\nvar Fe = o((e, t)=>{\n    var n, a;\n    let r = S((n = e.meta) == null ? void 0 : n.parent, (a = e.options) == null ? void 0 : a.parent, e.parentName);\n    return r ? t.find((i)=>(i.identifier ?? i.name) === r) ?? {\n        name: r\n    } : void 0;\n}, \"getParentResource\");\nvar St = o((e, t, r)=>{\n    let s = [], n = Fe(e, t);\n    for(; n;)s.push(n), n = Fe(n, t);\n    if (s.length !== 0) return `/${s.reverse().map((a)=>{\n        var c;\n        let i = r ? ((c = a.options) == null ? void 0 : c.route) ?? a.name : a.name;\n        return be(i);\n    }).join(\"/\")}`;\n}, \"getParentPrefixForResource\");\nvar Re = o((e, t, r)=>{\n    let s = [], n = [\n        \"list\",\n        \"show\",\n        \"edit\",\n        \"create\",\n        \"clone\"\n    ], a = St(e, t, r);\n    return n.forEach((i)=>{\n        var u, d;\n        let c = r && i === \"clone\" ? e.create : e[i], p;\n        typeof c == \"function\" || r ? p = No(r ? ((u = e.meta) == null ? void 0 : u.route) ?? ((d = e.options) == null ? void 0 : d.route) ?? e.name : e.name, i, r ? a : void 0) : typeof c == \"string\" ? p = c : typeof c == \"object\" && (p = c.path), p && s.push({\n            action: i,\n            resource: e,\n            route: `/${p.replace(/^\\//, \"\")}`\n        });\n    }), s;\n}, \"getActionRoutesFromResource\");\nvar Ko = o((e)=>{\n    var n;\n    if (e.length === 0) return;\n    if (e.length === 1) return e[0];\n    let t = e.map((a)=>({\n            ...a,\n            splitted: _e(be(a.route))\n        })), r = ((n = t[0]) == null ? void 0 : n.splitted.length) ?? 0, s = [\n        ...t\n    ];\n    for(let a = 0; a < r; a++){\n        let i = s.filter((c)=>!Pt(c.splitted[a]));\n        if (i.length !== 0) {\n            if (i.length === 1) {\n                s = i;\n                break;\n            }\n            s = i;\n        }\n    }\n    return s[0];\n}, \"pickMatchedRoute\");\nvar Go = o((e, t)=>{\n    let s = t.flatMap((a)=>Re(a, t)).filter((a)=>Bo(e, a.route)), n = Ko(s);\n    return {\n        found: !!n,\n        resource: n == null ? void 0 : n.resource,\n        action: n == null ? void 0 : n.action,\n        matchedRoute: n == null ? void 0 : n.route\n    };\n}, \"matchResourceFromRoute\");\nvar tr = o((e, t)=>{\n    var n;\n    let r, s = St(e, t, !0);\n    if (s) {\n        let a = S(e.meta, e.options);\n        r = `${s}/${(a == null ? void 0 : a.route) ?? e.name}`;\n    } else r = ((n = e.options) == null ? void 0 : n.route) ?? e.name;\n    return `/${r.replace(/^\\//, \"\")}`;\n}, \"routeGenerator\");\nvar Ho = o((e)=>{\n    var i;\n    let t = [], r = {}, s = {}, n, a;\n    for(let c = 0; c < e.length; c++){\n        n = e[c];\n        let p = n.route ?? ((i = S(n == null ? void 0 : n.meta, n.options)) == null ? void 0 : i.route) ?? \"\";\n        r[p] = n, r[p].children = [], s[n.name] = n, s[n.name].children = [];\n    }\n    for(let c in r)Object.hasOwn(r, c) && (a = r[c], a.parentName && s[a.parentName] ? s[a.parentName].children.push(a) : t.push(a));\n    return t;\n}, \"createTreeView\");\nvar It = o((e)=>(e = e.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\"), e = e.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\"), e = e.toLowerCase().replace(/[_-]+/g, \" \").replace(/\\s{2,}/g, \" \").trim(), e = e.charAt(0).toUpperCase() + e.slice(1), e), \"humanizeString\");\n\n\n\nvar Ar = o(({ children: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, e), \"DefaultLayout\");\nvar zn = {\n    icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: 24,\n        height: 24,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        \"data-testid\": \"refine-logo\",\n        id: \"refine-default-logo\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M13.7889 0.422291C12.6627 -0.140764 11.3373 -0.140764 10.2111 0.422291L2.21115 4.42229C0.85601 5.09986 0 6.48491 0 8V16C0 17.5151 0.85601 18.9001 2.21115 19.5777L10.2111 23.5777C11.3373 24.1408 12.6627 24.1408 13.7889 23.5777L21.7889 19.5777C23.144 18.9001 24 17.5151 24 16V8C24 6.48491 23.144 5.09986 21.7889 4.42229L13.7889 0.422291ZM8 8C8 5.79086 9.79086 4 12 4C14.2091 4 16 5.79086 16 8V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16V8Z\",\n        fill: \"currentColor\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z\",\n        fill: \"currentColor\"\n    })),\n    text: \"Refine Project\"\n}, ve = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    warnWhenUnsavedChanges: !1,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\"\n    },\n    overtime: {\n        interval: 1e3\n    },\n    textTransformers: {\n        humanize: It,\n        plural: pluralize__WEBPACK_IMPORTED_MODULE_4__.plural,\n        singular: pluralize__WEBPACK_IMPORTED_MODULE_4__.singular\n    },\n    disableServerSideValidation: !1,\n    title: zn\n}, De = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    hasDashboard: !1,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: !1,\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    Title: void 0,\n    Sider: void 0,\n    Header: void 0,\n    Footer: void 0,\n    Layout: Ar,\n    OffLayoutArea: void 0,\n    liveMode: \"off\",\n    onLiveEvent: void 0,\n    options: ve\n}), $o = o(({ hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: s, undoableTimeout: n, children: a, DashboardPage: i, Title: c, Layout: p = Ar, Header: u, Sider: d, Footer: l, OffLayoutArea: y, LoginPage: f = Qr, catchAll: x, liveMode: L = \"off\", onLiveEvent: v, options: g })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(De.Provider, {\n        value: {\n            __initialized: !0,\n            hasDashboard: e,\n            mutationMode: t,\n            warnWhenUnsavedChanges: r,\n            syncWithLocation: s,\n            Title: c,\n            undoableTimeout: n,\n            Layout: p,\n            Header: u,\n            Sider: d,\n            Footer: l,\n            OffLayoutArea: y,\n            DashboardPage: i,\n            LoginPage: f,\n            catchAll: x,\n            liveMode: L,\n            onLiveEvent: v,\n            options: g\n        }\n    }, a), \"RefineContextProvider\");\nvar Vr = o(({ options: e, disableTelemetry: t, liveMode: r, mutationMode: s, reactQueryClientConfig: n, reactQueryDevtoolConfig: a, syncWithLocation: i, undoableTimeout: c, warnWhenUnsavedChanges: p } = {})=>{\n    var y, f, x, L, v, g, h, M, w, P, T, m;\n    let u = {\n        breadcrumb: e == null ? void 0 : e.breadcrumb,\n        mutationMode: (e == null ? void 0 : e.mutationMode) ?? s ?? ve.mutationMode,\n        undoableTimeout: (e == null ? void 0 : e.undoableTimeout) ?? c ?? ve.undoableTimeout,\n        syncWithLocation: (e == null ? void 0 : e.syncWithLocation) ?? i ?? ve.syncWithLocation,\n        warnWhenUnsavedChanges: (e == null ? void 0 : e.warnWhenUnsavedChanges) ?? p ?? ve.warnWhenUnsavedChanges,\n        liveMode: (e == null ? void 0 : e.liveMode) ?? r ?? ve.liveMode,\n        redirect: {\n            afterCreate: ((y = e == null ? void 0 : e.redirect) == null ? void 0 : y.afterCreate) ?? ve.redirect.afterCreate,\n            afterClone: ((f = e == null ? void 0 : e.redirect) == null ? void 0 : f.afterClone) ?? ve.redirect.afterClone,\n            afterEdit: ((x = e == null ? void 0 : e.redirect) == null ? void 0 : x.afterEdit) ?? ve.redirect.afterEdit\n        },\n        overtime: (e == null ? void 0 : e.overtime) ?? ve.overtime,\n        textTransformers: {\n            humanize: ((L = e == null ? void 0 : e.textTransformers) == null ? void 0 : L.humanize) ?? ve.textTransformers.humanize,\n            plural: ((v = e == null ? void 0 : e.textTransformers) == null ? void 0 : v.plural) ?? ve.textTransformers.plural,\n            singular: ((g = e == null ? void 0 : e.textTransformers) == null ? void 0 : g.singular) ?? ve.textTransformers.singular\n        },\n        disableServerSideValidation: (e == null ? void 0 : e.disableServerSideValidation) ?? ve.disableServerSideValidation,\n        projectId: e == null ? void 0 : e.projectId,\n        useNewQueryKeys: e == null ? void 0 : e.useNewQueryKeys,\n        title: {\n            icon: typeof ((h = e == null ? void 0 : e.title) == null ? void 0 : h.icon) > \"u\" ? ve.title.icon : (M = e == null ? void 0 : e.title) == null ? void 0 : M.icon,\n            text: typeof ((w = e == null ? void 0 : e.title) == null ? void 0 : w.text) > \"u\" ? ve.title.text : (P = e == null ? void 0 : e.title) == null ? void 0 : P.text\n        }\n    }, d = (e == null ? void 0 : e.disableTelemetry) ?? t ?? !1, l = {\n        clientConfig: ((T = e == null ? void 0 : e.reactQuery) == null ? void 0 : T.clientConfig) ?? n ?? {},\n        devtoolConfig: ((m = e == null ? void 0 : e.reactQuery) == null ? void 0 : m.devtoolConfig) ?? a ?? {}\n    };\n    return {\n        optionsWithDefaults: u,\n        disableTelemetryWithDefault: d,\n        reactQueryWithDefaults: l\n    };\n}, \"handleRefineOptions\");\nvar Br = o(({ redirectFromProps: e, action: t, redirectOptions: r })=>{\n    if (e || e === !1) return e;\n    switch(t){\n        case \"clone\":\n            return r.afterClone;\n        case \"create\":\n            return r.afterCreate;\n        case \"edit\":\n            return r.afterEdit;\n        default:\n            return !1;\n    }\n}, \"redirectPage\");\nvar rr = o(async (e, t, r)=>{\n    let s = [];\n    for (let [n, a] of e.entries())try {\n        let i = await a();\n        s.push(t(i, n));\n    } catch (i) {\n        s.push(r(i, n));\n    }\n    return s;\n}, \"sequentialPromises\");\nvar ye = o((e, t = [], r = !1)=>{\n    if (!e) return;\n    if (r) {\n        let n = t.find((i)=>be(i.route ?? \"\") === be(e));\n        return n || t.find((i)=>i.name === e);\n    }\n    let s = t.find((n)=>n.identifier === e);\n    return s || (s = t.find((n)=>n.name === e)), s;\n}, \"pickResource\");\nvar _ = o((e, t, r)=>{\n    if (t) return t;\n    let s = ye(e, r), n = S(s == null ? void 0 : s.meta, s == null ? void 0 : s.options);\n    return n != null && n.dataProviderName ? n.dataProviderName : \"default\";\n}, \"pickDataProvider\");\nvar qe = o(async (e)=>({\n        data: (await Promise.all(e)).map((t)=>t.data)\n    }), \"handleMultiple\");\nvar or = o((e)=>{\n    let { pagination: t, cursor: r } = e;\n    if (r != null && r.next) return r.next;\n    let s = (t == null ? void 0 : t.current) || 1, n = (t == null ? void 0 : t.pageSize) || 10, a = Math.ceil((e.total || 0) / n);\n    return s < a ? Number(s) + 1 : void 0;\n}, \"getNextPageParam\"), sr = o((e)=>{\n    let { pagination: t, cursor: r } = e;\n    if (r != null && r.prev) return r.prev;\n    let s = (t == null ? void 0 : t.current) || 1;\n    return s === 1 ? void 0 : s - 1;\n}, \"getPreviousPageParam\");\nvar nr = o((e)=>{\n    let t = [];\n    return e.forEach((r)=>{\n        var s, n;\n        t.push({\n            ...r,\n            label: ((s = r.meta) == null ? void 0 : s.label) ?? ((n = r.options) == null ? void 0 : n.label),\n            route: tr(r, e),\n            canCreate: !!r.create,\n            canEdit: !!r.edit,\n            canShow: !!r.show,\n            canDelete: r.canDelete\n        });\n    }), t;\n}, \"legacyResourceTransform\");\nvar Oo = o((e)=>_e(be(e)).flatMap((r)=>Pt(r) ? [\n            r.slice(1)\n        ] : []), \"pickRouteParams\");\nvar zo = o((e, t = {})=>e.reduce((r, s)=>{\n        let n = t[s];\n        return typeof n < \"u\" && (r[s] = n), r;\n    }, {}), \"prepareRouteParams\");\nvar Me = o((e, t = {}, r = {}, s = {})=>{\n    let n = Oo(e), a = zo(n, {\n        ...t,\n        ...typeof (r == null ? void 0 : r.id) < \"u\" ? {\n            id: r.id\n        } : {},\n        ...typeof (r == null ? void 0 : r.action) < \"u\" ? {\n            action: r.action\n        } : {},\n        ...typeof (r == null ? void 0 : r.resource) < \"u\" ? {\n            resource: r.resource\n        } : {},\n        ...r == null ? void 0 : r.params,\n        ...s\n    });\n    return e.replace(/:([^\\/]+)/g, (i, c)=>{\n        let p = a[c];\n        return typeof p < \"u\" ? `${p}` : i;\n    });\n}, \"composeRoute\");\nvar J = o(()=>{\n    let e = ue(), t = fe();\n    return t.isProvided ? {\n        isLegacy: !1,\n        ...t\n    } : e.isProvided ? {\n        isLegacy: !0,\n        ...e,\n        check: e.checkAuth,\n        onError: e.checkError,\n        getIdentity: e.getUserIdentity\n    } : null;\n}, \"useActiveAuthProvider\");\nvar kt = o(({ hasPagination: e, pagination: t, configPagination: r } = {})=>{\n    let s = e === !1 ? \"off\" : \"server\", n = (t == null ? void 0 : t.mode) ?? s, a = S(t == null ? void 0 : t.current, r == null ? void 0 : r.current) ?? 1, i = S(t == null ? void 0 : t.pageSize, r == null ? void 0 : r.pageSize) ?? 10;\n    return {\n        current: a,\n        pageSize: i,\n        mode: n\n    };\n}, \"handlePaginationParams\");\n\nvar ar = o((e)=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let s = window.matchMedia(e);\n        s.matches !== t && r(s.matches);\n        let n = o(()=>r(s.matches), \"listener\");\n        return window.addEventListener(\"resize\", n), ()=>window.removeEventListener(\"resize\", n);\n    }, [\n        t,\n        e\n    ]), t;\n}, \"useMediaQuery\");\nvar ir = o((e, t, r, s)=>{\n    let n = s ? e(t, s, r) : e(t, r), a = r ?? t;\n    return n === t || typeof n > \"u\" ? a : n;\n}, \"safeTranslate\");\nfunction _o(e, t, r, s, n) {\n    var y;\n    let a = {\n        create: \"Create new \",\n        clone: `#${s ?? \"\"} Clone `,\n        edit: `#${s ?? \"\"} Edit `,\n        show: `#${s ?? \"\"} Show `,\n        list: \"\"\n    }, i = (t == null ? void 0 : t.identifier) ?? (t == null ? void 0 : t.name), c = (t == null ? void 0 : t.label) ?? ((y = t == null ? void 0 : t.meta) == null ? void 0 : y.label) ?? Ot(i, r === \"list\" ? \"plural\" : \"singular\"), p = n ?? c, u = ir(e, \"documentTitle.default\", \"Refine\"), d = ir(e, \"documentTitle.suffix\", \" | Refine\"), l = u;\n    return r && i && (l = ir(e, `documentTitle.${i}.${r}`, `${a[r] ?? \"\"}${p}${d}`, {\n        id: s\n    })), l;\n}\no(_o, \"generateDefaultDocumentTitle\");\n\nvar ke = o((e, t)=>{\n    let { mutationMode: r, undoableTimeout: s } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(De);\n    return {\n        mutationMode: e ?? r,\n        undoableTimeout: t ?? s\n    };\n}, \"useMutationMode\");\n\n\nvar Nr = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Xo = o(({ children: e })=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Nr.Provider, {\n        value: {\n            warnWhen: t,\n            setWarnWhen: r\n        }\n    }, e);\n}, \"UnsavedWarnContextProvider\");\nvar dt = o(()=>{\n    let { warnWhenUnsavedChanges: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(De), { warnWhen: t, setWarnWhen: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Nr);\n    return {\n        warnWhenUnsavedChanges: e,\n        warnWhen: !!t,\n        setWarnWhen: r ?? (()=>{})\n    };\n}, \"useWarnAboutChange\");\n\nvar Kr = o(()=>{\n    let { syncWithLocation: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(De);\n    return {\n        syncWithLocation: e\n    };\n}, \"useSyncWithLocation\");\n\nvar qn = o(()=>{\n    let { Title: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(De);\n    return e;\n}, \"useTitle\");\n\nvar ne = o(()=>{\n    let { Footer: e, Header: t, Layout: r, OffLayoutArea: s, Sider: n, Title: a, hasDashboard: i, mutationMode: c, syncWithLocation: p, undoableTimeout: u, warnWhenUnsavedChanges: d, DashboardPage: l, LoginPage: y, catchAll: f, options: x, __initialized: L } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(De);\n    return {\n        __initialized: L,\n        Footer: e,\n        Header: t,\n        Layout: r,\n        OffLayoutArea: s,\n        Sider: n,\n        Title: a,\n        hasDashboard: i,\n        mutationMode: c,\n        syncWithLocation: p,\n        undoableTimeout: u,\n        warnWhenUnsavedChanges: d,\n        DashboardPage: l,\n        LoginPage: y,\n        catchAll: f,\n        options: x\n    };\n}, \"useRefineContext\");\nvar nt = o(()=>{\n    let { options: { textTransformers: e } } = ne();\n    return o((r = \"\", s)=>{\n        let n = e.humanize(r);\n        return s === \"singular\" ? e.singular(n) : e.plural(n);\n    }, \"getFriendlyName\");\n}, \"useUserFriendlyName\");\nvar Yo = o((e)=>typeof e == \"object\" && e !== null, \"isNested\"), ta = o((e)=>Array.isArray(e), \"isArray\"), ur = o((e, t = \"\")=>Yo(e) ? Object.keys(e).reduce((r, s)=>{\n        let n = t.length ? `${t}.` : \"\";\n        return Yo(e[s]) && Object.keys(e[s]).length && (ta(e[s]) && e[s].length ? e[s].forEach((a, i)=>{\n            Object.assign(r, ur(a, `${n + s}.${i}`));\n        }) : Object.assign(r, ur(e[s], n + s))), r[n + s] = e[s], r;\n    }, {}) : {\n        [t]: e\n    }, \"flattenObjectKeys\");\nvar Jo = o((e)=>e.split(\".\").map((t)=>Number.isNaN(Number(t)) ? t : Number(t)), \"propertyPathToArray\");\nvar Gr = o((e, t, r)=>{\n    if (true) return;\n    let s = new Blob([\n        t\n    ], {\n        type: r\n    }), n = document.createElement(\"a\");\n    n.setAttribute(\"visibility\", \"hidden\"), n.download = e;\n    let a = URL.createObjectURL(s);\n    n.href = a, document.body.appendChild(n), n.click(), document.body.removeChild(n), setTimeout(()=>{\n        URL.revokeObjectURL(a);\n    });\n}, \"downloadInBrowser\");\nvar cr = o((e)=>{\n    setTimeout(e, 0);\n}, \"deferExecution\");\n\nvar Hr = o((e, t = 1e3, r)=>{\n    let s = [], n = o(()=>{\n        s.forEach((c)=>{\n            var p;\n            return (p = c.reject) == null ? void 0 : p.call(c, r);\n        }), s = [];\n    }, \"cancelPrevious\"), a = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((...c)=>{\n        let { resolve: p, reject: u } = s.pop() || {};\n        Promise.resolve(e(...c)).then(p).catch(u);\n    }, t), i = o((...c)=>new Promise((p, u)=>{\n            n(), s.push({\n                resolve: p,\n                reject: u\n            }), a(...c);\n        }), \"runner\");\n    return i.flush = ()=>a.flush(), i.cancel = ()=>{\n        a.cancel(), n();\n    }, i;\n}, \"asyncDebounce\");\nvar Ae = o((e)=>{\n    let t = {\n        queryKey: e.queryKey,\n        pageParam: e.pageParam\n    };\n    return Object.defineProperty(t, \"signal\", {\n        enumerable: !0,\n        get: ()=>e.signal\n    }), t;\n}, \"prepareQueryContext\");\nvar pr = o((e)=>{\n    let { current: t, pageSize: r, sorter: s, sorters: n, filters: a } = qs__WEBPACK_IMPORTED_MODULE_6__.parse(e.substring(1));\n    return {\n        parsedCurrent: t && Number(t),\n        parsedPageSize: r && Number(r),\n        parsedSorter: S(n, s) ?? [],\n        parsedFilters: a ?? []\n    };\n}, \"parseTableParams\"), sa = o((e)=>{\n    let t = qs__WEBPACK_IMPORTED_MODULE_6__.stringify(e);\n    return pr(`/${t}`);\n}, \"parseTableParamsFromQuery\"), dr = o((e)=>{\n    let t = {\n        skipNulls: !0,\n        arrayFormat: \"indices\",\n        encode: !1\n    }, { pagination: r, sorter: s, sorters: n, filters: a, ...i } = e;\n    return qs__WEBPACK_IMPORTED_MODULE_6__.stringify({\n        ...i,\n        ...r || {},\n        sorters: S(n, s),\n        filters: a\n    }, t);\n}, \"stringifyTableParams\"), ts = o((e, t)=>e.operator !== \"and\" && e.operator !== \"or\" && t.operator !== \"and\" && t.operator !== \"or\" ? (\"field\" in e ? e.field : void 0) === (\"field\" in t ? t.field : void 0) && e.operator === t.operator : (\"key\" in e ? e.key : void 0) === (\"key\" in t ? t.key : void 0) && e.operator === t.operator, \"compareFilters\"), rs = o((e, t)=>e.field === t.field, \"compareSorters\"), ht = o((e, t, r = [])=>(t.filter((n)=>(n.operator === \"or\" || n.operator === \"and\") && !n.key).length > 1 && warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`), (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(e, t, r, ts).filter((n)=>n.value !== void 0 && n.value !== null && (n.operator !== \"or\" || n.operator === \"or\" && n.value.length !== 0) && (n.operator !== \"and\" || n.operator === \"and\" && n.value.length !== 0))), \"unionFilters\"), lr = o((e, t)=>(0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(e, t, rs).filter((r)=>r.order !== void 0 && r.order !== null), \"unionSorters\"), mr = o((e, t)=>[\n        ...(0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(t, e, ts),\n        ...e\n    ], \"setInitialFilters\"), fr = o((e, t)=>[\n        ...(0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(t, e, rs),\n        ...e\n    ], \"setInitialSorters\"), na = o((e, t)=>{\n    if (!t) return;\n    let r = t.find((s)=>s.field === e);\n    if (r) return r.order;\n}, \"getDefaultSortOrder\"), aa = o((e, t, r = \"eq\")=>{\n    let s = t == null ? void 0 : t.find((n)=>{\n        if (n.operator !== \"or\" && n.operator !== \"and\" && \"field\" in n) {\n            let { operator: a, field: i } = n;\n            return i === e && a === r;\n        }\n    });\n    if (s) return s.value || [];\n}, \"getDefaultFilter\");\nvar ia = o((e)=>new Promise((t, r)=>{\n        let s = new FileReader, n = o(()=>{\n            s.result && (s.removeEventListener(\"load\", n, !1), t(s.result));\n        }, \"resultHandler\");\n        s.addEventListener(\"load\", n, !1), s.readAsDataURL(e.originFileObj), s.onerror = (a)=>(s.removeEventListener(\"load\", n, !1), r(a));\n    }), \"file2Base64\");\nvar O = o(()=>{\n    let { options: { useNewQueryKeys: e } } = ne();\n    return {\n        keys: Oe,\n        preferLegacyKeys: !e\n    };\n}, \"useKeys\");\nfunction ua({ v3LegacyAuthProviderCompatible: e = !1, options: t, params: r } = {}) {\n    let { getPermissions: s } = ue(), { getPermissions: n } = fe(), { keys: a, preferLegacyKeys: i } = O(), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: a().auth().action(\"permissions\").get(i),\n        queryFn: n ? ()=>n(r) : ()=>Promise.resolve(void 0),\n        enabled: !e && !!n,\n        ...e ? {} : t,\n        meta: {\n            ...e ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"usePermissions\", i)\n        }\n    }), p = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...a().auth().action(\"permissions\").get(i),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: s ? ()=>s(r) : ()=>Promise.resolve(void 0),\n        enabled: e && !!s,\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"usePermissions\", i)\n        }\n    });\n    return e ? p : c;\n}\no(ua, \"usePermissions\");\n\n\nfunction $r({ v3LegacyAuthProviderCompatible: e = !1, queryOptions: t } = {}) {\n    let { getUserIdentity: r } = ue(), { getIdentity: s } = fe(), { keys: n, preferLegacyKeys: a } = O(), i = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: n().auth().action(\"identity\").get(a),\n        queryFn: s ?? (()=>Promise.resolve({})),\n        enabled: !e && !!s,\n        retry: !1,\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useGetIdentity\", a)\n        }\n    }), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...n().auth().action(\"identity\").get(a),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: r ?? (()=>Promise.resolve({})),\n        enabled: e && !!r,\n        retry: !1,\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useGetIdentity\", a)\n        }\n    });\n    return e ? c : i;\n}\no($r, \"useGetIdentity\");\n\n\n\nvar Rt = o(()=>{\n    let e = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { keys: t, preferLegacyKeys: r } = O();\n    return o(async ()=>{\n        await Promise.all([\n            \"check\",\n            \"identity\",\n            \"permissions\"\n        ].map((n)=>e.invalidateQueries(t().auth().action(n).get(r))));\n    }, \"invalidate\");\n}, \"useInvalidateAuthStore\");\nfunction yr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Rt(), s = Z(), n = ge(), { push: a } = ce(), { open: i, close: c } = we(), { logout: p } = ue(), { logout: u } = fe(), { keys: d, preferLegacyKeys: l } = O(), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: d().auth().action(\"logout\").get(l),\n        mutationFn: u,\n        onSuccess: async (x, L)=>{\n            let { success: v, error: g, redirectTo: h, successNotification: M } = x, { redirectPath: w } = L ?? {}, P = w ?? h;\n            v && (c == null || c(\"useLogout-error\"), M && (i == null || i(pa(M)))), (g || !v) && (i == null || i(Or(g))), P !== !1 && (s === \"legacy\" ? a(P ?? \"/login\") : P && n({\n                to: P\n            })), await r();\n        },\n        onError: (x)=>{\n            i == null || i(Or(x));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogout\", l)\n        }\n    }), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...d().auth().action(\"logout\").get(l),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: p,\n        onSuccess: async (x, L)=>{\n            let v = (L == null ? void 0 : L.redirectPath) ?? x;\n            if (v !== !1) {\n                if (v) {\n                    s === \"legacy\" ? a(v) : n({\n                        to: v\n                    });\n                    return;\n                }\n                s === \"legacy\" ? a(\"/login\") : n({\n                    to: \"/login\"\n                }), await r();\n            }\n        },\n        onError: (x)=>{\n            i == null || i(Or(x));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogout\", l)\n        }\n    });\n    return e ? f : y;\n}\no(yr, \"useLogout\");\nvar Or = o((e)=>({\n        key: \"useLogout-error\",\n        type: \"error\",\n        message: (e == null ? void 0 : e.name) || \"Logout Error\",\n        description: (e == null ? void 0 : e.message) || \"Something went wrong during logout\"\n    }), \"buildNotification\"), pa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"logout-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\n\n\nfunction At({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Rt(), s = Z(), n = ge(), { replace: a } = ce(), i = ae(), { useLocation: c } = te(), { search: p } = c(), { close: u, open: d } = we(), { login: l } = ue(), { login: y } = fe(), { keys: f, preferLegacyKeys: x } = O(), L = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var h;\n        return s === \"legacy\" ? qs__WEBPACK_IMPORTED_MODULE_6__.parse(p, {\n            ignoreQueryPrefix: !0\n        }).to : (h = i.params) == null ? void 0 : h.to;\n    }, [\n        s,\n        i.params,\n        p\n    ]), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: f().auth().action(\"login\").get(x),\n        mutationFn: y,\n        onSuccess: async ({ success: h, redirectTo: M, error: w, successNotification: P })=>{\n            h && (u == null || u(\"login-error\"), P && (d == null || d(ma(P)))), (w || !h) && (d == null || d(zr(w))), L && h ? s === \"legacy\" ? a(L) : n({\n                to: L,\n                type: \"replace\"\n            }) : M ? s === \"legacy\" ? a(M) : n({\n                to: M,\n                type: \"replace\"\n            }) : s === \"legacy\" && a(\"/\"), await r();\n        },\n        onError: (h)=>{\n            d == null || d(zr(h));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogin\", x)\n        }\n    }), g = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...f().auth().action(\"login\").get(x),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: l,\n        onSuccess: async (h)=>{\n            L && a(L), h !== !1 && !L && (typeof h == \"string\" ? s === \"legacy\" ? a(h) : n({\n                to: h,\n                type: \"replace\"\n            }) : s === \"legacy\" ? a(\"/\") : n({\n                to: \"/\",\n                type: \"replace\"\n            })), await r(), u == null || u(\"login-error\");\n        },\n        onError: (h)=>{\n            d == null || d(zr(h));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogin\", x)\n        }\n    });\n    return e ? g : v;\n}\no(At, \"useLogin\");\nvar zr = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Login Error\",\n        description: (e == null ? void 0 : e.message) || \"Invalid credentials\",\n        key: \"login-error\",\n        type: \"error\"\n    }), \"buildNotification\"), ma = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"login-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction jr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Rt(), s = Z(), n = ge(), { replace: a } = ce(), { register: i } = ue(), { register: c } = fe(), { close: p, open: u } = we(), { keys: d, preferLegacyKeys: l } = O(), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: d().auth().action(\"register\").get(l),\n        mutationFn: c,\n        onSuccess: async ({ success: x, redirectTo: L, error: v, successNotification: g })=>{\n            x && (p == null || p(\"register-error\"), g && (u == null || u(fa(g)))), (v || !x) && (u == null || u(_r(v))), L ? s === \"legacy\" ? a(L) : n({\n                to: L,\n                type: \"replace\"\n            }) : s === \"legacy\" && a(\"/\"), await r();\n        },\n        onError: (x)=>{\n            u == null || u(_r(x));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useRegister\", l)\n        }\n    }), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...d().auth().action(\"register\").get(l),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: i,\n        onSuccess: async (x)=>{\n            x !== !1 && (x ? s === \"legacy\" ? a(x) : n({\n                to: x,\n                type: \"replace\"\n            }) : s === \"legacy\" ? a(\"/\") : n({\n                to: \"/\",\n                type: \"replace\"\n            }), await r(), p == null || p(\"register-error\"));\n        },\n        onError: (x)=>{\n            u == null || u(_r(x));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useRegister\", l)\n        }\n    });\n    return e ? f : y;\n}\no(jr, \"useRegister\");\nvar _r = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Register Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while registering\",\n        key: \"register-error\",\n        type: \"error\"\n    }), \"buildNotification\"), fa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"register-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction Zr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Z(), s = ge(), { replace: n } = ce(), { forgotPassword: a } = ue(), { forgotPassword: i } = fe(), { close: c, open: p } = we(), { keys: u, preferLegacyKeys: d } = O(), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: u().auth().action(\"forgotPassword\").get(d),\n        mutationFn: i,\n        onSuccess: ({ success: f, redirectTo: x, error: L, successNotification: v })=>{\n            f && (c == null || c(\"forgot-password-error\"), v && (p == null || p(ya(v)))), (L || !f) && (p == null || p(Xr(L))), x && (r === \"legacy\" ? n(x) : s({\n                to: x,\n                type: \"replace\"\n            }));\n        },\n        onError: (f)=>{\n            p == null || p(Xr(f));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useForgotPassword\", d)\n        }\n    }), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...u().auth().action(\"forgotPassword\").get(d),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: a,\n        onSuccess: (f)=>{\n            f !== !1 && f && (r === \"legacy\" ? n(f) : s({\n                to: f,\n                type: \"replace\"\n            })), c == null || c(\"forgot-password-error\");\n        },\n        onError: (f)=>{\n            p == null || p(Xr(f));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useForgotPassword\", d)\n        }\n    });\n    return e ? y : l;\n}\no(Zr, \"useForgotPassword\");\nvar Xr = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Forgot Password Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while resetting password\",\n        key: \"forgot-password-error\",\n        type: \"error\"\n    }), \"buildNotification\"), ya = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"forgot-password-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\n\n\nfunction Jr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Z(), s = ge(), { replace: n } = ce(), { updatePassword: a } = ue(), { updatePassword: i } = fe(), { close: c, open: p } = we(), { keys: u, preferLegacyKeys: d } = O(), l = ae(), { useLocation: y } = te(), { search: f } = y(), x = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>r === \"legacy\" ? qs__WEBPACK_IMPORTED_MODULE_6__.parse(f, {\n            ignoreQueryPrefix: !0\n        }) ?? {} : l.params ?? {}, [\n        f,\n        l,\n        r\n    ]), L = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: u().auth().action(\"updatePassword\").get(d),\n        mutationFn: async (g)=>i == null ? void 0 : i({\n                ...x,\n                ...g\n            }),\n        onSuccess: ({ success: g, redirectTo: h, error: M, successNotification: w })=>{\n            g && (c == null || c(\"update-password-error\"), w && (p == null || p(xa(w)))), (M || !g) && (p == null || p(Yr(M))), h && (r === \"legacy\" ? n(h) : s({\n                to: h,\n                type: \"replace\"\n            }));\n        },\n        onError: (g)=>{\n            p == null || p(Yr(g));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdatePassword\", d)\n        }\n    }), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...u().auth().action(\"updatePassword\").get(d),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: async (g)=>a == null ? void 0 : a({\n                ...x,\n                ...g\n            }),\n        onSuccess: (g)=>{\n            g !== !1 && g && (r === \"legacy\" ? n(g) : s({\n                to: g,\n                type: \"replace\"\n            })), c == null || c(\"update-password-error\");\n        },\n        onError: (g)=>{\n            p == null || p(Yr(g));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdatePassword\", d)\n        }\n    });\n    return e ? v : L;\n}\no(Jr, \"useUpdatePassword\");\nvar Yr = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Update Password Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while updating password\",\n        key: \"update-password-error\",\n        type: \"error\"\n    }), \"buildNotification\"), xa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"update-password-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction gr({ v3LegacyAuthProviderCompatible: e = !1, params: t } = {}) {\n    let { checkAuth: r } = ue(), { check: s } = fe(), { keys: n, preferLegacyKeys: a } = O(), i = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: n().auth().action(\"check\").params(t).get(a),\n        queryFn: async ()=>await (s == null ? void 0 : s(t)) ?? {},\n        retry: !1,\n        enabled: !e,\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useIsAuthenticated\", a)\n        }\n    }), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...n().auth().action(\"check\").params(t).get(a),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: async ()=>await (r == null ? void 0 : r(t)) ?? {},\n        retry: !1,\n        enabled: e,\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useIsAuthenticated\", a)\n        }\n    });\n    return e ? c : i;\n}\no(gr, \"useIsAuthenticated\");\nvar Pa = gr;\n\n\nfunction pe({ v3LegacyAuthProviderCompatible: e = !1 } = {}) {\n    let t = Z(), r = ge(), { replace: s } = ce(), { checkError: n } = ue(), { onError: a } = fe(), { keys: i, preferLegacyKeys: c } = O(), { mutate: p } = yr({\n        v3LegacyAuthProviderCompatible: !!e\n    }), { mutate: u } = yr({\n        v3LegacyAuthProviderCompatible: !!e\n    }), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: i().auth().action(\"onError\").get(c),\n        ...a ? {\n            mutationFn: a,\n            onSuccess: ({ logout: y, redirectTo: f })=>{\n                if (y) {\n                    u({\n                        redirectPath: f\n                    });\n                    return;\n                }\n                if (f) {\n                    t === \"legacy\" ? s(f) : r({\n                        to: f,\n                        type: \"replace\"\n                    });\n                    return;\n                }\n            }\n        } : {\n            mutationFn: ()=>({})\n        },\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOnError\", c)\n        }\n    }), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...i().auth().action(\"onError\").get(c),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: n,\n        onError: (y)=>{\n            p({\n                redirectPath: y\n            });\n        },\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOnError\", c)\n        }\n    });\n    return e ? l : d;\n}\no(pe, \"useOnError\");\nvar ha = pe;\nvar qr = o(()=>{\n    let { isProvided: e } = ue(), { isProvided: t } = fe();\n    return !!(t || e);\n}, \"useIsExistAuthentication\");\n\n\n\nvar ee = o(({ isLoading: e, interval: t, onInterval: r })=>{\n    let [s, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), { options: a } = ne(), { overtime: i } = a, c = t ?? i.interval, p = r ?? (i == null ? void 0 : i.onInterval);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let u;\n        return e && (u = setInterval(()=>{\n            n((d)=>d === void 0 ? c : d + c);\n        }, c)), ()=>{\n            clearInterval(u), n(void 0);\n        };\n    }, [\n        e,\n        c\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        p && s && p(s);\n    }, [\n        s\n    ]), {\n        elapsedTime: s\n    };\n}, \"useLoadingOvertime\");\nvar Qt = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: a, queryOptions: i, successNotification: c, errorNotification: p, meta: u, metaData: d, liveMode: l, onLiveEvent: y, liveParams: f, dataProviderName: x, overtimeOptions: L } = {})=>{\n    let { resources: v, resource: g, identifier: h } = z(e), M = se(), w = G(), P = J(), { mutate: T } = pe({\n        v3LegacyAuthProviderCompatible: !!(P != null && P.isLegacy)\n    }), m = de(), U = q(), { keys: b, preferLegacyKeys: R } = O(), E = _(h, x, v), C = S(u, d), D = S(r, t == null ? void 0 : t.filters), A = S(a, t == null ? void 0 : t.sort), I = S(s, t == null ? void 0 : t.hasPagination), Q = kt({\n        pagination: n,\n        configPagination: t == null ? void 0 : t.pagination,\n        hasPagination: I\n    }), F = Q.mode === \"server\", H = U({\n        resource: g,\n        meta: C\n    }), W = {\n        meta: H,\n        metaData: H,\n        filters: D,\n        hasPagination: F,\n        pagination: Q,\n        sorters: A,\n        config: {\n            ...t,\n            sort: A\n        }\n    }, K = (i == null ? void 0 : i.enabled) === void 0 || (i == null ? void 0 : i.enabled) === !0, { getList: j } = M(E);\n    at({\n        resource: h,\n        types: [\n            \"*\"\n        ],\n        params: {\n            meta: H,\n            metaData: H,\n            pagination: Q,\n            hasPagination: F,\n            sort: A,\n            sorters: A,\n            filters: D,\n            subscriptionType: \"useList\",\n            ...f\n        },\n        channel: `resources/${g == null ? void 0 : g.name}`,\n        enabled: K,\n        liveMode: l,\n        onLiveEvent: y,\n        dataProviderName: E,\n        meta: {\n            ...u,\n            dataProviderName: x\n        }\n    });\n    let B = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: b().data(E).resource(h ?? \"\").action(\"list\").params({\n            ...C || {},\n            filters: D,\n            hasPagination: F,\n            ...F && {\n                pagination: Q\n            },\n            ...a && {\n                sorters: a\n            },\n            ...(t == null ? void 0 : t.sort) && {\n                sort: t == null ? void 0 : t.sort\n            }\n        }).get(R),\n        queryFn: (V)=>{\n            let N = {\n                ...H,\n                queryContext: Ae(V)\n            };\n            return j({\n                resource: (g == null ? void 0 : g.name) ?? \"\",\n                pagination: Q,\n                hasPagination: F,\n                filters: D,\n                sort: A,\n                sorters: A,\n                meta: N,\n                metaData: N\n            });\n        },\n        ...i,\n        enabled: typeof (i == null ? void 0 : i.enabled) < \"u\" ? i == null ? void 0 : i.enabled : !!(g != null && g.name),\n        select: (V)=>{\n            var Le;\n            let N = V, { current: X, mode: oe, pageSize: ie } = Q;\n            return oe === \"client\" && (N = {\n                ...N,\n                data: N.data.slice((X - 1) * ie, X * ie),\n                total: N.total\n            }), i != null && i.select ? (Le = i == null ? void 0 : i.select) == null ? void 0 : Le.call(i, N) : N;\n        },\n        onSuccess: (V)=>{\n            var X;\n            (X = i == null ? void 0 : i.onSuccess) == null || X.call(i, V);\n            let N = typeof c == \"function\" ? c(V, W, h) : c;\n            m(N);\n        },\n        onError: (V)=>{\n            var X;\n            T(V), (X = i == null ? void 0 : i.onError) == null || X.call(i, V);\n            let N = typeof p == \"function\" ? p(V, W, h) : p;\n            m(N, {\n                key: `${h}-useList-notification`,\n                message: w(\"notifications.error\", {\n                    statusCode: V.statusCode\n                }, `Error (status code: ${V.statusCode})`),\n                description: V.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...i == null ? void 0 : i.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useList\", R, g == null ? void 0 : g.name)\n        }\n    }), { elapsedTime: $ } = ee({\n        isLoading: B.isFetching,\n        interval: L == null ? void 0 : L.interval,\n        onInterval: L == null ? void 0 : L.onInterval\n    });\n    return {\n        ...B,\n        overtime: {\n            elapsedTime: $\n        }\n    };\n}, \"useList\");\n\n\nvar Vt = o(({ resource: e, id: t, queryOptions: r, successNotification: s, errorNotification: n, meta: a, metaData: i, liveMode: c, onLiveEvent: p, liveParams: u, dataProviderName: d, overtimeOptions: l })=>{\n    let { resources: y, resource: f, identifier: x } = z(e), L = se(), v = G(), g = J(), { mutate: h } = pe({\n        v3LegacyAuthProviderCompatible: !!(g != null && g.isLegacy)\n    }), M = de(), w = q(), { keys: P, preferLegacyKeys: T } = O(), m = S(a, i), U = _(x, d, y), { getOne: b } = L(U), R = w({\n        resource: f,\n        meta: m\n    });\n    at({\n        resource: x,\n        types: [\n            \"*\"\n        ],\n        channel: `resources/${f == null ? void 0 : f.name}`,\n        params: {\n            ids: t ? [\n                t\n            ] : [],\n            id: t,\n            meta: R,\n            metaData: R,\n            subscriptionType: \"useOne\",\n            ...u\n        },\n        enabled: typeof (r == null ? void 0 : r.enabled) < \"u\" ? r == null ? void 0 : r.enabled : typeof (f == null ? void 0 : f.name) < \"u\" && typeof t < \"u\",\n        liveMode: c,\n        onLiveEvent: p,\n        dataProviderName: U,\n        meta: {\n            ...a,\n            dataProviderName: d\n        }\n    });\n    let E = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: P().data(U).resource(x ?? \"\").action(\"one\").id(t ?? \"\").params({\n            ...m || {}\n        }).get(T),\n        queryFn: (D)=>b({\n                resource: (f == null ? void 0 : f.name) ?? \"\",\n                id: t,\n                meta: {\n                    ...R,\n                    queryContext: Ae(D)\n                },\n                metaData: {\n                    ...R,\n                    queryContext: Ae(D)\n                }\n            }),\n        ...r,\n        enabled: typeof (r == null ? void 0 : r.enabled) < \"u\" ? r == null ? void 0 : r.enabled : typeof t < \"u\",\n        onSuccess: (D)=>{\n            var I;\n            (I = r == null ? void 0 : r.onSuccess) == null || I.call(r, D);\n            let A = typeof s == \"function\" ? s(D, {\n                id: t,\n                ...R\n            }, x) : s;\n            M(A);\n        },\n        onError: (D)=>{\n            var I;\n            h(D), (I = r == null ? void 0 : r.onError) == null || I.call(r, D);\n            let A = typeof n == \"function\" ? n(D, {\n                id: t,\n                ...R\n            }, x) : n;\n            M(A, {\n                key: `${t}-${x}-getOne-notification`,\n                message: v(\"notifications.error\", {\n                    statusCode: D.statusCode\n                }, `Error (status code: ${D.statusCode})`),\n                description: D.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...r == null ? void 0 : r.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOne\", T, f == null ? void 0 : f.name)\n        }\n    }), { elapsedTime: C } = ee({\n        isLoading: E.isFetching,\n        interval: l == null ? void 0 : l.interval,\n        onInterval: l == null ? void 0 : l.onInterval\n    });\n    return {\n        ...E,\n        overtime: {\n            elapsedTime: C\n        }\n    };\n}, \"useOne\");\n\n\nvar eo = o(({ resource: e, ids: t, queryOptions: r, successNotification: s, errorNotification: n, meta: a, metaData: i, liveMode: c, onLiveEvent: p, liveParams: u, dataProviderName: d, overtimeOptions: l })=>{\n    let { resources: y, resource: f, identifier: x } = z(e), L = se(), v = G(), g = J(), { mutate: h } = pe({\n        v3LegacyAuthProviderCompatible: !!(g != null && g.isLegacy)\n    }), M = de(), w = q(), { keys: P, preferLegacyKeys: T } = O(), m = S(a, i), U = _(x, d, y), b = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === !0, { getMany: R, getOne: E } = L(U), C = w({\n        resource: f,\n        meta: m\n    });\n    at({\n        resource: x,\n        types: [\n            \"*\"\n        ],\n        params: {\n            ids: t,\n            meta: C,\n            metaData: C,\n            subscriptionType: \"useMany\",\n            ...u\n        },\n        channel: `resources/${f.name}`,\n        enabled: b,\n        liveMode: c,\n        onLiveEvent: p,\n        dataProviderName: U,\n        meta: {\n            ...a,\n            dataProviderName: d\n        }\n    });\n    let D = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: P().data(U).resource(x).action(\"many\").ids(...t).params({\n            ...m || {}\n        }).get(T),\n        queryFn: (I)=>{\n            let Q = {\n                ...C,\n                queryContext: Ae(I)\n            };\n            return R ? R({\n                resource: f == null ? void 0 : f.name,\n                ids: t,\n                meta: Q,\n                metaData: Q\n            }) : qe(t.map((F)=>E({\n                    resource: f == null ? void 0 : f.name,\n                    id: F,\n                    meta: Q,\n                    metaData: Q\n                })));\n        },\n        ...r,\n        onSuccess: (I)=>{\n            var F;\n            (F = r == null ? void 0 : r.onSuccess) == null || F.call(r, I);\n            let Q = typeof s == \"function\" ? s(I, t, x) : s;\n            M(Q);\n        },\n        onError: (I)=>{\n            var F;\n            h(I), (F = r == null ? void 0 : r.onError) == null || F.call(r, I);\n            let Q = typeof n == \"function\" ? n(I, t, x) : n;\n            M(Q, {\n                key: `${t[0]}-${x}-getMany-notification`,\n                message: v(\"notifications.error\", {\n                    statusCode: I.statusCode\n                }, `Error (status code: ${I.statusCode})`),\n                description: I.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...r == null ? void 0 : r.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useMany\", T, f == null ? void 0 : f.name)\n        }\n    }), { elapsedTime: A } = ee({\n        isLoading: D.isFetching,\n        interval: l == null ? void 0 : l.interval,\n        onInterval: l == null ? void 0 : l.onInterval\n    });\n    return {\n        ...D,\n        overtime: {\n            elapsedTime: A\n        }\n    };\n}, \"useMany\");\n\n\nvar to = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let { resources: r, select: s } = z(), n = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), a = se(), { mutationMode: i, undoableTimeout: c } = ke(), p = G(), u = J(), { mutate: d } = pe({\n        v3LegacyAuthProviderCompatible: !!(u != null && u.isLegacy)\n    }), l = Be(), { log: y } = Ne(), { notificationDispatch: f } = je(), x = de(), L = Ce(), v = q(), { options: { textTransformers: g } } = ne(), { keys: h, preferLegacyKeys: M } = O(), w = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ id: T, values: m, resource: U, mutationMode: b, undoableTimeout: R, onCancel: E, meta: C, metaData: D, dataProviderName: A })=>{\n            let { resource: I, identifier: Q } = s(U), F = v({\n                resource: I,\n                meta: S(C, D)\n            }), H = b ?? i, W = R ?? c;\n            return H !== \"undoable\" ? a(_(Q, A, r)).update({\n                resource: I.name,\n                id: T,\n                variables: m,\n                meta: F,\n                metaData: F\n            }) : new Promise((j, B)=>{\n                let $ = o(()=>{\n                    a(_(Q, A, r)).update({\n                        resource: I.name,\n                        id: T,\n                        variables: m,\n                        meta: F,\n                        metaData: F\n                    }).then((N)=>j(N)).catch((N)=>B(N));\n                }, \"doMutation\"), V = o(()=>{\n                    B({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                E && E(V), f({\n                    type: \"ADD\",\n                    payload: {\n                        id: T,\n                        resource: Q,\n                        cancelMutation: V,\n                        doMutation: $,\n                        seconds: W,\n                        isSilent: !!E\n                    }\n                });\n            });\n        },\n        onMutate: async ({ resource: T, id: m, mutationMode: U, values: b, dataProviderName: R, meta: E, metaData: C, optimisticUpdateMap: D = {\n            list: !0,\n            many: !0,\n            detail: !0\n        } })=>{\n            let { identifier: A } = s(T), { gqlMutation: I, gqlQuery: Q, ...F } = S(E, C) ?? {}, H = Je(M)(A, _(A, R, r), F), W = h().data(_(A, R, r)).resource(A), K = n.getQueriesData(W.get(M)), j = U ?? i;\n            return await n.cancelQueries(W.get(M), void 0, {\n                silent: !0\n            }), j !== \"pessimistic\" && (D.list && n.setQueriesData(W.action(\"list\").params(F ?? {}).get(M), (B)=>{\n                if (typeof D.list == \"function\") return D.list(B, b, m);\n                if (!B) return null;\n                let $ = B.data.map((V)=>{\n                    var N;\n                    return ((N = V.id) == null ? void 0 : N.toString()) === (m == null ? void 0 : m.toString()) ? {\n                        id: m,\n                        ...V,\n                        ...b\n                    } : V;\n                });\n                return {\n                    ...B,\n                    data: $\n                };\n            }), D.many && n.setQueriesData(W.action(\"many\").get(M), (B)=>{\n                if (typeof D.many == \"function\") return D.many(B, b, m);\n                if (!B) return null;\n                let $ = B.data.map((V)=>{\n                    var N;\n                    return ((N = V.id) == null ? void 0 : N.toString()) === (m == null ? void 0 : m.toString()) && (V = {\n                        id: m,\n                        ...V,\n                        ...b\n                    }), V;\n                });\n                return {\n                    ...B,\n                    data: $\n                };\n            }), D.detail && n.setQueriesData(W.action(\"one\").id(m).params(F ?? {}).get(M), (B)=>typeof D.detail == \"function\" ? D.detail(B, b, m) : B ? {\n                    ...B,\n                    data: {\n                        ...B.data,\n                        ...b\n                    }\n                } : null)), {\n                previousQueries: K,\n                queryKey: H\n            };\n        },\n        onSettled: (T, m, { id: U, resource: b, dataProviderName: R, invalidates: E = [\n            \"list\",\n            \"many\",\n            \"detail\"\n        ] })=>{\n            let { identifier: C } = s(b);\n            L({\n                resource: C,\n                dataProviderName: _(C, R, r),\n                invalidates: E,\n                id: U\n            }), f({\n                type: \"REMOVE\",\n                payload: {\n                    id: U,\n                    resource: C\n                }\n            });\n        },\n        onSuccess: (T, { id: m, resource: U, successNotification: b, dataProviderName: R, values: E, meta: C, metaData: D }, A)=>{\n            var X;\n            let { resource: I, identifier: Q } = s(U), F = g.singular(Q), H = _(Q, R, r), W = v({\n                resource: I,\n                meta: S(C, D)\n            }), K = typeof b == \"function\" ? b(T, {\n                id: m,\n                values: E\n            }, Q) : b;\n            x(K, {\n                key: `${m}-${Q}-notification`,\n                description: p(\"notifications.success\", \"Successful\"),\n                message: p(\"notifications.editSuccess\", {\n                    resource: p(`${Q}.${Q}`, F)\n                }, `Successfully updated ${F}`),\n                type: \"success\"\n            }), l == null || l({\n                channel: `resources/${I.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: (X = T.data) != null && X.id ? [\n                        T.data.id\n                    ] : void 0\n                },\n                date: new Date,\n                meta: {\n                    ...W,\n                    dataProviderName: H\n                }\n            });\n            let j;\n            if (A) {\n                let oe = n.getQueryData(A.queryKey.detail(m));\n                j = Object.keys(E || {}).reduce((ie, Le)=>{\n                    var Y;\n                    return ie[Le] = (Y = oe == null ? void 0 : oe.data) == null ? void 0 : Y[Le], ie;\n                }, {});\n            }\n            let { fields: B, operation: $, variables: V, ...N } = W || {};\n            y == null || y.mutate({\n                action: \"update\",\n                resource: I.name,\n                data: E,\n                previousData: j,\n                meta: {\n                    id: m,\n                    dataProviderName: H,\n                    ...N\n                }\n            });\n        },\n        onError: (T, { id: m, resource: U, errorNotification: b, values: R }, E)=>{\n            let { identifier: C } = s(U);\n            if (E) for (let D of E.previousQueries)n.setQueryData(D[0], D[1]);\n            if (T.message !== \"mutationCancelled\") {\n                d == null || d(T);\n                let D = g.singular(C), A = typeof b == \"function\" ? b(T, {\n                    id: m,\n                    values: R\n                }, C) : b;\n                x(A, {\n                    key: `${m}-${C}-notification`,\n                    message: p(\"notifications.editError\", {\n                        resource: p(`${C}.${C}`, D),\n                        statusCode: T.statusCode\n                    }, `Error when updating ${D} (status code: ${T.statusCode})`),\n                    description: T.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: h().data().mutation(\"update\").get(M),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdate\", M)\n        }\n    }), { elapsedTime: P } = ee({\n        isLoading: w.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...w,\n        overtime: {\n            elapsedTime: P\n        }\n    };\n}, \"useUpdate\");\n\n\nvar Bt = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = J(), { mutate: s } = pe({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = se(), a = Ce(), { resources: i, select: c } = z(), p = G(), u = Be(), { log: d } = Ne(), l = de(), y = q(), { options: { textTransformers: f } } = ne(), { keys: x, preferLegacyKeys: L } = O(), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: h, values: M, meta: w, metaData: P, dataProviderName: T })=>{\n            let { resource: m, identifier: U } = c(h), b = y({\n                resource: m,\n                meta: S(w, P)\n            });\n            return n(_(U, T, i)).create({\n                resource: m.name,\n                variables: M,\n                meta: b,\n                metaData: b\n            });\n        },\n        onSuccess: (h, { resource: M, successNotification: w, dataProviderName: P, invalidates: T = [\n            \"list\",\n            \"many\"\n        ], values: m, meta: U, metaData: b })=>{\n            var K, j;\n            let { resource: R, identifier: E } = c(M), C = f.singular(E), D = _(E, P, i), A = y({\n                resource: R,\n                meta: S(U, b)\n            }), I = typeof w == \"function\" ? w(h, m, E) : w;\n            l(I, {\n                key: `create-${E}-notification`,\n                message: p(\"notifications.createSuccess\", {\n                    resource: p(`${E}.${E}`, C)\n                }, `Successfully created ${C}`),\n                description: p(\"notifications.success\", \"Success\"),\n                type: \"success\"\n            }), a({\n                resource: E,\n                dataProviderName: D,\n                invalidates: T\n            }), u == null || u({\n                channel: `resources/${R.name}`,\n                type: \"created\",\n                payload: {\n                    ids: (K = h == null ? void 0 : h.data) != null && K.id ? [\n                        h.data.id\n                    ] : void 0\n                },\n                date: new Date,\n                meta: {\n                    ...A,\n                    dataProviderName: D\n                }\n            });\n            let { fields: Q, operation: F, variables: H, ...W } = A || {};\n            d == null || d.mutate({\n                action: \"create\",\n                resource: R.name,\n                data: m,\n                meta: {\n                    dataProviderName: D,\n                    id: ((j = h == null ? void 0 : h.data) == null ? void 0 : j.id) ?? void 0,\n                    ...W\n                }\n            });\n        },\n        onError: (h, { resource: M, errorNotification: w, values: P })=>{\n            s(h);\n            let { identifier: T } = c(M), m = f.singular(T), U = typeof w == \"function\" ? w(h, P, T) : w;\n            l(U, {\n                key: `create-${T}-notification`,\n                description: h.message,\n                message: p(\"notifications.createError\", {\n                    resource: p(`${T}.${T}`, m),\n                    statusCode: h.statusCode\n                }, `There was an error creating ${m} (status code: ${h.statusCode})`),\n                type: \"error\"\n            });\n        },\n        mutationKey: x().data().mutation(\"create\").get(L),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCreate\", L)\n        }\n    }), { elapsedTime: g } = ee({\n        isLoading: v.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...v,\n        overtime: {\n            elapsedTime: g\n        }\n    };\n}, \"useCreate\");\n\n\nvar ro = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = J(), { mutate: s } = pe({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = se(), { resources: a, select: i } = z(), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { mutationMode: p, undoableTimeout: u } = ke(), { notificationDispatch: d } = je(), l = G(), y = Be(), { log: f } = Ne(), x = de(), L = Ce(), v = q(), { options: { textTransformers: g } } = ne(), { keys: h, preferLegacyKeys: M } = O(), w = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ id: T, mutationMode: m, undoableTimeout: U, resource: b, onCancel: R, meta: E, metaData: C, dataProviderName: D, values: A })=>{\n            let { resource: I, identifier: Q } = i(b), F = v({\n                resource: I,\n                meta: S(E, C)\n            }), H = m ?? p, W = U ?? u;\n            return H !== \"undoable\" ? n(_(Q, D, a)).deleteOne({\n                resource: I.name,\n                id: T,\n                meta: F,\n                metaData: F,\n                variables: A\n            }) : new Promise((j, B)=>{\n                let $ = o(()=>{\n                    n(_(Q, D, a)).deleteOne({\n                        resource: I.name,\n                        id: T,\n                        meta: F,\n                        metaData: F,\n                        variables: A\n                    }).then((N)=>j(N)).catch((N)=>B(N));\n                }, \"doMutation\"), V = o(()=>{\n                    B({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                R && R(V), d({\n                    type: \"ADD\",\n                    payload: {\n                        id: T,\n                        resource: Q,\n                        cancelMutation: V,\n                        doMutation: $,\n                        seconds: W,\n                        isSilent: !!R\n                    }\n                });\n            });\n        },\n        onMutate: async ({ id: T, resource: m, mutationMode: U, dataProviderName: b, meta: R, metaData: E })=>{\n            let { identifier: C } = i(m), { gqlMutation: D, gqlQuery: A, ...I } = S(R, E) ?? {}, Q = Je(M)(C, _(C, b, a), I), F = h().data(_(C, b, a)).resource(C), H = U ?? p;\n            await c.cancelQueries(F.get(M), void 0, {\n                silent: !0\n            });\n            let W = c.getQueriesData(F.get(M));\n            return H !== \"pessimistic\" && (c.setQueriesData(F.action(\"list\").params(I ?? {}).get(M), (K)=>K ? {\n                    data: K.data.filter((B)=>{\n                        var $;\n                        return (($ = B.id) == null ? void 0 : $.toString()) !== T.toString();\n                    }),\n                    total: K.total - 1\n                } : null), c.setQueriesData(F.action(\"many\").get(M), (K)=>{\n                if (!K) return null;\n                let j = K.data.filter((B)=>{\n                    var $;\n                    return (($ = B.id) == null ? void 0 : $.toString()) !== (T == null ? void 0 : T.toString());\n                });\n                return {\n                    ...K,\n                    data: j\n                };\n            })), {\n                previousQueries: W,\n                queryKey: Q\n            };\n        },\n        onSettled: (T, m, { id: U, resource: b, dataProviderName: R, invalidates: E = [\n            \"list\",\n            \"many\"\n        ] })=>{\n            let { identifier: C } = i(b);\n            L({\n                resource: C,\n                dataProviderName: _(C, R, a),\n                invalidates: E\n            }), d({\n                type: \"REMOVE\",\n                payload: {\n                    id: U,\n                    resource: C\n                }\n            });\n        },\n        onSuccess: (T, { id: m, resource: U, successNotification: b, dataProviderName: R, meta: E, metaData: C }, D)=>{\n            let { resource: A, identifier: I } = i(U), Q = g.singular(I), F = _(I, R, a), H = v({\n                resource: A,\n                meta: S(E, C)\n            });\n            c.removeQueries(D == null ? void 0 : D.queryKey.detail(m));\n            let W = typeof b == \"function\" ? b(T, m, I) : b;\n            x(W, {\n                key: `${m}-${I}-notification`,\n                description: l(\"notifications.success\", \"Success\"),\n                message: l(\"notifications.deleteSuccess\", {\n                    resource: l(`${I}.${I}`, Q)\n                }, `Successfully deleted a ${Q}`),\n                type: \"success\"\n            }), y == null || y({\n                channel: `resources/${A.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: [\n                        m\n                    ]\n                },\n                date: new Date,\n                meta: {\n                    ...H,\n                    dataProviderName: F\n                }\n            });\n            let { fields: K, operation: j, variables: B, ...$ } = H || {};\n            f == null || f.mutate({\n                action: \"delete\",\n                resource: A.name,\n                meta: {\n                    id: m,\n                    dataProviderName: F,\n                    ...$\n                }\n            }), c.removeQueries(D == null ? void 0 : D.queryKey.detail(m));\n        },\n        onError: (T, { id: m, resource: U, errorNotification: b }, R)=>{\n            let { identifier: E } = i(U);\n            if (R) for (let C of R.previousQueries)c.setQueryData(C[0], C[1]);\n            if (T.message !== \"mutationCancelled\") {\n                s(T);\n                let C = g.singular(E), D = typeof b == \"function\" ? b(T, m, E) : b;\n                x(D, {\n                    key: `${m}-${E}-notification`,\n                    message: l(\"notifications.deleteError\", {\n                        resource: C,\n                        statusCode: T.statusCode\n                    }, `Error (status code: ${T.statusCode})`),\n                    description: T.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: h().data().mutation(\"delete\").get(M),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useDelete\", M)\n        }\n    }), { elapsedTime: P } = ee({\n        isLoading: w.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...w,\n        overtime: {\n            elapsedTime: P\n        }\n    };\n}, \"useDelete\");\n\n\nvar oo = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = se(), { resources: s, select: n } = z(), a = G(), i = Be(), c = de(), p = Ce(), { log: u } = Ne(), d = q(), { options: { textTransformers: l } } = ne(), { keys: y, preferLegacyKeys: f } = O(), x = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: v, values: g, meta: h, metaData: M, dataProviderName: w })=>{\n            let { resource: P, identifier: T } = n(v), m = d({\n                resource: P,\n                meta: S(h, M)\n            }), U = r(_(T, w, s));\n            return U.createMany ? U.createMany({\n                resource: P.name,\n                variables: g,\n                meta: m,\n                metaData: m\n            }) : qe(g.map((b)=>U.create({\n                    resource: P.name,\n                    variables: b,\n                    meta: m,\n                    metaData: m\n                })));\n        },\n        onSuccess: (v, { resource: g, successNotification: h, dataProviderName: M, invalidates: w = [\n            \"list\",\n            \"many\"\n        ], values: P, meta: T, metaData: m })=>{\n            let { resource: U, identifier: b } = n(g), R = l.plural(b), E = _(b, M, s), C = d({\n                resource: U,\n                meta: S(T, m)\n            }), D = typeof h == \"function\" ? h(v, P, b) : h;\n            c(D, {\n                key: `createMany-${b}-notification`,\n                message: a(\"notifications.createSuccess\", {\n                    resource: a(`${b}.${b}`, b)\n                }, `Successfully created ${R}`),\n                description: a(\"notifications.success\", \"Success\"),\n                type: \"success\"\n            }), p({\n                resource: b,\n                dataProviderName: E,\n                invalidates: w\n            });\n            let A = v == null ? void 0 : v.data.filter((W)=>(W == null ? void 0 : W.id) !== void 0).map((W)=>W.id);\n            i == null || i({\n                channel: `resources/${U.name}`,\n                type: \"created\",\n                payload: {\n                    ids: A\n                },\n                date: new Date,\n                meta: {\n                    ...C,\n                    dataProviderName: E\n                }\n            });\n            let { fields: I, operation: Q, variables: F, ...H } = C || {};\n            u == null || u.mutate({\n                action: \"createMany\",\n                resource: U.name,\n                data: P,\n                meta: {\n                    dataProviderName: E,\n                    ids: A,\n                    ...H\n                }\n            });\n        },\n        onError: (v, { resource: g, errorNotification: h, values: M })=>{\n            let { identifier: w } = n(g), P = typeof h == \"function\" ? h(v, M, w) : h;\n            c(P, {\n                key: `createMany-${w}-notification`,\n                description: v.message,\n                message: a(\"notifications.createError\", {\n                    resource: a(`${w}.${w}`, w),\n                    statusCode: v.statusCode\n                }, `There was an error creating ${w} (status code: ${v.statusCode}`),\n                type: \"error\"\n            });\n        },\n        mutationKey: y().data().mutation(\"createMany\").get(f),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCreateMany\", f)\n        }\n    }), { elapsedTime: L } = ee({\n        isLoading: x.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...x,\n        overtime: {\n            elapsedTime: L\n        }\n    };\n}, \"useCreateMany\");\n\n\nvar Ga = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let { resources: r, select: s } = z(), n = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), a = se(), i = G(), { mutationMode: c, undoableTimeout: p } = ke(), u = J(), { mutate: d } = pe({\n        v3LegacyAuthProviderCompatible: !!(u != null && u.isLegacy)\n    }), { notificationDispatch: l } = je(), y = Be(), f = de(), x = Ce(), { log: L } = Ne(), v = q(), { options: { textTransformers: g } } = ne(), { keys: h, preferLegacyKeys: M } = O(), w = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ ids: T, values: m, resource: U, onCancel: b, mutationMode: R, undoableTimeout: E, meta: C, metaData: D, dataProviderName: A })=>{\n            let { resource: I, identifier: Q } = s(U), F = v({\n                resource: I,\n                meta: S(C, D)\n            }), H = R ?? c, W = E ?? p, K = a(_(Q, A, r)), j = o(()=>K.updateMany ? K.updateMany({\n                    resource: I.name,\n                    ids: T,\n                    variables: m,\n                    meta: F,\n                    metaData: F\n                }) : qe(T.map(($)=>K.update({\n                        resource: I.name,\n                        id: $,\n                        variables: m,\n                        meta: F,\n                        metaData: F\n                    }))), \"mutationFn\");\n            return H !== \"undoable\" ? j() : new Promise(($, V)=>{\n                let N = o(()=>{\n                    j().then((oe)=>$(oe)).catch((oe)=>V(oe));\n                }, \"doMutation\"), X = o(()=>{\n                    V({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                b && b(X), l({\n                    type: \"ADD\",\n                    payload: {\n                        id: T,\n                        resource: Q,\n                        cancelMutation: X,\n                        doMutation: N,\n                        seconds: W,\n                        isSilent: !!b\n                    }\n                });\n            });\n        },\n        onMutate: async ({ resource: T, ids: m, values: U, mutationMode: b, dataProviderName: R, meta: E, metaData: C, optimisticUpdateMap: D = {\n            list: !0,\n            many: !0,\n            detail: !0\n        } })=>{\n            let { identifier: A } = s(T), { gqlMutation: I, gqlQuery: Q, ...F } = S(E, C) ?? {}, H = Je(M)(A, _(A, R, r), F), W = h().data(_(A, R, r)).resource(A), K = b ?? c;\n            await n.cancelQueries(W.get(M), void 0, {\n                silent: !0\n            });\n            let j = n.getQueriesData(W.get(M));\n            if (K !== \"pessimistic\" && (D.list && n.setQueriesData(W.action(\"list\").params(F ?? {}).get(M), (B)=>{\n                if (typeof D.list == \"function\") return D.list(B, U, m);\n                if (!B) return null;\n                let $ = B.data.map((V)=>V.id !== void 0 && m.filter((N)=>N !== void 0).map(String).includes(V.id.toString()) ? {\n                        ...V,\n                        ...U\n                    } : V);\n                return {\n                    ...B,\n                    data: $\n                };\n            }), D.many && n.setQueriesData(W.action(\"many\").get(M), (B)=>{\n                if (typeof D.many == \"function\") return D.many(B, U, m);\n                if (!B) return null;\n                let $ = B.data.map((V)=>V.id !== void 0 && m.filter((N)=>N !== void 0).map(String).includes(V.id.toString()) ? {\n                        ...V,\n                        ...U\n                    } : V);\n                return {\n                    ...B,\n                    data: $\n                };\n            }), D.detail)) for (let B of m)n.setQueriesData(W.action(\"one\").id(B).params(F ?? {}).get(M), ($)=>{\n                if (typeof D.detail == \"function\") return D.detail($, U, B);\n                if (!$) return null;\n                let V = {\n                    ...$.data,\n                    ...U\n                };\n                return {\n                    ...$,\n                    data: V\n                };\n            });\n            return {\n                previousQueries: j,\n                queryKey: H\n            };\n        },\n        onSettled: (T, m, { ids: U, resource: b, dataProviderName: R })=>{\n            let { identifier: E } = s(b);\n            x({\n                resource: E,\n                invalidates: [\n                    \"list\",\n                    \"many\"\n                ],\n                dataProviderName: _(E, R, r)\n            }), U.forEach((C)=>x({\n                    resource: E,\n                    invalidates: [\n                        \"detail\"\n                    ],\n                    dataProviderName: _(E, R, r),\n                    id: C\n                })), l({\n                type: \"REMOVE\",\n                payload: {\n                    id: U,\n                    resource: E\n                }\n            });\n        },\n        onSuccess: (T, { ids: m, resource: U, meta: b, metaData: R, dataProviderName: E, successNotification: C, values: D }, A)=>{\n            let { resource: I, identifier: Q } = s(U), F = g.singular(Q), H = _(Q, E, r), W = v({\n                resource: I,\n                meta: S(b, R)\n            }), K = typeof C == \"function\" ? C(T, {\n                ids: m,\n                values: D\n            }, Q) : C;\n            f(K, {\n                key: `${m}-${Q}-notification`,\n                description: i(\"notifications.success\", \"Successful\"),\n                message: i(\"notifications.editSuccess\", {\n                    resource: i(`${Q}.${Q}`, Q)\n                }, `Successfully updated ${F}`),\n                type: \"success\"\n            }), y == null || y({\n                channel: `resources/${I.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: m.map(String)\n                },\n                date: new Date,\n                meta: {\n                    ...W,\n                    dataProviderName: H\n                }\n            });\n            let j = [];\n            A && m.forEach((X)=>{\n                let oe = n.getQueryData(A.queryKey.detail(X));\n                j.push(Object.keys(D || {}).reduce((ie, Le)=>{\n                    var Y;\n                    return ie[Le] = (Y = oe == null ? void 0 : oe.data) == null ? void 0 : Y[Le], ie;\n                }, {}));\n            });\n            let { fields: B, operation: $, variables: V, ...N } = W || {};\n            L == null || L.mutate({\n                action: \"updateMany\",\n                resource: I.name,\n                data: D,\n                previousData: j,\n                meta: {\n                    ids: m,\n                    dataProviderName: H,\n                    ...N\n                }\n            });\n        },\n        onError: (T, { ids: m, resource: U, errorNotification: b, values: R }, E)=>{\n            let { identifier: C } = s(U);\n            if (E) for (let D of E.previousQueries)n.setQueryData(D[0], D[1]);\n            if (T.message !== \"mutationCancelled\") {\n                d == null || d(T);\n                let D = g.singular(C), A = typeof b == \"function\" ? b(T, {\n                    ids: m,\n                    values: R\n                }, C) : b;\n                f(A, {\n                    key: `${m}-${C}-updateMany-error-notification`,\n                    message: i(\"notifications.editError\", {\n                        resource: D,\n                        statusCode: T.statusCode\n                    }, `Error when updating ${D} (status code: ${T.statusCode})`),\n                    description: T.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: h().data().mutation(\"updateMany\").get(M),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdateMany\", M)\n        }\n    }), { elapsedTime: P } = ee({\n        isLoading: w.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...w,\n        overtime: {\n            elapsedTime: P\n        }\n    };\n}, \"useUpdateMany\");\n\n\nvar Oa = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = J(), { mutate: s } = pe({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), { mutationMode: n, undoableTimeout: a } = ke(), i = se(), { notificationDispatch: c } = je(), p = G(), u = Be(), d = de(), l = Ce(), { log: y } = Ne(), { resources: f, select: x } = z(), L = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), v = q(), { options: { textTransformers: g } } = ne(), { keys: h, preferLegacyKeys: M } = O(), w = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: T, ids: m, mutationMode: U, undoableTimeout: b, onCancel: R, meta: E, metaData: C, dataProviderName: D, values: A })=>{\n            let { resource: I, identifier: Q } = x(T), F = v({\n                resource: I,\n                meta: S(E, C)\n            }), H = U ?? n, W = b ?? a, K = i(_(Q, D, f)), j = o(()=>K.deleteMany ? K.deleteMany({\n                    resource: I.name,\n                    ids: m,\n                    meta: F,\n                    metaData: F,\n                    variables: A\n                }) : qe(m.map(($)=>K.deleteOne({\n                        resource: I.name,\n                        id: $,\n                        meta: F,\n                        metaData: F,\n                        variables: A\n                    }))), \"mutationFn\");\n            return H !== \"undoable\" ? j() : new Promise(($, V)=>{\n                let N = o(()=>{\n                    j().then((oe)=>$(oe)).catch((oe)=>V(oe));\n                }, \"doMutation\"), X = o(()=>{\n                    V({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                R && R(X), c({\n                    type: \"ADD\",\n                    payload: {\n                        id: m,\n                        resource: Q,\n                        cancelMutation: X,\n                        doMutation: N,\n                        seconds: W,\n                        isSilent: !!R\n                    }\n                });\n            });\n        },\n        onMutate: async ({ ids: T, resource: m, mutationMode: U, dataProviderName: b, meta: R, metaData: E })=>{\n            let { identifier: C } = x(m), { gqlMutation: D, gqlQuery: A, ...I } = S(R, E) ?? {}, Q = Je(M)(C, _(C, b, f), I), F = h().data(_(C, b, f)).resource(C), H = U ?? n;\n            await L.cancelQueries(F.get(M), void 0, {\n                silent: !0\n            });\n            let W = L.getQueriesData(F.get(M));\n            if (H !== \"pessimistic\") {\n                L.setQueriesData(F.action(\"list\").params(I ?? {}).get(M), (K)=>K ? {\n                        data: K.data.filter((B)=>B.id && !T.map(String).includes(B.id.toString())),\n                        total: K.total - 1\n                    } : null), L.setQueriesData(F.action(\"many\").get(M), (K)=>{\n                    if (!K) return null;\n                    let j = K.data.filter((B)=>B.id ? !T.map(String).includes(B.id.toString()) : !1);\n                    return {\n                        ...K,\n                        data: j\n                    };\n                });\n                for (let K of T)L.setQueriesData(F.action(\"one\").id(K).params(I).get(M), (j)=>!j || j.data.id === K ? null : {\n                        ...j\n                    });\n            }\n            return {\n                previousQueries: W,\n                queryKey: Q\n            };\n        },\n        onSettled: (T, m, { resource: U, ids: b, dataProviderName: R, invalidates: E = [\n            \"list\",\n            \"many\"\n        ] })=>{\n            let { identifier: C } = x(U);\n            l({\n                resource: C,\n                dataProviderName: _(C, R, f),\n                invalidates: E\n            }), c({\n                type: \"REMOVE\",\n                payload: {\n                    id: b,\n                    resource: C\n                }\n            });\n        },\n        onSuccess: (T, { ids: m, resource: U, meta: b, metaData: R, dataProviderName: E, successNotification: C }, D)=>{\n            let { resource: A, identifier: I } = x(U), Q = _(I, E, f), F = v({\n                resource: A,\n                meta: S(b, R)\n            });\n            m.forEach(($)=>L.removeQueries(D == null ? void 0 : D.queryKey.detail($)));\n            let H = typeof C == \"function\" ? C(T, m, I) : C;\n            d(H, {\n                key: `${m}-${I}-notification`,\n                description: p(\"notifications.success\", \"Success\"),\n                message: p(\"notifications.deleteSuccess\", {\n                    resource: p(`${I}.${I}`, I)\n                }, `Successfully deleted ${I}`),\n                type: \"success\"\n            }), u == null || u({\n                channel: `resources/${A.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: m\n                },\n                date: new Date,\n                meta: {\n                    ...F,\n                    dataProviderName: Q\n                }\n            });\n            let { fields: W, operation: K, variables: j, ...B } = F || {};\n            y == null || y.mutate({\n                action: \"deleteMany\",\n                resource: A.name,\n                meta: {\n                    ids: m,\n                    dataProviderName: Q,\n                    ...B\n                }\n            }), m.forEach(($)=>L.removeQueries(D == null ? void 0 : D.queryKey.detail($)));\n        },\n        onError: (T, { ids: m, resource: U, errorNotification: b }, R)=>{\n            let { identifier: E } = x(U);\n            if (R) for (let C of R.previousQueries)L.setQueryData(C[0], C[1]);\n            if (T.message !== \"mutationCancelled\") {\n                s(T);\n                let C = g.singular(E), D = typeof b == \"function\" ? b(T, m, E) : b;\n                d(D, {\n                    key: `${m}-${E}-notification`,\n                    message: p(\"notifications.deleteError\", {\n                        resource: C,\n                        statusCode: T.statusCode\n                    }, `Error (status code: ${T.statusCode})`),\n                    description: T.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: h().data().mutation(\"deleteMany\").get(M),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useDeleteMany\", M)\n        }\n    }), { elapsedTime: P } = ee({\n        isLoading: w.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...w,\n        overtime: {\n            elapsedTime: P\n        }\n    };\n}, \"useDeleteMany\");\nvar za = o((e)=>{\n    var n;\n    let t = se(), { resource: r } = z(), { getApiUrl: s } = t(e ?? ((n = S(r == null ? void 0 : r.meta, r == null ? void 0 : r.options)) == null ? void 0 : n.dataProviderName));\n    return s();\n}, \"useApiUrl\");\n\n\nvar Xa = o(({ url: e, method: t, config: r, queryOptions: s, successNotification: n, errorNotification: a, meta: i, metaData: c, dataProviderName: p, overtimeOptions: u })=>{\n    let d = se(), l = J(), { mutate: y } = pe({\n        v3LegacyAuthProviderCompatible: !!(l != null && l.isLegacy)\n    }), f = G(), x = de(), L = q(), { keys: v, preferLegacyKeys: g } = O(), h = S(i, c), { custom: M } = d(p), w = L({\n        meta: h\n    });\n    if (M) {\n        let P = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n            queryKey: v().data(p).mutation(\"custom\").params({\n                method: t,\n                url: e,\n                ...r,\n                ...h || {}\n            }).get(g),\n            queryFn: (m)=>M({\n                    url: e,\n                    method: t,\n                    ...r,\n                    meta: {\n                        ...w,\n                        queryContext: Ae(m)\n                    },\n                    metaData: {\n                        ...w,\n                        queryContext: Ae(m)\n                    }\n                }),\n            ...s,\n            onSuccess: (m)=>{\n                var b;\n                (b = s == null ? void 0 : s.onSuccess) == null || b.call(s, m);\n                let U = typeof n == \"function\" ? n(m, {\n                    ...r,\n                    ...w\n                }) : n;\n                x(U);\n            },\n            onError: (m)=>{\n                var b;\n                y(m), (b = s == null ? void 0 : s.onError) == null || b.call(s, m);\n                let U = typeof a == \"function\" ? a(m, {\n                    ...r,\n                    ...w\n                }) : a;\n                x(U, {\n                    key: `${t}-notification`,\n                    message: f(\"notifications.error\", {\n                        statusCode: m.statusCode\n                    }, `Error (status code: ${m.statusCode})`),\n                    description: m.message,\n                    type: \"error\"\n                });\n            },\n            meta: {\n                ...s == null ? void 0 : s.meta,\n                ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCustom\", g)\n            }\n        }), { elapsedTime: T } = ee({\n            isLoading: P.isFetching,\n            interval: u == null ? void 0 : u.interval,\n            onInterval: u == null ? void 0 : u.onInterval\n        });\n        return {\n            ...P,\n            overtime: {\n                elapsedTime: T\n            }\n        };\n    }\n    throw Error(\"Not implemented custom on data provider.\");\n}, \"useCustom\");\n\n\nvar Ja = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = J(), { mutate: s } = pe({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = de(), a = se(), i = G(), c = q(), { keys: p, preferLegacyKeys: u } = O(), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(({ url: y, method: f, values: x, meta: L, metaData: v, dataProviderName: g, config: h })=>{\n        let M = c({\n            meta: S(L, v)\n        }), { custom: w } = a(g);\n        if (w) return w({\n            url: y,\n            method: f,\n            payload: x,\n            meta: M,\n            metaData: M,\n            headers: {\n                ...h == null ? void 0 : h.headers\n            }\n        });\n        throw Error(\"Not implemented custom on data provider.\");\n    }, {\n        onSuccess: (y, { successNotification: f, config: x, meta: L, metaData: v })=>{\n            let g = typeof f == \"function\" ? f(y, {\n                ...x,\n                ...S(L, v) || {}\n            }) : f;\n            n(g);\n        },\n        onError: (y, { errorNotification: f, method: x, config: L, meta: v, metaData: g })=>{\n            s(y);\n            let h = typeof f == \"function\" ? f(y, {\n                ...L,\n                ...S(v, g) || {}\n            }) : f;\n            n(h, {\n                key: `${x}-notification`,\n                message: i(\"notifications.error\", {\n                    statusCode: y.statusCode\n                }, `Error (status code: ${y.statusCode})`),\n                description: y.message,\n                type: \"error\"\n            });\n        },\n        mutationKey: p().data().mutation(\"customMutation\").get(u),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCustomMutation\", u)\n        }\n    }), { elapsedTime: l } = ee({\n        isLoading: d.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...d,\n        overtime: {\n            elapsedTime: l\n        }\n    };\n}, \"useCustomMutation\");\n\n\nvar bs = {\n    default: {}\n}, Nt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(bs), vs = o(({ children: e, dataProvider: t })=>{\n    let r = bs;\n    return t && (!(\"default\" in t) && (\"getList\" in t || \"getOne\" in t) ? r = {\n        default: t\n    } : r = t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Nt.Provider, {\n        value: r\n    }, e);\n}, \"DataContextProvider\");\nvar se = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Nt);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r)=>{\n        if (r) {\n            let s = e == null ? void 0 : e[r];\n            if (!s) throw new Error(`\"${r}\" Data provider not found`);\n            if (s && !(e != null && e.default)) throw new Error(\"If you have multiple data providers, you must provide default data provider property\");\n            return e[r];\n        }\n        if (e.default) return e.default;\n        throw new Error('There is no \"default\" data provider. Please pass dataProviderName.');\n    }, [\n        e\n    ]);\n}, \"useDataProvider\");\n\n\nvar oi = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: a, queryOptions: i, successNotification: c, errorNotification: p, meta: u, metaData: d, liveMode: l, onLiveEvent: y, liveParams: f, dataProviderName: x, overtimeOptions: L })=>{\n    let { resources: v, resource: g, identifier: h } = z(e), M = se(), w = G(), P = J(), { mutate: T } = pe({\n        v3LegacyAuthProviderCompatible: !!(P != null && P.isLegacy)\n    }), m = de(), U = q(), { keys: b, preferLegacyKeys: R } = O(), E = _(h, x, v), C = S(u, d), D = S(r, t == null ? void 0 : t.filters), A = S(a, t == null ? void 0 : t.sort), I = S(s, t == null ? void 0 : t.hasPagination), Q = kt({\n        pagination: n,\n        configPagination: t == null ? void 0 : t.pagination,\n        hasPagination: I\n    }), F = Q.mode === \"server\", H = {\n        meta: C,\n        metaData: C,\n        filters: D,\n        hasPagination: F,\n        pagination: Q,\n        sorters: A,\n        config: {\n            ...t,\n            sort: A\n        }\n    }, W = (i == null ? void 0 : i.enabled) === void 0 || (i == null ? void 0 : i.enabled) === !0, K = U({\n        resource: g,\n        meta: C\n    }), { getList: j } = M(E);\n    at({\n        resource: h,\n        types: [\n            \"*\"\n        ],\n        params: {\n            meta: K,\n            metaData: K,\n            pagination: Q,\n            hasPagination: F,\n            sort: A,\n            sorters: A,\n            filters: D,\n            subscriptionType: \"useList\",\n            ...f\n        },\n        channel: `resources/${g.name}`,\n        enabled: W,\n        liveMode: l,\n        onLiveEvent: y,\n        dataProviderName: E,\n        meta: {\n            ...K,\n            dataProviderName: x\n        }\n    });\n    let B = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__.useInfiniteQuery)({\n        queryKey: b().data(E).resource(h).action(\"infinite\").params({\n            ...C || {},\n            filters: D,\n            hasPagination: F,\n            ...F && {\n                pagination: Q\n            },\n            ...a && {\n                sorters: a\n            },\n            ...(t == null ? void 0 : t.sort) && {\n                sort: t == null ? void 0 : t.sort\n            }\n        }).get(R),\n        queryFn: (V)=>{\n            let N = {\n                ...Q,\n                current: V.pageParam\n            }, X = {\n                ...K,\n                queryContext: Ae(V)\n            };\n            return j({\n                resource: g.name,\n                pagination: N,\n                hasPagination: F,\n                filters: D,\n                sort: A,\n                sorters: A,\n                meta: X,\n                metaData: X\n            }).then(({ data: oe, total: ie, ...Le })=>({\n                    data: oe,\n                    total: ie,\n                    pagination: N,\n                    ...Le\n                }));\n        },\n        getNextPageParam: (V)=>or(V),\n        getPreviousPageParam: (V)=>sr(V),\n        ...i,\n        onSuccess: (V)=>{\n            var X;\n            (X = i == null ? void 0 : i.onSuccess) == null || X.call(i, V);\n            let N = typeof c == \"function\" ? c(V, H, h) : c;\n            m(N);\n        },\n        onError: (V)=>{\n            var X;\n            T(V), (X = i == null ? void 0 : i.onError) == null || X.call(i, V);\n            let N = typeof p == \"function\" ? p(V, H, h) : p;\n            m(N, {\n                key: `${h}-useInfiniteList-notification`,\n                message: w(\"notifications.error\", {\n                    statusCode: V.statusCode\n                }, `Error (status code: ${V.statusCode})`),\n                description: V.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...i == null ? void 0 : i.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useInfiniteList\", R, g == null ? void 0 : g.name)\n        }\n    }), { elapsedTime: $ } = ee({\n        isLoading: B.isFetching,\n        interval: L == null ? void 0 : L.interval,\n        onInterval: L == null ? void 0 : L.onInterval\n    });\n    return {\n        ...B,\n        overtime: {\n            elapsedTime: $\n        }\n    };\n}, \"useInfiniteList\");\n\n\nvar et = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Ls = o(({ liveProvider: e, children: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(et.Provider, {\n        value: {\n            liveProvider: e\n        }\n    }, t), \"LiveContextProvider\");\n\n\nvar Ce = o(()=>{\n    let { resources: e } = z(), t = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { keys: r, preferLegacyKeys: s } = O();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ resource: a, dataProviderName: i, invalidates: c, id: p, invalidationFilters: u = {\n        type: \"all\",\n        refetchType: \"active\"\n    }, invalidationOptions: d = {\n        cancelRefetch: !1\n    } })=>{\n        if (c === !1) return;\n        let l = _(a, i, e), y = r().data(l).resource(a ?? \"\");\n        await Promise.all(c.map((f)=>{\n            switch(f){\n                case \"all\":\n                    return t.invalidateQueries(r().data(l).get(s), u, d);\n                case \"list\":\n                    return t.invalidateQueries(y.action(\"list\").get(s), u, d);\n                case \"many\":\n                    return t.invalidateQueries(y.action(\"many\").get(s), u, d);\n                case \"resourceAll\":\n                    return t.invalidateQueries(y.get(s), u, d);\n                case \"detail\":\n                    return t.invalidateQueries(y.action(\"one\").id(p || \"\").get(s), u, d);\n                default:\n                    return;\n            }\n        }));\n    }, []);\n}, \"useInvalidate\");\n\n\n\n\n\nvar Us = o((e)=>{\n    let t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(e);\n    return (0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(t.current, e) || (t.current = e), t.current;\n}, \"useMemoized\");\nvar Tr = o((e, t)=>{\n    let r = Us(t);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(e, r);\n}, \"useDeepMemo\");\nvar it = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    resources: []\n}), Ms = o(({ resources: e, children: t })=>{\n    let r = Tr(()=>nr(e ?? []), [\n        e\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(it.Provider, {\n        value: {\n            resources: r\n        }\n    }, t);\n}, \"ResourceContextProvider\");\n\nvar Is = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(\"new\"), Ss = Is.Provider, Z = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Is), \"useRouterType\");\n\n\nvar Fs = {}, tt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(Fs), ks = o(({ children: e, router: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(tt.Provider, {\n        value: t ?? Fs\n    }, e), \"RouterContextProvider\");\n\nvar so = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(tt);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.parse) ?? (()=>()=>({})), [\n        e == null ? void 0 : e.parse\n    ])();\n}, \"useParse\");\nvar ae = o(()=>{\n    let e = so();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e(), [\n        e\n    ]);\n}, \"useParsed\");\nfunction z(e) {\n    let { resources: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(it), r = Z(), s = ae(), n = {\n        resourceName: e && typeof e != \"string\" ? e.resourceName : e,\n        resourceNameOrRouteName: e && typeof e != \"string\" ? e.resourceNameOrRouteName : e,\n        recordItemId: e && typeof e != \"string\" ? e.recordItemId : void 0\n    }, a = o((l, y = !0)=>{\n        let x = ye(l, t, r === \"legacy\");\n        if (x) return {\n            resource: x,\n            identifier: x.identifier ?? x.name\n        };\n        if (y) {\n            let L = {\n                name: l,\n                identifier: l\n            }, v = L.identifier ?? L.name;\n            return {\n                resource: L,\n                identifier: v\n            };\n        }\n    }, \"select\"), i = As(), { useParams: c } = te(), p = c();\n    if (r === \"legacy\") {\n        let l = n.resourceNameOrRouteName ? n.resourceNameOrRouteName : p.resource, y = l ? i(l) : void 0, f = (n == null ? void 0 : n.recordItemId) ?? p.id, x = p.action, L = (n == null ? void 0 : n.resourceName) ?? (y == null ? void 0 : y.name), v = (y == null ? void 0 : y.identifier) ?? (y == null ? void 0 : y.name);\n        return {\n            resources: t,\n            resource: y,\n            resourceName: L,\n            id: f,\n            action: x,\n            select: a,\n            identifier: v\n        };\n    }\n    let u, d = typeof e == \"string\" ? e : n == null ? void 0 : n.resourceNameOrRouteName;\n    if (d) {\n        let l = ye(d, t);\n        l ? u = l : u = {\n            name: d\n        };\n    } else s != null && s.resource && (u = s.resource);\n    return {\n        resources: t,\n        resource: u,\n        resourceName: u == null ? void 0 : u.name,\n        id: s.id,\n        action: s.action,\n        select: a,\n        identifier: (u == null ? void 0 : u.identifier) ?? (u == null ? void 0 : u.name)\n    };\n}\no(z, \"useResource\");\n\nvar As = o(()=>{\n    let { resources: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(it);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r)=>{\n        let s = ye(r, e, !0);\n        return s || {\n            name: r,\n            route: r\n        };\n    }, [\n        e\n    ]);\n}, \"useResourceWithRoute\");\nvar at = o(({ resource: e, params: t, channel: r, types: s, enabled: n = !0, liveMode: a, onLiveEvent: i, dataProviderName: c, meta: p })=>{\n    var g;\n    let { resource: u, identifier: d } = z(e), { liveProvider: l } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(et), { liveMode: y, onLiveEvent: f } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(De), x = a ?? y, L = Ce(), v = c ?? (p == null ? void 0 : p.dataProviderName) ?? ((g = u == null ? void 0 : u.meta) == null ? void 0 : g.dataProviderName);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let h, M = o((w)=>{\n            x === \"auto\" && L({\n                resource: d,\n                dataProviderName: v,\n                invalidates: [\n                    \"resourceAll\"\n                ],\n                invalidationFilters: {\n                    type: \"active\",\n                    refetchType: \"active\"\n                },\n                invalidationOptions: {\n                    cancelRefetch: !1\n                }\n            }), i == null || i(w), f == null || f(w);\n        }, \"callback\");\n        return x && x !== \"off\" && n && (h = l == null ? void 0 : l.subscribe({\n            channel: r,\n            params: {\n                resource: u == null ? void 0 : u.name,\n                ...t\n            },\n            types: s,\n            callback: M,\n            dataProviderName: v,\n            meta: {\n                ...p,\n                dataProviderName: v\n            }\n        })), ()=>{\n            h && (l == null || l.unsubscribe(h));\n        };\n    }, [\n        n\n    ]);\n}, \"useResourceSubscription\");\n\nvar Vs = o((e)=>{\n    let { liveMode: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(De);\n    return e ?? t;\n}, \"useLiveMode\");\n\nvar Tx = o(({ params: e, channel: t, types: r = [\n    \"*\"\n], enabled: s = !0, onLiveEvent: n, dataProviderName: a = \"default\", meta: i })=>{\n    let { liveProvider: c } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(et);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let p;\n        return s && (p = c == null ? void 0 : c.subscribe({\n            channel: t,\n            params: e,\n            types: r,\n            callback: n,\n            dataProviderName: a,\n            meta: {\n                ...i,\n                dataProviderName: a\n            }\n        })), ()=>{\n            p && (c == null || c.unsubscribe(p));\n        };\n    }, [\n        s\n    ]);\n}, \"useSubscription\");\n\nvar Be = o(()=>{\n    let { liveProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(et);\n    return e == null ? void 0 : e.publish;\n}, \"usePublish\");\n\n\n\nvar ao = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    notifications: [],\n    notificationDispatch: ()=>!1\n}), vi = [], Di = o((e, t)=>{\n    switch(t.type){\n        case \"ADD\":\n            return [\n                ...e.filter((s)=>!((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(s.id, t.payload.id) && s.resource === t.payload.resource)),\n                {\n                    ...t.payload,\n                    isRunning: !0\n                }\n            ];\n        case \"REMOVE\":\n            return e.filter((r)=>!((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(r.id, t.payload.id) && r.resource === t.payload.resource));\n        case \"DECREASE_NOTIFICATION_SECOND\":\n            return e.map((r)=>(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(r.id, t.payload.id) && r.resource === t.payload.resource ? {\n                    ...r,\n                    seconds: t.payload.seconds - 1e3\n                } : r);\n        default:\n            return e;\n    }\n}, \"undoableQueueReducer\"), Ns = o(({ children: e })=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(Di, vi), s = {\n        notifications: t,\n        notificationDispatch: r\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ao.Provider, {\n        value: s\n    }, e,  false ? 0 : null);\n}, \"UndoableQueueContextProvider\");\nvar je = o(()=>{\n    let { notifications: e, notificationDispatch: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ao);\n    return {\n        notifications: e,\n        notificationDispatch: t\n    };\n}, \"useCancelNotification\");\n\n\nvar Kt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), Gs = o(({ open: e, close: t, children: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Kt.Provider, {\n        value: {\n            open: e,\n            close: t\n        }\n    }, r), \"NotificationContextProvider\");\nvar we = o(()=>{\n    let { open: e, close: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Kt);\n    return {\n        open: e,\n        close: t\n    };\n}, \"useNotification\");\n\nvar de = o(()=>{\n    let { open: e } = we();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r, s)=>{\n        r !== !1 && (r ? e == null || e(r) : s && (e == null || e(s)));\n    }, []);\n}, \"useHandleNotification\");\n\n\nvar Qe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Ws = o(({ children: e, i18nProvider: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qe.Provider, {\n        value: {\n            i18nProvider: t\n        }\n    }, e), \"I18nContextProvider\");\nvar io = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((t)=>e == null ? void 0 : e.changeLocale(t), []);\n}, \"useSetLocale\");\n\nvar G = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        function r(s, n, a) {\n            return (e == null ? void 0 : e.translate(s, n, a)) ?? a ?? (typeof n == \"string\" && typeof a > \"u\" ? n : s);\n        }\n        return o(r, \"translate\"), r;\n    }, [\n        e\n    ]);\n}, \"useTranslate\");\n\nvar uo = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>e == null ? void 0 : e.getLocale(), []);\n}, \"useGetLocale\");\nvar uP = o(()=>{\n    let e = G(), t = io(), r = uo();\n    return {\n        translate: e,\n        changeLocale: t,\n        getLocale: r\n    };\n}, \"useTranslation\");\n\n\n\nvar RP = o(({ resourceName: e, resource: t, sorter: r, sorters: s, filters: n, maxItemCount: a, pageSize: i = 20, mapData: c = o((L)=>L, \"mapData\"), exportOptions: p, unparseConfig: u, meta: d, metaData: l, dataProviderName: y, onError: f, download: x } = {})=>{\n    let [L, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), g = se(), h = q(), { resource: M, resources: w, identifier: P } = z(S(t, e)), m = `${nt()(P, \"plural\")}-${new Date().toLocaleString()}`, { getList: U } = g(_(P, y, w)), b = h({\n        resource: M,\n        meta: S(d, l)\n    });\n    return {\n        isLoading: L,\n        triggerExport: o(async ()=>{\n            v(!0);\n            let E = [], C = 1, D = !0;\n            for(; D;)try {\n                let { data: F, total: H } = await U({\n                    resource: (M == null ? void 0 : M.name) ?? \"\",\n                    filters: n,\n                    sort: S(s, r),\n                    sorters: S(s, r),\n                    pagination: {\n                        current: C,\n                        pageSize: i,\n                        mode: \"server\"\n                    },\n                    meta: b,\n                    metaData: b\n                });\n                C++, E.push(...F), a && E.length >= a && (E = E.slice(0, a), D = !1), H === E.length && (D = !1);\n            } catch (F) {\n                v(!1), D = !1, f == null || f(F);\n                return;\n            }\n            let A = typeof u < \"u\" && u !== null;\n            warn_once__WEBPACK_IMPORTED_MODULE_1__(A && typeof p < \"u\" && p !== null, `[useExport]: resource: \"${P}\" \n\nBoth \\`unparseConfig\\` and \\`exportOptions\\` are set, \\`unparseConfig\\` will take precedence`);\n            let I = {\n                filename: m,\n                useKeysAsHeaders: !0,\n                useBom: !0,\n                title: \"My Generated Report\",\n                quoteStrings: '\"',\n                ...p\n            };\n            warn_once__WEBPACK_IMPORTED_MODULE_1__((p == null ? void 0 : p.decimalSeparator) !== void 0, `[useExport]: resource: \"${P}\" \n\nUse of \\`decimalSeparator\\` no longer supported, please use \\`mapData\\` instead.\n\nSee https://refine.dev/docs/api-reference/core/hooks/import-export/useExport/`), A ? u = {\n                quotes: !0,\n                ...u\n            } : u = {\n                columns: I.useKeysAsHeaders ? void 0 : I.headers,\n                delimiter: I.fieldSeparator,\n                header: I.showLabels || I.useKeysAsHeaders,\n                quoteChar: I.quoteStrings,\n                quotes: !0\n            };\n            let Q = papaparse__WEBPACK_IMPORTED_MODULE_15__.unparse(E.map(c), u);\n            if (I.showTitle && (Q = `${I.title}\\r\n\n${Q}`),  false && (0)) {\n                let F = I.useTextFile ? \".txt\" : \".csv\", H = `text/${I.useTextFile ? \"plain\" : \"csv\"};charset=utf8;`, W = `${(I.filename ?? \"download\").replace(/ /g, \"_\")}${F}`;\n                Gr(W, `${I != null && I.useBom ? \"\\uFEFF\" : \"\"}${Q}`, H);\n            }\n            return v(!1), Q;\n        }, \"triggerExport\")\n    };\n}, \"useExport\");\n\n\nvar EP = o((e = {})=>{\n    var K, j, B, $, V;\n    let t = q(), r = Ce(), { redirect: s } = Ct(), { mutationMode: n } = ke(), { setWarnWhen: a } = dt(), i = zs(), c = S(e.meta, e.metaData), p = e.mutationMode ?? n, { id: u, setId: d, resource: l, identifier: y, formAction: f } = Ke({\n        resource: e.resource,\n        id: e.id,\n        action: e.action\n    }), [x, L] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), v = f === \"edit\", g = f === \"clone\", h = f === \"create\", M = t({\n        resource: l,\n        meta: c\n    }), w = (v || g) && !!e.resource, P = typeof e.id < \"u\", T = ((K = e.queryOptions) == null ? void 0 : K.enabled) === !1;\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(w && !P && !T, $i(f, y, u));\n    let m = Br({\n        redirectFromProps: e.redirect,\n        action: f,\n        redirectOptions: s\n    }), U = o((N = v ? \"list\" : \"edit\", X = u, oe = {})=>{\n        i({\n            redirect: N,\n            resource: l,\n            id: X,\n            meta: {\n                ...c,\n                ...oe\n            }\n        });\n    }, \"redirect\"), b = Vt({\n        resource: y,\n        id: u,\n        queryOptions: {\n            enabled: !h && u !== void 0,\n            ...e.queryOptions\n        },\n        liveMode: e.liveMode,\n        onLiveEvent: e.onLiveEvent,\n        liveParams: e.liveParams,\n        meta: {\n            ...M,\n            ...e.queryMeta\n        },\n        dataProviderName: e.dataProviderName\n    }), R = Bt({\n        mutationOptions: e.createMutationOptions\n    }), E = to({\n        mutationOptions: e.updateMutationOptions\n    }), C = v ? E : R, A = C.isLoading || b.isFetching, { elapsedTime: I } = ee({\n        isLoading: A,\n        interval: (j = e.overtimeOptions) == null ? void 0 : j.interval,\n        onInterval: (B = e.overtimeOptions) == null ? void 0 : B.onInterval\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>()=>{\n            var N;\n            (N = e.autoSave) != null && N.invalidateOnUnmount && x && y && typeof u < \"u\" && r({\n                id: u,\n                invalidates: e.invalidates || [\n                    \"list\",\n                    \"many\",\n                    \"detail\"\n                ],\n                dataProviderName: e.dataProviderName,\n                resource: y\n            });\n        }, [\n        ($ = e.autoSave) == null ? void 0 : $.invalidateOnUnmount,\n        x\n    ]);\n    let Q = o(async (N, { isAutosave: X = !1 } = {})=>{\n        let oe = p === \"pessimistic\";\n        a(!1);\n        let ie = o((Y)=>U(m, Y), \"onSuccessRedirect\");\n        return new Promise((Y, Pe)=>{\n            if (!l) return Pe(Ki);\n            if (g && !u) return Pe(Gi);\n            if (!N) return Pe(Hi);\n            if (X && !v) return Pe(Wi);\n            !oe && !X && (cr(()=>ie()), Y());\n            let yt = {\n                values: N,\n                resource: y ?? l.name,\n                meta: {\n                    ...M,\n                    ...e.mutationMeta\n                },\n                metaData: {\n                    ...M,\n                    ...e.mutationMeta\n                },\n                dataProviderName: e.dataProviderName,\n                invalidates: X ? [] : e.invalidates,\n                successNotification: X ? !1 : e.successNotification,\n                errorNotification: X ? !1 : e.errorNotification,\n                ...v ? {\n                    id: u ?? \"\",\n                    mutationMode: p,\n                    undoableTimeout: e.undoableTimeout,\n                    optimisticUpdateMap: e.optimisticUpdateMap\n                } : {}\n            }, { mutateAsync: gt } = v ? E : R;\n            gt(yt, {\n                onSuccess: e.onMutationSuccess ? (Se, Ze, ut)=>{\n                    var st;\n                    (st = e.onMutationSuccess) == null || st.call(e, Se, N, ut, X);\n                } : void 0,\n                onError: e.onMutationError ? (Se, Ze, ut)=>{\n                    var st;\n                    (st = e.onMutationError) == null || st.call(e, Se, N, ut, X);\n                } : void 0\n            }).then((Se)=>{\n                oe && !X && cr(()=>{\n                    var Ze;\n                    return ie((Ze = Se == null ? void 0 : Se.data) == null ? void 0 : Ze.id);\n                }), X && L(!0), Y(Se);\n            }).catch(Pe);\n        });\n    }, \"onFinish\"), F = Hr((N)=>Q(N, {\n            isAutosave: !0\n        }), ((V = e.autoSave) == null ? void 0 : V.debounce) || 1e3, \"Cancelled by debounce\"), H = {\n        elapsedTime: I\n    }, W = {\n        status: E.status,\n        data: E.data,\n        error: E.error\n    };\n    return {\n        onFinish: Q,\n        onFinishAutoSave: F,\n        formLoading: A,\n        mutationResult: C,\n        queryResult: b,\n        autoSaveProps: W,\n        id: u,\n        setId: d,\n        redirect: U,\n        overtime: H\n    };\n}, \"useForm\"), Ki = new Error(\"[useForm]: `resource` is not defined or not matched but is required\"), Gi = new Error(\"[useForm]: `id` is not defined but is required in edit and clone actions\"), Hi = new Error(\"[useForm]: `values` is not provided but is required\"), Wi = new Error(\"[useForm]: `autoSave` is only allowed in edit action\"), $i = o((e, t, r)=>`[useForm]: action: \"${e}\", resource: \"${t}\", id: ${r}\n\nIf you don't use the \\`setId\\` method to set the \\`id\\`, you should pass the \\`id\\` prop to \\`useForm\\`. Otherwise, \\`useForm\\` will not be able to infer the \\`id\\` from the current URL with custom resource provided.\n\nSee https://refine.dev/docs/data/hooks/use-form/#id-`, \"idWarningMessage\");\n\nvar zs = o(()=>{\n    let { show: e, edit: t, list: r, create: s } = ce();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ redirect: a, resource: i, id: c, meta: p = {} })=>{\n        if (a && i) return i.show && a === \"show\" && c ? e(i, c, void 0, p) : i.edit && a === \"edit\" && c ? t(i, c, void 0, p) : i.create && a === \"create\" ? s(i, void 0, p) : r(i, \"push\", p);\n    }, []);\n}, \"useRedirectionAfterSubmission\");\n\nvar co = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(tt);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.back) ?? (()=>()=>{}), [\n        e == null ? void 0 : e.back\n    ])();\n}, \"useBack\");\n\n\nvar lt = o(()=>{\n    let e = Z(), { resource: t, resources: r } = z(), s = ae();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(({ resource: a, action: i, meta: c })=>{\n        var y;\n        let p = a || t;\n        if (!p) return;\n        let d = (y = Re(p, r, e === \"legacy\").find((f)=>f.action === i)) == null ? void 0 : y.route;\n        return d ? Me(d, p == null ? void 0 : p.meta, s, c) : void 0;\n    }, [\n        r,\n        t,\n        s\n    ]);\n}, \"useGetToPath\");\nvar ge = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(tt), { select: t } = z(), r = lt(), n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.go) ?? (()=>()=>{}), [\n        e == null ? void 0 : e.go\n    ])();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        if (typeof i.to != \"object\") return n({\n            ...i,\n            to: i.to\n        });\n        let { resource: c } = t(i.to.resource);\n        Ji(i.to, c);\n        let p = r({\n            resource: c,\n            action: i.to.action,\n            meta: {\n                id: i.to.id,\n                ...i.to.meta\n            }\n        });\n        return n({\n            ...i,\n            to: p\n        });\n    }, [\n        t,\n        n\n    ]);\n}, \"useGo\"), Ji = o((e, t)=>{\n    if (!(e != null && e.action) || !(e != null && e.resource)) throw new Error('[useGo]: \"action\" or \"resource\" is required.');\n    if ([\n        \"edit\",\n        \"show\",\n        \"clone\"\n    ].includes(e == null ? void 0 : e.action) && !e.id) throw new Error(`[useGo]: [action: ${e.action}] requires an \"id\" for resource [resource: ${e.resource}]`);\n    if (!t[e.action]) throw new Error(`[useGo]: [action: ${e.action}] is not defined for [resource: ${e.resource}]`);\n}, \"handleResourceErrors\");\nvar ce = o(()=>{\n    let { resources: e } = z(), t = Z(), { useHistory: r } = te(), s = r(), n = ae(), a = ge(), i = co(), c = o((P, T = \"push\")=>{\n        t === \"legacy\" ? s[T](P) : a({\n            to: P,\n            type: T\n        });\n    }, \"handleUrl\"), p = o((P, T = {})=>{\n        var b;\n        if (t === \"legacy\") {\n            let R = typeof P == \"string\" ? ye(P, e, !0) ?? {\n                name: P,\n                route: P\n            } : P, E = Re(R, e, !0).find((C)=>C.action === \"create\");\n            return E ? Me(E.route, R == null ? void 0 : R.meta, n, T) : \"\";\n        }\n        let m = typeof P == \"string\" ? ye(P, e) ?? {\n            name: P\n        } : P, U = (b = Re(m, e).find((R)=>R.action === \"create\")) == null ? void 0 : b.route;\n        return U ? a({\n            to: Me(U, m == null ? void 0 : m.meta, n, T),\n            type: \"path\"\n        }) : \"\";\n    }, \"createUrl\"), u = o((P, T, m = {})=>{\n        var E;\n        let U = encodeURIComponent(T);\n        if (t === \"legacy\") {\n            let C = typeof P == \"string\" ? ye(P, e, !0) ?? {\n                name: P,\n                route: P\n            } : P, D = Re(C, e, !0).find((A)=>A.action === \"edit\");\n            return D ? Me(D.route, C == null ? void 0 : C.meta, n, {\n                ...m,\n                id: U\n            }) : \"\";\n        }\n        let b = typeof P == \"string\" ? ye(P, e) ?? {\n            name: P\n        } : P, R = (E = Re(b, e).find((C)=>C.action === \"edit\")) == null ? void 0 : E.route;\n        return R ? a({\n            to: Me(R, b == null ? void 0 : b.meta, n, {\n                ...m,\n                id: U\n            }),\n            type: \"path\"\n        }) : \"\";\n    }, \"editUrl\"), d = o((P, T, m = {})=>{\n        var E;\n        let U = encodeURIComponent(T);\n        if (t === \"legacy\") {\n            let C = typeof P == \"string\" ? ye(P, e, !0) ?? {\n                name: P,\n                route: P\n            } : P, D = Re(C, e, !0).find((A)=>A.action === \"clone\");\n            return D ? Me(D.route, C == null ? void 0 : C.meta, n, {\n                ...m,\n                id: U\n            }) : \"\";\n        }\n        let b = typeof P == \"string\" ? ye(P, e) ?? {\n            name: P\n        } : P, R = (E = Re(b, e).find((C)=>C.action === \"clone\")) == null ? void 0 : E.route;\n        return R ? a({\n            to: Me(R, b == null ? void 0 : b.meta, n, {\n                ...m,\n                id: U\n            }),\n            type: \"path\"\n        }) : \"\";\n    }, \"cloneUrl\"), l = o((P, T, m = {})=>{\n        var E;\n        let U = encodeURIComponent(T);\n        if (t === \"legacy\") {\n            let C = typeof P == \"string\" ? ye(P, e, !0) ?? {\n                name: P,\n                route: P\n            } : P, D = Re(C, e, !0).find((A)=>A.action === \"show\");\n            return D ? Me(D.route, C == null ? void 0 : C.meta, n, {\n                ...m,\n                id: U\n            }) : \"\";\n        }\n        let b = typeof P == \"string\" ? ye(P, e) ?? {\n            name: P\n        } : P, R = (E = Re(b, e).find((C)=>C.action === \"show\")) == null ? void 0 : E.route;\n        return R ? a({\n            to: Me(R, b == null ? void 0 : b.meta, n, {\n                ...m,\n                id: U\n            }),\n            type: \"path\"\n        }) : \"\";\n    }, \"showUrl\"), y = o((P, T = {})=>{\n        var b;\n        if (t === \"legacy\") {\n            let R = typeof P == \"string\" ? ye(P, e, !0) ?? {\n                name: P,\n                route: P\n            } : P, E = Re(R, e, !0).find((C)=>C.action === \"list\");\n            return E ? Me(E.route, R == null ? void 0 : R.meta, n, T) : \"\";\n        }\n        let m = typeof P == \"string\" ? ye(P, e) ?? {\n            name: P\n        } : P, U = (b = Re(m, e).find((R)=>R.action === \"list\")) == null ? void 0 : b.route;\n        return U ? a({\n            to: Me(U, m == null ? void 0 : m.meta, n, T),\n            type: \"path\"\n        }) : \"\";\n    }, \"listUrl\");\n    return {\n        create: o((P, T = \"push\", m = {})=>{\n            c(p(P, m), T);\n        }, \"create\"),\n        createUrl: p,\n        edit: o((P, T, m = \"push\", U = {})=>{\n            c(u(P, T, U), m);\n        }, \"edit\"),\n        editUrl: u,\n        clone: o((P, T, m = \"push\", U = {})=>{\n            c(d(P, T, U), m);\n        }, \"clone\"),\n        cloneUrl: d,\n        show: o((P, T, m = \"push\", U = {})=>{\n            c(l(P, T, U), m);\n        }, \"show\"),\n        showUrl: l,\n        list: o((P, T = \"push\", m = {})=>{\n            c(y(P, m), T);\n        }, \"list\"),\n        listUrl: y,\n        push: o((P, ...T)=>{\n            t === \"legacy\" ? s.push(P, ...T) : a({\n                to: P,\n                type: \"push\"\n            });\n        }, \"push\"),\n        replace: o((P, ...T)=>{\n            t === \"legacy\" ? s.replace(P, ...T) : a({\n                to: P,\n                type: \"replace\"\n            });\n        }, \"replace\"),\n        goBack: o(()=>{\n            t === \"legacy\" ? s.goBack() : i();\n        }, \"goBack\")\n    };\n}, \"useNavigation\");\n\nvar lh = o(({ resource: e, id: t, meta: r, metaData: s, queryOptions: n, overtimeOptions: a, ...i } = {})=>{\n    let { resource: c, identifier: p, id: u, setId: d } = Ke({\n        id: t,\n        resource: e\n    }), y = q()({\n        resource: c,\n        meta: S(r, s)\n    });\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(!!e && !u, eu(p, u));\n    let f = Vt({\n        resource: p,\n        id: u ?? \"\",\n        queryOptions: {\n            enabled: u !== void 0,\n            ...n\n        },\n        meta: y,\n        metaData: y,\n        ...i\n    }), { elapsedTime: x } = ee({\n        isLoading: f.isFetching,\n        interval: a == null ? void 0 : a.interval,\n        onInterval: a == null ? void 0 : a.onInterval\n    });\n    return {\n        queryResult: f,\n        showId: u,\n        setShowId: d,\n        overtime: {\n            elapsedTime: x\n        }\n    };\n}, \"useShow\"), eu = o((e, t)=>`[useShow]: resource: \"${e}\", id: ${t} \n\nIf you don't use the \\`setShowId\\` method to set the \\`showId\\`, you should pass the \\`id\\` prop to \\`useShow\\`. Otherwise, \\`useShow\\` will not be able to infer the \\`id\\` from the current URL. \n\nSee https://refine.dev/docs/data/hooks/use-show/#resource`, \"idWarningMessage\");\n\n\n\nvar hh = o(({ resourceName: e, resource: t, mapData: r = o((d)=>d, \"mapData\"), paparseOptions: s, batchSize: n = Number.MAX_SAFE_INTEGER, onFinish: a, meta: i, metaData: c, onProgress: p, dataProviderName: u } = {})=>{\n    let [d, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [y, f] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [x, L] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), { resource: v, identifier: g } = z(t ?? e), h = q(), M = oo(), w = Bt(), P = h({\n        resource: v,\n        meta: S(i, c)\n    }), T;\n    n === 1 ? T = w : T = M;\n    let m = o(()=>{\n        f(0), l(0), L(!1);\n    }, \"handleCleanup\"), U = o((R)=>{\n        let E = {\n            succeeded: R.filter((C)=>C.type === \"success\"),\n            errored: R.filter((C)=>C.type === \"error\")\n        };\n        a == null || a(E), L(!1);\n    }, \"handleFinish\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        p == null || p({\n            totalAmount: y,\n            processedAmount: d\n        });\n    }, [\n        y,\n        d\n    ]);\n    let b = o(({ file: R })=>(m(), new Promise((E)=>{\n            L(!0), papaparse__WEBPACK_IMPORTED_MODULE_15__.parse(R, {\n                complete: async ({ data: C })=>{\n                    let D = $t(C, r);\n                    if (f(D.length), n === 1) {\n                        let A = D.map((Q)=>o(async ()=>({\n                                    response: await w.mutateAsync({\n                                        resource: g ?? \"\",\n                                        values: Q,\n                                        successNotification: !1,\n                                        errorNotification: !1,\n                                        dataProviderName: u,\n                                        meta: P,\n                                        metaData: P\n                                    }),\n                                    value: Q\n                                }), \"fn\")), I = await rr(A, ({ response: Q, value: F })=>(l((H)=>H + 1), {\n                                response: [\n                                    Q.data\n                                ],\n                                type: \"success\",\n                                request: [\n                                    F\n                                ]\n                            }), (Q, F)=>({\n                                response: [\n                                    Q\n                                ],\n                                type: \"error\",\n                                request: [\n                                    D[F]\n                                ]\n                            }));\n                        E(I);\n                    } else {\n                        let A = (0,lodash_es_chunk_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(D, n), I = A.map((F)=>o(async ()=>({\n                                    response: await M.mutateAsync({\n                                        resource: g ?? \"\",\n                                        values: F,\n                                        successNotification: !1,\n                                        errorNotification: !1,\n                                        dataProviderName: u,\n                                        meta: P,\n                                        metaData: P\n                                    }),\n                                    value: F,\n                                    currentBatchLength: F.length\n                                }), \"fn\")), Q = await rr(I, ({ response: F, currentBatchLength: H, value: W })=>(l((K)=>K + H), {\n                                response: F.data,\n                                type: \"success\",\n                                request: W\n                            }), (F, H)=>({\n                                response: [\n                                    F\n                                ],\n                                type: \"error\",\n                                request: A[H]\n                            }));\n                        E(Q);\n                    }\n                },\n                ...s\n            });\n        }).then((E)=>(U(E), E))), \"handleChange\");\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (R)=>{\n                R.target.files && R.target.files.length > 0 && b({\n                    file: R.target.files[0]\n                });\n            }\n        },\n        mutationResult: T,\n        isLoading: x,\n        handleChange: b\n    };\n}, \"useImport\");\n\nvar vh = o(({ defaultVisible: e = !1 } = {})=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>r(!0), [\n        t\n    ]), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>r(!1), [\n        t\n    ]);\n    return {\n        visible: t,\n        show: s,\n        close: n\n    };\n}, \"useModal\");\nvar nu = o(({ resource: e, action: t, meta: r, legacy: s })=>lt()({\n        resource: e,\n        action: t,\n        meta: r,\n        legacy: s\n    }), \"useToPath\");\n\nvar rt = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(tt);\n    return e != null && e.Link ? e.Link : o(({ to: r, ...s })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n            href: r,\n            ...s\n        }), \"FallbackLink\");\n}, \"useLink\");\n\n\nvar ot = {\n    useHistory: ()=>!1,\n    useLocation: ()=>!1,\n    useParams: ()=>({}),\n    Prompt: ()=>null,\n    Link: ()=>null\n}, Gt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(ot), Xs = o(({ children: e, useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: a, routes: i })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Gt.Provider, {\n        value: {\n            useHistory: t ?? ot.useHistory,\n            useLocation: r ?? ot.useLocation,\n            useParams: s ?? ot.useParams,\n            Prompt: n ?? ot.Prompt,\n            Link: a ?? ot.Link,\n            routes: i ?? ot.routes\n        }\n    }, e), \"LegacyRouterContextProvider\");\nvar te = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Gt), { useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: a, routes: i } = e ?? ot;\n    return {\n        useHistory: t,\n        useLocation: r,\n        useParams: s,\n        Prompt: n,\n        Link: a,\n        routes: i\n    };\n}, \"useRouterContext\");\n\n\n\n\nvar Xe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    options: {\n        buttons: {\n            enableAccessControl: !0,\n            hideIfUnauthorized: !1\n        }\n    }\n}), Ys = o(({ can: e, children: t, options: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xe.Provider, {\n        value: {\n            can: e,\n            options: r ? {\n                ...r,\n                buttons: {\n                    enableAccessControl: !0,\n                    hideIfUnauthorized: !1,\n                    ...r.buttons\n                }\n            } : {\n                buttons: {\n                    enableAccessControl: !0,\n                    hideIfUnauthorized: !1\n                },\n                queryOptions: void 0\n            }\n        }\n    }, t), \"AccessControlContextProvider\");\nvar bt = o((e)=>{\n    if (!e) return;\n    let { icon: t, list: r, edit: s, create: n, show: a, clone: i, children: c, meta: p, options: u, ...d } = e, { icon: l, ...y } = p ?? {}, { icon: f, ...x } = u ?? {};\n    return {\n        ...d,\n        ...p ? {\n            meta: y\n        } : {},\n        ...u ? {\n            options: x\n        } : {}\n    };\n}, \"sanitizeResource\");\nvar xr = o(({ action: e, resource: t, params: r, queryOptions: s })=>{\n    let { can: n, options: a } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe), { keys: i, preferLegacyKeys: c } = O(), { queryOptions: p } = a || {}, u = {\n        ...p,\n        ...s\n    }, { resource: d, ...l } = r ?? {}, y = bt(d), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: i().access().resource(t).action(e).params({\n            params: {\n                ...l,\n                resource: y\n            },\n            enabled: u == null ? void 0 : u.enabled\n        }).get(c),\n        queryFn: ()=>(n == null ? void 0 : n({\n                action: e,\n                resource: t,\n                params: {\n                    ...l,\n                    resource: y\n                }\n            })) ?? Promise.resolve({\n                can: !0\n            }),\n        enabled: typeof n < \"u\",\n        ...u,\n        meta: {\n            ...u == null ? void 0 : u.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCan\", c, t, [\n                \"useButtonCanAccess\",\n                \"useNavigationButton\"\n            ])\n        },\n        retry: !1\n    });\n    return typeof n > \"u\" ? {\n        data: {\n            can: !0\n        }\n    } : f;\n}, \"useCan\");\n\nvar dR = o(()=>{\n    let { can: e } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Xe);\n    return {\n        can: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e ? o(async ({ params: s, ...n })=>{\n                let a = s != null && s.resource ? bt(s.resource) : void 0;\n                return e({\n                    ...n,\n                    ...s ? {\n                        params: {\n                            ...s,\n                            resource: a\n                        }\n                    } : {}\n                });\n            }, \"canWithSanitizedResource\") : void 0, [\n            e\n        ])\n    };\n}, \"useCanWithoutCache\");\n\n\n\n\nvar CR = o((e)=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [s, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [a, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), { resource: c, sort: p, sorters: u, filters: d = [], optionLabel: l = \"title\", optionValue: y = \"id\", searchField: f = typeof l == \"string\" ? l : \"title\", debounce: x = 300, successNotification: L, errorNotification: v, defaultValueQueryOptions: g, queryOptions: h, fetchSize: M, pagination: w, hasPagination: P = !1, liveMode: T, defaultValue: m = [], onLiveEvent: U, onSearch: b, liveParams: R, meta: E, metaData: C, dataProviderName: D, overtimeOptions: A } = e, I = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Y)=>typeof l == \"string\" ? (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(Y, l) : l(Y), [\n        l\n    ]), Q = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Y)=>typeof y == \"string\" ? (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(Y, y) : y(Y), [\n        y\n    ]), { resource: F, identifier: H } = z(c), K = q()({\n        resource: F,\n        meta: S(E, C)\n    }), j = Array.isArray(m) ? m : [\n        m\n    ], B = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Y)=>{\n        i(Y.data.map((Pe)=>({\n                label: I(Pe),\n                value: Q(Pe)\n            })));\n    }, [\n        l,\n        y\n    ]), $ = g ?? h, V = eo({\n        resource: H,\n        ids: j,\n        queryOptions: {\n            ...$,\n            enabled: j.length > 0 && (($ == null ? void 0 : $.enabled) ?? !0),\n            onSuccess: (Y)=>{\n                var Pe;\n                B(Y), (Pe = $ == null ? void 0 : $.onSuccess) == null || Pe.call($, Y);\n            }\n        },\n        meta: K,\n        metaData: K,\n        liveMode: \"off\",\n        dataProviderName: D\n    }), N = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Y)=>{\n        n(Y.data.map((Pe)=>({\n                label: I(Pe),\n                value: Q(Pe)\n            })));\n    }, [\n        l,\n        y\n    ]), X = Qt({\n        resource: H,\n        sorters: S(u, p),\n        filters: d.concat(t),\n        pagination: {\n            current: w == null ? void 0 : w.current,\n            pageSize: (w == null ? void 0 : w.pageSize) ?? M,\n            mode: w == null ? void 0 : w.mode\n        },\n        hasPagination: P,\n        queryOptions: {\n            ...h,\n            onSuccess: (Y)=>{\n                var Pe;\n                N(Y), (Pe = h == null ? void 0 : h.onSuccess) == null || Pe.call(h, Y);\n            }\n        },\n        successNotification: L,\n        errorNotification: v,\n        meta: K,\n        metaData: K,\n        liveMode: T,\n        liveParams: R,\n        onLiveEvent: U,\n        dataProviderName: D\n    }), oe = o((Y)=>{\n        if (b) {\n            r(b(Y));\n            return;\n        }\n        if (!Y) {\n            r([]);\n            return;\n        }\n        r([\n            {\n                field: f,\n                operator: \"contains\",\n                value: Y\n            }\n        ]);\n    }, \"onSearch\"), { elapsedTime: ie } = ee({\n        isLoading: X.isFetching || V.isFetching,\n        interval: A == null ? void 0 : A.interval,\n        onInterval: A == null ? void 0 : A.onInterval\n    }), Le = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,lodash_es_uniqBy_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"])([\n            ...s,\n            ...a\n        ], \"value\"), [\n        s,\n        a\n    ]);\n    return {\n        queryResult: X,\n        defaultValueQueryResult: V,\n        options: Le,\n        onSearch: (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(oe, x),\n        overtime: {\n            elapsedTime: ie\n        }\n    };\n}, \"useSelect\");\n\n\n\n\n\nvar rn = [], on = [];\nfunction kR({ initialCurrent: e, initialPageSize: t, hasPagination: r = !0, pagination: s, initialSorter: n, permanentSorter: a = on, defaultSetFilterBehavior: i, initialFilter: c, permanentFilter: p = rn, filters: u, sorters: d, syncWithLocation: l, resource: y, successNotification: f, errorNotification: x, queryOptions: L, liveMode: v, onLiveEvent: g, liveParams: h, meta: M, metaData: w, dataProviderName: P, overtimeOptions: T } = {}) {\n    var vo, Do, Lo, Uo, Eo;\n    let { syncWithLocation: m } = Kr(), U = l ?? m, b = Vs(v), R = Z(), { useLocation: E } = te(), { search: C, pathname: D } = E(), A = q(), I = ae(), Q = ((u == null ? void 0 : u.mode) || \"server\") === \"server\", F = ((d == null ? void 0 : d.mode) || \"server\") === \"server\", H = r === !1 ? \"off\" : \"server\", W = ((s == null ? void 0 : s.mode) ?? H) !== \"off\", K = S(s == null ? void 0 : s.current, e), j = S(s == null ? void 0 : s.pageSize, t), B = S(M, w), { parsedCurrent: $, parsedPageSize: V, parsedSorter: N, parsedFilters: X } = pr(C ?? \"?\"), oe = S(u == null ? void 0 : u.initial, c), ie = S(u == null ? void 0 : u.permanent, p) ?? rn, Le = S(d == null ? void 0 : d.initial, n), Y = S(d == null ? void 0 : d.permanent, a) ?? on, Pe = S(u == null ? void 0 : u.defaultBehavior, i) ?? \"merge\", yt, gt, Se, Ze;\n    U ? (yt = ((vo = I == null ? void 0 : I.params) == null ? void 0 : vo.current) || $ || K || 1, gt = ((Do = I == null ? void 0 : I.params) == null ? void 0 : Do.pageSize) || V || j || 10, Se = ((Lo = I == null ? void 0 : I.params) == null ? void 0 : Lo.sorters) || (N.length ? N : Le), Ze = ((Uo = I == null ? void 0 : I.params) == null ? void 0 : Uo.filters) || (X.length ? X : oe)) : (yt = K || 1, gt = j || 10, Se = Le, Ze = oe);\n    let { replace: ut } = ce(), st = ge(), { resource: Fn, identifier: Mr } = z(y), xo = A({\n        resource: Fn,\n        meta: B\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        warn_once__WEBPACK_IMPORTED_MODULE_1__(typeof Mr > \"u\", \"useTable: `resource` is not defined.\");\n    }, [\n        Mr\n    ]);\n    let [ct, Po] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(fr(Y, Se ?? [])), [Et, Wt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(mr(ie, Ze ?? [])), [Mt, ho] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(yt), [pt, Ro] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(gt), Co = o(()=>{\n        if (R === \"new\") {\n            let { sorters: Mo, filters: dc, pageSize: lc, current: mc, ...Kn } = (I == null ? void 0 : I.params) ?? {};\n            return Kn;\n        }\n        let { sorter: he, filters: We, pageSize: Ir, current: Sr, ...Fr } = qs__WEBPACK_IMPORTED_MODULE_6__.parse(C, {\n            ignoreQueryPrefix: !0\n        });\n        return Fr;\n    }, \"getCurrentQueryParams\"), kn = o(({ pagination: { current: he, pageSize: We }, sorter: Ir, filters: Sr })=>{\n        if (R === \"new\") return st({\n            type: \"path\",\n            options: {\n                keepHash: !0,\n                keepQuery: !0\n            },\n            query: {\n                ...W ? {\n                    current: he,\n                    pageSize: We\n                } : {},\n                sorters: Ir,\n                filters: Sr,\n                ...Co()\n            }\n        }) ?? \"\";\n        let Fr = qs__WEBPACK_IMPORTED_MODULE_6__.parse(C == null ? void 0 : C.substring(1)), Mo = dr({\n            pagination: {\n                pageSize: We,\n                current: he\n            },\n            sorters: ct ?? Ir,\n            filters: Sr,\n            ...Fr\n        });\n        return `${D ?? \"\"}?${Mo ?? \"\"}`;\n    }, \"createLinkForSyncWithLocation\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        C === \"\" && (ho(yt), Ro(gt), Po(fr(Y, Se ?? [])), Wt(mr(ie, Ze ?? [])));\n    }, [\n        C\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (U) {\n            let he = Co();\n            if (R === \"new\") st({\n                type: \"replace\",\n                options: {\n                    keepQuery: !0\n                },\n                query: {\n                    ...W ? {\n                        pageSize: pt,\n                        current: Mt\n                    } : {},\n                    sorters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ct, Y, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    filters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(Et, ie, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])\n                }\n            });\n            else {\n                let We = dr({\n                    ...W ? {\n                        pagination: {\n                            pageSize: pt,\n                            current: Mt\n                        }\n                    } : {},\n                    sorters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ct, Y, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    filters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(Et, ie, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    ...he\n                });\n                return ut == null ? void 0 : ut(`${D}?${We}`, void 0, {\n                    shallow: !0\n                });\n            }\n        }\n    }, [\n        U,\n        Mt,\n        pt,\n        ct,\n        Et\n    ]);\n    let wr = Qt({\n        resource: Mr,\n        hasPagination: r,\n        pagination: {\n            current: Mt,\n            pageSize: pt,\n            mode: s == null ? void 0 : s.mode\n        },\n        filters: Q ? ht(ie, Et) : void 0,\n        sorters: F ? lr(Y, ct) : void 0,\n        queryOptions: L,\n        successNotification: f,\n        errorNotification: x,\n        meta: xo,\n        metaData: xo,\n        liveMode: b,\n        liveParams: h,\n        onLiveEvent: g,\n        dataProviderName: P\n    }), An = o((he)=>{\n        Wt((We)=>ht(ie, he, We));\n    }, \"setFiltersAsMerge\"), Qn = o((he)=>{\n        Wt(ht(ie, he));\n    }, \"setFiltersAsReplace\"), Vn = o((he)=>{\n        Wt((We)=>ht(ie, he(We)));\n    }, \"setFiltersWithSetter\"), Bn = o((he, We = Pe)=>{\n        typeof he == \"function\" ? Vn(he) : We === \"replace\" ? Qn(he) : An(he);\n    }, \"setFiltersFn\"), bo = o((he)=>{\n        Po(()=>lr(Y, he));\n    }, \"setSortWithUnion\"), { elapsedTime: Nn } = ee({\n        isLoading: wr.isFetching,\n        interval: T == null ? void 0 : T.interval,\n        onInterval: T == null ? void 0 : T.onInterval\n    });\n    return {\n        tableQueryResult: wr,\n        sorters: ct,\n        setSorters: bo,\n        sorter: ct,\n        setSorter: bo,\n        filters: Et,\n        setFilters: Bn,\n        current: Mt,\n        setCurrent: ho,\n        pageSize: pt,\n        setPageSize: Ro,\n        pageCount: pt ? Math.ceil((((Eo = wr.data) == null ? void 0 : Eo.total) ?? 0) / pt) : 1,\n        createLinkForSyncWithLocation: kn,\n        overtime: {\n            elapsedTime: Nn\n        }\n    };\n}\no(kR, \"useTable\");\n\n\n\n\nvar mt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), nn = o(({ create: e, get: t, update: r, children: s })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(mt.Provider, {\n        value: {\n            create: e,\n            get: t,\n            update: r\n        }\n    }, s), \"AuditLogContextProvider\");\nvar Ne = o(({ logMutationOptions: e, renameMutationOptions: t } = {})=>{\n    let r = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), { keys: n, preferLegacyKeys: a } = O(), i = J(), { resources: c } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(it), { data: p, refetch: u, isLoading: d } = $r({\n        v3LegacyAuthProviderCompatible: !!(i != null && i.isLegacy),\n        queryOptions: {\n            enabled: !!(s != null && s.create)\n        }\n    }), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(async (f)=>{\n        var g, h, M, w, P;\n        let x = ye(f.resource, c), L = S((g = x == null ? void 0 : x.meta) == null ? void 0 : g.audit, (h = x == null ? void 0 : x.options) == null ? void 0 : h.audit, (w = (M = x == null ? void 0 : x.options) == null ? void 0 : M.auditLog) == null ? void 0 : w.permissions);\n        if (L && !kr(L, f.action)) return;\n        let v;\n        return d && s != null && s.create && (v = await u()), await ((P = s.create) == null ? void 0 : P.call(s, {\n            ...f,\n            author: p ?? (v == null ? void 0 : v.data)\n        }));\n    }, {\n        mutationKey: n().audit().action(\"log\").get(),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLog\", a)\n        }\n    }), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(async (f)=>{\n        var x;\n        return await ((x = s.update) == null ? void 0 : x.call(s, f));\n    }, {\n        onSuccess: (f)=>{\n            f != null && f.resource && r.invalidateQueries(n().audit().resource((f == null ? void 0 : f.resource) ?? \"\").action(\"list\").get(a));\n        },\n        mutationKey: n().audit().action(\"rename\").get(),\n        ...t,\n        meta: {\n            ...t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLog\", a)\n        }\n    });\n    return {\n        log: l,\n        rename: y\n    };\n}, \"useLog\");\n\n\n\nvar oC = o(({ resource: e, action: t, meta: r, author: s, metaData: n, queryOptions: a })=>{\n    let { get: i } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), { keys: c, preferLegacyKeys: p } = O();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: c().audit().resource(e).action(\"list\").params(r).get(p),\n        queryFn: ()=>(i == null ? void 0 : i({\n                resource: e,\n                action: t,\n                author: s,\n                meta: r,\n                metaData: n\n            })) ?? Promise.resolve([]),\n        enabled: typeof i < \"u\",\n        ...a,\n        retry: !1,\n        meta: {\n            ...a == null ? void 0 : a.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogList\", p, e)\n        }\n    });\n}, \"useLogList\");\n\n\nvar TC = o(({ meta: e = {} } = {})=>{\n    let t = Z(), { i18nProvider: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe), s = ae(), n = G(), { resources: a, resource: i, action: c } = z(), { options: { textTransformers: p } } = ne(), u = [];\n    if (!(i != null && i.name)) return {\n        breadcrumbs: u\n    };\n    let d = o((l)=>{\n        var f, x, L, v, g, h;\n        let y = typeof l == \"string\" ? ye(l, a, t === \"legacy\") ?? {\n            name: l\n        } : l;\n        if (y) {\n            let M = S((f = y == null ? void 0 : y.meta) == null ? void 0 : f.parent, y == null ? void 0 : y.parentName);\n            M && d(M);\n            let w = Re(y, a, t === \"legacy\").find((m)=>m.action === \"list\"), P = (x = w == null ? void 0 : w.resource) != null && x.list ? w == null ? void 0 : w.route : void 0, T = P ? t === \"legacy\" ? P : Me(P, y == null ? void 0 : y.meta, s, e) : void 0;\n            u.push({\n                label: S((L = y.meta) == null ? void 0 : L.label, (v = y.options) == null ? void 0 : v.label) ?? n(`${y.name}.${y.name}`, p.humanize(y.name)),\n                href: T,\n                icon: S((g = y.meta) == null ? void 0 : g.icon, (h = y.options) == null ? void 0 : h.icon, y.icon)\n            });\n        }\n    }, \"addBreadcrumb\");\n    if (d(i), c && c !== \"list\") {\n        let l = `actions.${c}`, y = n(l);\n        typeof r < \"u\" && y === l ? (warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, `[useBreadcrumb]: Breadcrumb missing translate key for the \"${c}\" action. Please add \"actions.${c}\" key to your translation file.\nFor more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`), u.push({\n            label: n(`buttons.${c}`, p.humanize(c))\n        })) : u.push({\n            label: n(l, p.humanize(c))\n        });\n    }\n    return {\n        breadcrumbs: u\n    };\n}, \"useBreadcrumb\");\n\nvar vt = o((e, t, r = !1)=>{\n    let s = [], n = Fe(e, t);\n    for(; n;)s.push(n), n = Fe(n, t);\n    return s.reverse(), `/${[\n        ...s,\n        e\n    ].map((i)=>be((r ? i.route : void 0) ?? i.identifier ?? i.name)).join(\"/\").replace(/^\\//, \"\")}`;\n}, \"createResourceKey\");\nvar pn = o((e, t = !1)=>{\n    let r = {\n        item: {\n            name: \"__root__\"\n        },\n        children: {}\n    };\n    e.forEach((n)=>{\n        let a = [], i = Fe(n, e);\n        for(; i;)a.push(i), i = Fe(i, e);\n        a.reverse();\n        let c = r;\n        a.forEach((u)=>{\n            let d = (t ? u.route : void 0) ?? u.identifier ?? u.name;\n            c.children[d] || (c.children[d] = {\n                item: u,\n                children: {}\n            }), c = c.children[d];\n        });\n        let p = (t ? n.route : void 0) ?? n.identifier ?? n.name;\n        c.children[p] || (c.children[p] = {\n            item: n,\n            children: {}\n        });\n    });\n    let s = o((n)=>{\n        let a = [];\n        return Object.keys(n.children).forEach((i)=>{\n            let c = vt(n.children[i].item, e, t), p = {\n                ...n.children[i].item,\n                key: c,\n                children: s(n.children[i])\n            };\n            a.push(p);\n        }), a;\n    }, \"flatten\");\n    return s(r);\n}, \"createTree\");\nvar dn = o((e)=>e.split(\"?\")[0].split(\"#\")[0].replace(/(.+)(\\/$)/, \"$1\"), \"getCleanPath\"), bu = o(({ meta: e, hideOnMissingParameter: t = !0 } = {\n    hideOnMissingParameter: !0\n})=>{\n    let r = G(), s = lt(), n = Z(), { resource: a, resources: i } = z(), { pathname: c } = ae(), { useLocation: p } = te(), { pathname: u } = p(), d = nt(), y = `/${((n === \"legacy\" ? dn(u) : c ? dn(c) : void 0) ?? \"\").replace(/^\\//, \"\")}`, f = a ? vt(a, i, n === \"legacy\") : y ?? \"\", x = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!a) return [];\n        let g = Fe(a, i), h = [\n            vt(a, i)\n        ];\n        for(; g;)h.push(vt(g, i)), g = Fe(g, i);\n        return h;\n    }, []), L = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((g)=>{\n        var M, w, P, T, m, U;\n        if ((((M = g == null ? void 0 : g.meta) == null ? void 0 : M.hide) ?? ((w = g == null ? void 0 : g.options) == null ? void 0 : w.hide)) || !(g != null && g.list) && g.children.length === 0) return;\n        let h = g.list ? s({\n            resource: g,\n            action: \"list\",\n            legacy: n === \"legacy\",\n            meta: e\n        }) : void 0;\n        if (!(t && h && h.match(/(\\/|^):(.+?)(\\/|$){1}/))) return {\n            ...g,\n            route: h,\n            icon: S((P = g.meta) == null ? void 0 : P.icon, (T = g.options) == null ? void 0 : T.icon, g.icon),\n            label: S((m = g == null ? void 0 : g.meta) == null ? void 0 : m.label, (U = g == null ? void 0 : g.options) == null ? void 0 : U.label) ?? r(`${g.name}.${g.name}`, d(g.name, \"plural\"))\n        };\n    }, [\n        n,\n        e,\n        s,\n        r,\n        t\n    ]), v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let g = pn(i, n === \"legacy\"), h = o((M)=>M.flatMap((w)=>{\n                let P = h(w.children), T = L({\n                    ...w,\n                    children: P\n                });\n                return T ? [\n                    T\n                ] : [];\n            }), \"prepare\");\n        return h(g);\n    }, [\n        i,\n        n,\n        L\n    ]);\n    return {\n        defaultOpenKeys: x,\n        selectedKey: f,\n        menuItems: v\n    };\n}, \"useMenu\");\nvar q = o(()=>{\n    let { params: e } = ae();\n    return o(({ resource: r, meta: s } = {})=>{\n        let { meta: n } = bt(r) ?? {\n            meta: {}\n        }, { filters: a, sorters: i, current: c, pageSize: p, ...u } = e ?? {};\n        return {\n            ...n,\n            ...u,\n            ...s\n        };\n    }, \"getMetaFn\");\n}, \"useMeta\");\n\nvar Ct = o(()=>{\n    let { options: e } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(De);\n    return e;\n}, \"useRefineOptions\");\n\nvar ln = o((e)=>{\n    let t = Z(), { useParams: r } = te(), s = ae(), n = r(), a = t === \"legacy\" ? n.id : s.id;\n    return e ?? a;\n}, \"useId\");\nvar mn = o((e)=>{\n    let t = Z(), { useParams: r } = te(), s = ae(), n = r(), a = t === \"legacy\" ? n.action : s.action;\n    return e ?? a;\n}, \"useAction\");\nfunction Ke(e) {\n    let { select: t, identifier: r } = z(), s = (e == null ? void 0 : e.resource) ?? r, { identifier: n = void 0, resource: a = void 0 } = s ? t(s, !0) : {}, i = r === n, c = ln(), p = mn(e == null ? void 0 : e.action), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>i ? (e == null ? void 0 : e.id) ?? c : e == null ? void 0 : e.id, [\n        i,\n        e == null ? void 0 : e.id,\n        c\n    ]), [d, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState(u);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>l(u), [\n        u\n    ]);\n    let y = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>!i && !(e != null && e.action) ? \"create\" : p === \"edit\" || p === \"clone\" ? p : \"create\", [\n        p,\n        i,\n        e == null ? void 0 : e.action\n    ]);\n    return {\n        id: d,\n        setId: l,\n        resource: a,\n        action: p,\n        identifier: n,\n        formAction: y\n    };\n}\no(Ke, \"useResourceParams\");\nfunction vr({ type: e }) {\n    let t = G(), { textTransformers: { humanize: r } } = Ct(), s = `buttons.${e}`, n = r(e);\n    return {\n        label: t(s, n)\n    };\n}\no(vr, \"useActionableButton\");\n\n\nvar Dr = o((e)=>{\n    var u, d, l;\n    let t = G(), r = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Xe), s = ((u = e.accessControl) == null ? void 0 : u.enabled) ?? r.options.buttons.enableAccessControl, n = ((d = e.accessControl) == null ? void 0 : d.hideIfUnauthorized) ?? r.options.buttons.hideIfUnauthorized, { data: a } = xr({\n        resource: (l = e.resource) == null ? void 0 : l.name,\n        action: e.action === \"clone\" ? \"create\" : e.action,\n        params: {\n            id: e.id,\n            resource: e.resource\n        },\n        queryOptions: {\n            enabled: s\n        }\n    }), i = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>a != null && a.can ? \"\" : a != null && a.reason ? a.reason : t(\"buttons.notAccessTitle\", \"You don't have permission to access\"), [\n        a == null ? void 0 : a.can,\n        a == null ? void 0 : a.reason,\n        t\n    ]), c = s && n && !(a != null && a.can), p = (a == null ? void 0 : a.can) === !1;\n    return {\n        title: i,\n        hidden: c,\n        disabled: p,\n        canAccess: a\n    };\n}, \"useButtonCanAccess\");\nfunction Dt(e) {\n    var h;\n    let t = ce(), r = Z(), s = rt(), { Link: n } = te(), a = G(), i = nt(), { textTransformers: { humanize: c } } = Ct(), { id: p, resource: u, identifier: d } = Ke({\n        resource: e.resource,\n        id: e.action === \"create\" ? void 0 : e.id\n    }), { canAccess: l, title: y, hidden: f, disabled: x } = Dr({\n        action: e.action,\n        accessControl: e.accessControl,\n        id: p,\n        resource: u\n    }), L = r === \"legacy\" ? n : s, v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!u) return \"\";\n        switch(e.action){\n            case \"create\":\n            case \"list\":\n                return t[`${e.action}Url`](u, e.meta);\n            default:\n                return p ? t[`${e.action}Url`](u, p, e.meta) : \"\";\n        }\n    }, [\n        u,\n        p,\n        e.meta,\n        t[`${e.action}Url`]\n    ]), g = e.action === \"list\" ? a(`${d ?? e.resource}.titles.list`, i(((h = u == null ? void 0 : u.meta) == null ? void 0 : h.label) ?? (u == null ? void 0 : u.label) ?? d ?? e.resource, \"plural\")) : a(`buttons.${e.action}`, c(e.action));\n    return {\n        to: v,\n        label: g,\n        title: y,\n        disabled: x,\n        hidden: f,\n        canAccess: l,\n        LinkComponent: L\n    };\n}\no(Dt, \"useNavigationButton\");\nfunction Lu(e) {\n    let t = G(), { mutate: r, isLoading: s, variables: n } = ro(), { setWarnWhen: a } = dt(), { mutationMode: i } = ke(e.mutationMode), { id: c, resource: p, identifier: u } = Ke({\n        resource: e.resource,\n        id: e.id\n    }), { title: d, disabled: l, hidden: y, canAccess: f } = Dr({\n        action: \"delete\",\n        accessControl: e.accessControl,\n        id: c,\n        resource: p\n    }), x = t(\"buttons.delete\", \"Delete\"), L = t(\"buttons.delete\", \"Delete\"), v = t(\"buttons.confirm\", \"Are you sure?\"), g = t(\"buttons.cancel\", \"Cancel\"), h = c === (n == null ? void 0 : n.id) && s;\n    return {\n        label: x,\n        title: d,\n        hidden: y,\n        disabled: l,\n        canAccess: f,\n        loading: h,\n        confirmOkLabel: L,\n        cancelLabel: g,\n        confirmTitle: v,\n        onConfirm: o(()=>{\n            c && u && (a(!1), r({\n                id: c,\n                resource: u,\n                mutationMode: i,\n                successNotification: e.successNotification,\n                errorNotification: e.errorNotification,\n                meta: e.meta,\n                metaData: e.meta,\n                dataProviderName: e.dataProviderName,\n                invalidates: e.invalidates\n            }, {\n                onSuccess: e.onSuccess\n            }));\n        }, \"onConfirm\")\n    };\n}\no(Lu, \"useDeleteButton\");\n\nfunction Eu(e) {\n    let t = G(), { keys: r, preferLegacyKeys: s } = O(), n = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), a = Ce(), { identifier: i, id: c } = Ke({\n        resource: e.resource,\n        id: e.id\n    }), { resources: p } = z(), u = !!n.isFetching({\n        queryKey: r().data(_(i, e.dataProviderName, p)).resource(i).action(\"one\").get(s)\n    }), d = o(()=>{\n        a({\n            id: c,\n            invalidates: [\n                \"detail\"\n            ],\n            dataProviderName: e.dataProviderName,\n            resource: i\n        });\n    }, \"onClick\"), l = t(\"buttons.refresh\", \"Refresh\");\n    return {\n        onClick: d,\n        label: l,\n        loading: u\n    };\n}\no(Eu, \"useRefreshButton\");\nvar Xb = o((e)=>Dt({\n        ...e,\n        action: \"show\"\n    }), \"useShowButton\"), Zb = o((e)=>Dt({\n        ...e,\n        action: \"edit\"\n    }), \"useEditButton\"), Yb = o((e)=>Dt({\n        ...e,\n        action: \"clone\"\n    }), \"useCloneButton\"), Jb = o((e)=>Dt({\n        ...e,\n        action: \"create\"\n    }), \"useCreateButton\"), qb = o((e)=>Dt({\n        ...e,\n        action: \"list\"\n    }), \"useListButton\"), ev = o(()=>vr({\n        type: \"save\"\n    }), \"useSaveButton\"), tv = o(()=>vr({\n        type: \"export\"\n    }), \"useExportButton\"), rv = o(()=>vr({\n        type: \"import\"\n    }), \"useImportButton\");\nvar Iu = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), r = G(), { push: s } = ce(), n = ge(), a = Z(), { resource: i, action: c } = z();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        i && c && t(r(\"pages.error.info\", {\n            action: c,\n            resource: i.name\n        }, `You may have forgotten to add the \"${c}\" component to \"${i.name}\" resource.`));\n    }, [\n        i,\n        c\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, r(\"pages.error.404\", void 0, \"Sorry, the page you visited does not exist.\")), e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        onClick: ()=>{\n            a === \"legacy\" ? s(\"/\") : n({\n                to: \"/\"\n            });\n        }\n    }, r(\"pages.error.backHome\", void 0, \"Back Home\")));\n}, \"ErrorComponent\");\n\nvar Qr = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), n = G(), a = J(), { mutate: i } = At({\n        v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, n(\"pages.login.title\", \"Sign in your account\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (c)=>{\n            c.preventDefault(), i({\n                username: e,\n                password: r\n            });\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"table\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tbody\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, n(\"pages.login.username\", void 0, \"username\"), \":\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"text\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        autoFocus: !0,\n        required: !0,\n        value: e,\n        onChange: (c)=>t(c.target.value)\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, n(\"pages.login.password\", void 0, \"password\"), \":\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: r,\n        onChange: (c)=>s(c.target.value)\n    }))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: \"login\"\n    })));\n}, \"LoginPage\");\n\n\nvar gn = o(({ providers: e, registerLink: t, forgotPasswordLink: r, rememberMe: s, contentProps: n, wrapperProps: a, renderContent: i, formProps: c, title: p = void 0, hideForm: u })=>{\n    let d = Z(), l = rt(), { Link: y } = te(), f = d === \"legacy\" ? y : l, [x, L] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [v, g] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [h, M] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), w = G(), P = J(), { mutate: T } = At({\n        v3LegacyAuthProviderCompatible: !!(P != null && P.isLegacy)\n    }), m = o((R, E)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(f, {\n            to: R\n        }, E), \"renderLink\"), U = o(()=>e ? e.map((R)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                key: R.name,\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    marginBottom: \"1rem\"\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                onClick: ()=>T({\n                        providerName: R.name\n                    }),\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }\n            }, R == null ? void 0 : R.icon, R.label ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, R.label)))) : null, \"renderProviders\"), b = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, w(\"pages.login.title\", \"Sign in to your account\")), U(), !u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (R)=>{\n            R.preventDefault(), T({\n                email: x,\n                password: v,\n                remember: h\n            });\n        },\n        ...c\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, w(\"pages.login.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"text\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: x,\n        onChange: (R)=>L(R.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, w(\"pages.login.fields.password\", \"Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        type: \"password\",\n        name: \"password\",\n        required: !0,\n        size: 20,\n        value: v,\n        onChange: (R)=>g(R.target.value)\n    }), s ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"remember-me-input\"\n    }, w(\"pages.login.buttons.rememberMe\", \"Remember me\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"remember-me-input\",\n        name: \"remember\",\n        type: \"checkbox\",\n        size: 20,\n        checked: h,\n        value: h.toString(),\n        onChange: ()=>{\n            M(!h);\n        }\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), r ?? m(\"/forgot-password\", w(\"pages.login.buttons.forgotPassword\", \"Forgot password?\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: w(\"pages.login.signin\", \"Sign in\")\n    }), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, w(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", m(\"/register\", w(\"pages.login.register\", \"Sign up\")))))), t !== !1 && u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, w(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", m(\"/register\", w(\"pages.login.register\", \"Sign up\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...a\n    }, i ? i(b, p) : b);\n}, \"LoginPage\");\n\nvar xn = o(({ providers: e, loginLink: t, wrapperProps: r, contentProps: s, renderContent: n, formProps: a, title: i = void 0, hideForm: c })=>{\n    let p = Z(), u = rt(), { Link: d } = te(), l = p === \"legacy\" ? d : u, [y, f] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [x, L] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), v = G(), g = J(), { mutate: h, isLoading: M } = jr({\n        v3LegacyAuthProviderCompatible: !!(g != null && g.isLegacy)\n    }), w = o((m, U)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(l, {\n            to: m\n        }, U), \"renderLink\"), P = o(()=>e ? e.map((m)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                key: m.name,\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    marginBottom: \"1rem\"\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                onClick: ()=>h({\n                        providerName: m.name\n                    }),\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }\n            }, m == null ? void 0 : m.icon, m.label ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, m.label)))) : null, \"renderProviders\"), T = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, v(\"pages.register.title\", \"Sign up for your account\")), P(), !c && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (m)=>{\n            m.preventDefault(), h({\n                email: y,\n                password: x\n            });\n        },\n        ...a\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, v(\"pages.register.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"email\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: y,\n        onChange: (m)=>f(m.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, v(\"pages.register.fields.password\", \"Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        name: \"password\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: x,\n        onChange: (m)=>L(m.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: v(\"pages.register.buttons.submit\", \"Sign up\"),\n        disabled: M\n    }), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, v(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", w(\"/login\", v(\"pages.login.signin\", \"Sign in\"))))))), t !== !1 && c && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, v(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", w(\"/login\", v(\"pages.login.signin\", \"Sign in\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...r\n    }, n ? n(T, i) : T);\n}, \"RegisterPage\");\n\nvar Pn = o(({ loginLink: e, wrapperProps: t, contentProps: r, renderContent: s, formProps: n, title: a = void 0 })=>{\n    let i = G(), c = Z(), p = rt(), { Link: u } = te(), d = c === \"legacy\" ? u : p, [l, y] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), { mutate: f, isLoading: x } = Zr(), L = o((g, h)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(d, {\n            to: g\n        }, h), \"renderLink\"), v = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, i(\"pages.forgotPassword.title\", \"Forgot your password?\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (g)=>{\n            g.preventDefault(), f({\n                email: l\n            });\n        },\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, i(\"pages.forgotPassword.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"mail\",\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: l,\n        onChange: (g)=>y(g.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        disabled: x,\n        value: i(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), e ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, i(\"pages.register.buttons.haveAccount\", \"Have an account? \"), \" \", L(\"/login\", i(\"pages.login.signin\", \"Sign in\"))))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...t\n    }, s ? s(v, a) : v);\n}, \"ForgotPasswordPage\");\n\nvar Rn = o(({ wrapperProps: e, contentProps: t, renderContent: r, formProps: s, title: n = void 0 })=>{\n    let a = G(), i = J(), { mutate: c, isLoading: p } = Jr({\n        v3LegacyAuthProviderCompatible: !!(i != null && i.isLegacy)\n    }), [u, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [l, y] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), f = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, a(\"pages.updatePassword.title\", \"Update Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (x)=>{\n            x.preventDefault(), c({\n                password: u,\n                confirmPassword: l\n            });\n        },\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, a(\"pages.updatePassword.fields.password\", \"New Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        name: \"password\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: u,\n        onChange: (x)=>d(x.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"confirm-password-input\"\n    }, a(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"confirm-password-input\",\n        name: \"confirmPassword\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: l,\n        onChange: (x)=>y(x.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        disabled: p,\n        value: a(\"pages.updatePassword.buttons.submit\", \"Update\")\n    }))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...e\n    }, r ? r(f, n) : f);\n}, \"UpdatePasswordPage\");\nvar Fu = o((e)=>{\n    let { type: t } = e;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, o(()=>{\n        switch(t){\n            case \"register\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(xn, {\n                    ...e\n                });\n            case \"forgotPassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Pn, {\n                    ...e\n                });\n            case \"updatePassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Rn, {\n                    ...e\n                });\n            default:\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(gn, {\n                    ...e\n                });\n        }\n    }, \"renderView\")());\n}, \"AuthPage\");\n\nvar yo = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, \"Welcome on board\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Your configuration is completed.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Now you can get started by adding your resources to the\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"`resources`\"), \" property of \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"`<Refine>`\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            gap: 8\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Documentation\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev/examples\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Examples\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://discord.gg/refine\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Community\")))), \"ReadyPage\");\n\n\nvar Au = [\n    {\n        title: \"Documentation\",\n        description: \"Learn about the technical details of using Refine in your projects.\",\n        link: \"https://refine.dev/docs\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/book.svg\"\n    },\n    {\n        title: \"Tutorial\",\n        description: \"Learn how to use Refine by building a fully-functioning CRUD app, from scratch to full launch.\",\n        link: \"https://refine.dev/tutorial\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/hat.svg\"\n    },\n    {\n        title: \"Templates\",\n        description: \"Explore a range of pre-built templates, perfect everything from admin panels to dashboards and CRMs.\",\n        link: \"https://refine.dev/templates\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/application.svg\"\n    },\n    {\n        title: \"Community\",\n        description: \"Join our Discord community and keep up with the latest news.\",\n        link: \"https://discord.gg/refine\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/discord.svg\"\n    }\n], Cn = o(()=>{\n    let e = ar(\"(max-width: 1010px)\"), t = ar(\"(max-width: 650px)\"), r = o(()=>t ? \"1, 280px\" : e ? \"2, 280px\" : \"4, 1fr\", \"getGridTemplateColumns\"), s = o(()=>t ? \"32px\" : e ? \"40px\" : \"48px\", \"getHeaderFontSize\"), n = o(()=>t ? \"16px\" : e ? \"20px\" : \"24px\", \"getSubHeaderFontSize\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            zIndex: 10,\n            inset: 0,\n            overflow: \"auto\",\n            width: \"100dvw\",\n            height: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            overflow: \"hidden\",\n            position: \"relative\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n            background: t ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(88.89% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(88.89% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\" : e ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(66.67% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(66.67% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\" : \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(35.56% 50% at 50% 100%, rgba(38, 217, 127, 0.12) 0%, rgba(38, 217, 127, 0) 100%), radial-gradient(35.56% 50% at 50% 0%, rgba(71, 235, 235, 0.18) 0%, rgba(71, 235, 235, 0) 100%), #1D1E30\",\n            minHeight: \"100%\",\n            minWidth: \"100%\",\n            fontFamily: \"Arial\",\n            color: \"#FFFFFF\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            zIndex: 2,\n            position: \"absolute\",\n            width: t ? \"400px\" : \"800px\",\n            height: \"552px\",\n            opacity: \"0.5\",\n            background: \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/welcome-page-hexagon.png)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: \"contain\",\n            top: \"0\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: t ? \"40px\" : \"80px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: t ? \"112px 58px\" : \"224px 116px\",\n            backgroundImage: \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/refine-logo.svg)\",\n            width: t ? 112 : 224,\n            height: t ? 58 : 116\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: t ? \"120px\" : e ? \"200px\" : \"30vh\",\n            minHeight: t ? \"120px\" : \"200px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"16px\",\n            textAlign: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            fontSize: s(),\n            fontWeight: 700,\n            margin: \"0px\"\n        }\n    }, \"Welcome Aboard!\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h4\", {\n        style: {\n            fontSize: n(),\n            fontWeight: 400,\n            margin: \"0px\"\n        }\n    }, \"Your configuration is completed.\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: \"64px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${r()})`,\n            justifyContent: \"center\",\n            gap: \"48px\",\n            paddingRight: \"16px\",\n            paddingLeft: \"16px\",\n            paddingBottom: \"32px\",\n            maxWidth: \"976px\",\n            margin: \"auto\"\n        }\n    }, Au.map((a)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qu, {\n            key: `welcome-page-${a.title}`,\n            card: a\n        })))));\n}, \"ConfigSuccessPage\"), Qu = o(({ card: e })=>{\n    let { title: t, description: r, iconUrl: s, link: n } = e, [a, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            alignItems: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        onPointerEnter: ()=>i(!0),\n        onPointerLeave: ()=>i(!1),\n        style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            color: \"#fff\",\n            textDecoration: \"none\"\n        },\n        href: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"16px\",\n            height: \"16px\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundImage: `url(${s})`\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: \"16px\",\n            fontWeight: 700,\n            marginLeft: \"13px\",\n            marginRight: \"14px\"\n        }\n    }, t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        style: {\n            transition: \"transform 0.5s ease-in-out, opacity 0.2s ease-in-out\",\n            ...a && {\n                transform: \"translateX(4px)\",\n                opacity: 1\n            }\n        },\n        width: \"12\",\n        height: \"8\",\n        fill: \"none\",\n        opacity: \"0.5\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z\",\n        fill: \"#fff\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: \"12px\",\n            opacity: .5,\n            lineHeight: \"16px\"\n        }\n    }, r));\n}, \"Card\");\n\nvar bn = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            zIndex: 11,\n            inset: 0,\n            overflow: \"auto\",\n            width: \"100dvw\",\n            height: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            padding: \"24px\",\n            background: \"#14141FBF\",\n            backdropFilter: \"blur(3px)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            maxWidth: \"640px\",\n            width: \"100%\",\n            background: \"#1D1E30\",\n            borderRadius: \"16px\",\n            border: \"1px solid #303450\",\n            boxShadow: \"0px 0px 120px -24px #000000\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: \"16px 20px\",\n            borderBottom: \"1px solid #303450\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"8px\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Bu, {\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            lineHeight: \"24px\",\n            fontSize: \"16px\",\n            color: \"#FFFFFF\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Nu, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontWeight: 400\n        }\n    }, \"Configuration Error\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: \"20px\",\n            color: \"#A3ADC2\",\n            lineHeight: \"20px\",\n            fontSize: \"14px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n        style: {\n            margin: 0,\n            padding: 0,\n            lineHeight: \"28px\",\n            fontSize: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n        style: {\n            display: \"inline-block\",\n            background: \"#30345080\",\n            padding: \"0 4px\",\n            lineHeight: \"24px\",\n            fontSize: \"16px\",\n            borderRadius: \"4px\",\n            color: \"#FFFFFF\"\n        }\n    }, \"<Refine />\"), \" \", \"is not initialized. Please make sure you have it mounted in your app and placed your components inside it.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Vu, null)))))), \"ConfigErrorPage\"), Vu = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"pre\", {\n        style: {\n            display: \"block\",\n            overflowX: \"auto\",\n            borderRadius: \"8px\",\n            fontSize: \"14px\",\n            lineHeight: \"24px\",\n            backgroundColor: \"#14141F\",\n            color: \"#E5ECF2\",\n            padding: \"16px\",\n            margin: \"0\",\n            maxHeight: \"400px\",\n            overflow: \"auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"import\"), \" \", \"{\", \" Refine, WelcomePage\", \" \", \"}\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"from\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#A5D6FF\"\n        }\n    }, '\"@refinedev/core\"'), \";\", `\n`, `\n`, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"export\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"default\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"function\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FFA657\"\n        }\n    }, \"App\"), \"(\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"rgb(222, 147, 95)\"\n        }\n    }), \")\", \" \"), \"{\", `\n`, \"  \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"return\"), \" (\", `\n`, \"    \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"<\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"Refine\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#E5ECF2\",\n            opacity: .6\n        }\n    }, \"// \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, \"...\")), `\n`, \"    \", \">\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            opacity: .6\n        }\n    }, \"{\", \"/* ... */\", \"}\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"<\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"WelcomePage\"), \" />\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            opacity: .6\n        }\n    }, \"{\", \"/* ... */\", \"}\"), `\n`, \"    \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"</\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"Refine\"), \">\")), `\n`, \"  \", \");\", `\n`, \"}\"), \"ExampleImplementation\"), Bu = o((e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 204,\n        height: 56,\n        viewBox: \"0 0 204 56\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-a)\",\n        d: \"M12 0H0v12L12 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-b)\",\n        d: \"M28 0h-8L0 20v8L28 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-c)\",\n        d: \"M36 0h8L0 44v-8L36 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-d)\",\n        d: \"M60 0h-8L0 52v4h4L60 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-e)\",\n        d: \"M68 0h8L20 56h-8L68 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-f)\",\n        d: \"M92 0h-8L28 56h8L92 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-g)\",\n        d: \"M100 0h8L52 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-h)\",\n        d: \"M124 0h-8L60 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-i)\",\n        d: \"M140 0h-8L76 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-j)\",\n        d: \"M132 0h8L84 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-k)\",\n        d: \"M156 0h-8L92 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-l)\",\n        d: \"M164 0h8l-56 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-m)\",\n        d: \"M188 0h-8l-56 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-n)\",\n        d: \"M204 0h-8l-56 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-a\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-b\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-c\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-d\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-e\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-f\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-g\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-h\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-i\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-j\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-k\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-l\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-m\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-n\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })))), \"ErrorGradient\"), Nu = o((e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#FF4C4D\",\n        fillRule: \"evenodd\",\n        d: \"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z\",\n        clipRule: \"evenodd\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#fff\",\n        fillRule: \"evenodd\",\n        d: \"M7 8a1 1 0 1 0 2 0V5a1 1 0 1 0-2 0v3Zm0 3a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z\",\n        clipRule: \"evenodd\"\n    })), \"ErrorIcon\");\nvar Ku = o(()=>{\n    let { __initialized: e } = ne();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Cn, null), !e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(bn, null));\n}, \"WelcomePage\");\n\n\n\n\n\nvar Gu = \"4.51.0\", vn = o(()=>{\n    var h;\n    let e = qr(), t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), { liveProvider: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(et), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Gt), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Nt), { i18nProvider: a } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Kt), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe), { resources: p } = z(), u = ne(), d = !!t.create || !!t.get || !!t.update, l = !!(r != null && r.publish) || !!(r != null && r.subscribe) || !!(r != null && r.unsubscribe), y = !!s.useHistory || !!s.Link || !!s.Prompt || !!s.useLocation || !!s.useParams, f = !!n, x = !!(a != null && a.changeLocale) || !!(a != null && a.getLocale) || !!(a != null && a.translate), L = !!i.close || !!i.open, v = !!c.can, g = (h = u == null ? void 0 : u.options) == null ? void 0 : h.projectId;\n    return {\n        providers: {\n            auth: e,\n            auditLog: d,\n            live: l,\n            router: y,\n            data: f,\n            i18n: x,\n            notification: L,\n            accessControl: v\n        },\n        version: Gu,\n        resourceCount: p.length,\n        projectId: g\n    };\n}, \"useTelemetryData\");\nvar Hu = o((e)=>{\n    try {\n        let t = JSON.stringify(e || {});\n        return typeof btoa < \"u\" ? btoa(t) : Buffer.from(t).toString(\"base64\");\n    } catch  {\n        return;\n    }\n}, \"encode\"), Wu = o((e)=>{\n    let t = new Image;\n    t.src = e;\n}, \"throughImage\"), $u = o((e)=>{\n    fetch(e);\n}, \"throughFetch\"), Ou = o((e)=>{\n    typeof Image < \"u\" ? Wu(e) : typeof fetch < \"u\" && $u(e);\n}, \"transport\"), Ln = o(()=>{\n    let e = vn(), t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (t.current) return;\n        let r = Hu(e);\n        r && (Ou(`https://telemetry.refine.dev/telemetry?payload=${r}`), t.current = !0);\n    }, []), null;\n}, \"Telemetry\");\nvar Un = o((e)=>{\n    let t = [\n        \"go\",\n        \"parse\",\n        \"back\",\n        \"Link\"\n    ], r = Object.keys(e).filter((n)=>!t.includes(n));\n    return r.length > 0 ? (console.warn(`Unsupported properties are found in \\`routerProvider\\` prop. You provided \\`${r.join(\", \")}\\`. Supported properties are \\`${t.join(\", \")}\\`. You may wanted to use \\`legacyRouterProvider\\` prop instead.`), !0) : !1;\n}, \"checkRouterPropMisuse\");\n\nvar Mn = o((e)=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t.current === !1 && e && Un(e) && (t.current = !0);\n    }, [\n        e\n    ]);\n}, \"useRouterMisuseWarning\");\nvar ju = o(({ legacyAuthProvider: e, authProvider: t, dataProvider: r, legacyRouterProvider: s, routerProvider: n, notificationProvider: a, accessControlProvider: i, auditLogProvider: c, resources: p, DashboardPage: u, ReadyPage: d, LoginPage: l, catchAll: y, children: f, liveProvider: x, i18nProvider: L, Title: v, Layout: g, Sider: h, Header: M, Footer: w, OffLayoutArea: P, onLiveEvent: T, options: m })=>{\n    let { optionsWithDefaults: U, disableTelemetryWithDefault: b, reactQueryWithDefaults: R } = Vr({\n        options: m\n    }), E = Tr(()=>{\n        var I;\n        return R.clientConfig instanceof _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__.QueryClient ? R.clientConfig : new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__.QueryClient({\n            ...R.clientConfig,\n            defaultOptions: {\n                ...R.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: !1,\n                    keepPreviousData: !0,\n                    ...(I = R.clientConfig.defaultOptions) == null ? void 0 : I.queries\n                }\n            }\n        });\n    }, [\n        R.clientConfig\n    ]);\n    (0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.useQuerySubscription)(E);\n    let D = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>typeof a == \"function\" ? a : ()=>a, [\n        a\n    ])();\n    if (Mn(n), s && !n && (p ?? []).length === 0) return d ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(d, null) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(yo, null);\n    let { RouterComponent: A = react__WEBPACK_IMPORTED_MODULE_0__.Fragment } = n ? {} : s ?? {};\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.QueryClientProvider, {\n        client: E\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Gs, {\n        ...D\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Io, {\n        ...e ?? {},\n        isProvided: !!e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Fo, {\n        ...t ?? {},\n        isProvided: !!t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(vs, {\n        dataProvider: r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ls, {\n        liveProvider: x\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ss, {\n        value: s && !n ? \"legacy\" : \"new\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ks, {\n        router: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xs, {\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ms, {\n        resources: p ?? []\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ws, {\n        i18nProvider: L\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ys, {\n        ...i ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(nn, {\n        ...c ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ns, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($o, {\n        mutationMode: U.mutationMode,\n        warnWhenUnsavedChanges: U.warnWhenUnsavedChanges,\n        syncWithLocation: U.syncWithLocation,\n        Title: v,\n        undoableTimeout: U.undoableTimeout,\n        catchAll: y,\n        DashboardPage: u,\n        LoginPage: l,\n        Layout: g,\n        Sider: h,\n        Footer: w,\n        Header: M,\n        OffLayoutArea: P,\n        hasDashboard: !!u,\n        liveMode: U.liveMode,\n        onLiveEvent: T,\n        options: U\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xo, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(A, null, f, !b && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ln, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(go, null))))))))))))))))));\n}, \"Refine\");\n\nvar Ks = o(({ notification: e })=>{\n    let t = G(), { notificationDispatch: r } = je(), { open: s } = we(), [n, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), i = o(()=>{\n        if (e.isRunning === !0 && (e.seconds === 0 && e.doMutation(), e.isSilent || s == null || s({\n            key: `${e.id}-${e.resource}-notification`,\n            type: \"progress\",\n            message: t(\"notifications.undoable\", {\n                seconds: wt(e.seconds)\n            }, `You have ${wt(e.seconds)} seconds to undo`),\n            cancelMutation: e.cancelMutation,\n            undoableTimeout: wt(e.seconds)\n        }), e.seconds > 0)) {\n            n && clearTimeout(n);\n            let c = setTimeout(()=>{\n                r({\n                    type: \"DECREASE_NOTIFICATION_SECOND\",\n                    payload: {\n                        id: e.id,\n                        seconds: e.seconds,\n                        resource: e.resource\n                    }\n                });\n            }, 1e3);\n            a(c);\n        }\n    }, \"cancelNotification\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        i();\n    }, [\n        e\n    ]), null;\n}, \"UndoableQueue\");\n\nvar Ju = o(({ children: e, Layout: t, Sider: r, Header: s, Title: n, Footer: a, OffLayoutArea: i })=>{\n    let { Layout: c, Footer: p, Header: u, Sider: d, Title: l, OffLayoutArea: y } = ne();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t ?? c, {\n        Sider: r ?? d,\n        Header: s ?? u,\n        Footer: a ?? p,\n        Title: n ?? l,\n        OffLayoutArea: i ?? y\n    }, e, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(qu, null));\n}, \"LayoutWrapper\"), qu = o(()=>{\n    let { Prompt: e } = te(), t = G(), { warnWhen: r, setWarnWhen: s } = dt(), n = o((a)=>(a.preventDefault(), a.returnValue = t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"), a.returnValue), \"warnWhenListener\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(r && window.addEventListener(\"beforeunload\", n), window.removeEventListener(\"beforeunload\", n)), [\n        r\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(e, {\n        when: r,\n        message: t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"),\n        setWarnWhen: s\n    });\n}, \"UnsavedPrompt\");\n\nfunction ec({ redirectOnFail: e = !0, appendCurrentPathToQuery: t = !0, children: r, fallback: s, loading: n }) {\n    var P;\n    let a = J(), i = Z(), c = !!(a != null && a.isProvided), p = !!(a != null && a.isLegacy), u = i === \"legacy\", d = ae(), l = ge(), { useLocation: y } = te(), f = y(), { isFetching: x, isSuccess: L, data: { authenticated: v, redirectTo: g } = {} } = gr({\n        v3LegacyAuthProviderCompatible: p\n    }), h = c ? p ? L : v : !0;\n    if (!c) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r ?? null);\n    if (x) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, n ?? null);\n    if (h) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r ?? null);\n    if (typeof s < \"u\") return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s ?? null);\n    let M = p ? typeof e == \"string\" ? e : \"/login\" : typeof e == \"string\" ? e : g, w = `${u ? f == null ? void 0 : f.pathname : d.pathname}`.replace(/(\\?.*|#.*)$/, \"\");\n    if (M) {\n        if (u) {\n            let m = t ? `?to=${encodeURIComponent(w)}` : \"\";\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(rc, {\n                to: `${M}${m}`\n            });\n        }\n        let T = (P = d.params) != null && P.to ? d.params.to : l({\n            to: w,\n            options: {\n                keepQuery: !0\n            },\n            type: \"path\"\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(tc, {\n            config: {\n                to: M,\n                query: t && (T ?? \"\").length > 1 ? {\n                    to: T\n                } : void 0,\n                type: \"replace\"\n            }\n        });\n    }\n    return null;\n}\no(ec, \"Authenticated\");\nvar tc = o(({ config: e })=>{\n    let t = ge();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t(e);\n    }, [\n        t,\n        e\n    ]), null;\n}, \"Redirect\"), rc = o(({ to: e })=>{\n    let { replace: t } = ce();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t(e);\n    }, [\n        t,\n        e\n    ]), null;\n}, \"RedirectLegacy\");\n\nvar go = o(()=>{\n    let { useLocation: e } = te(), { checkAuth: t } = ue(), r = e();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        t == null || t().catch(()=>!1);\n    }, [\n        r == null ? void 0 : r.pathname\n    ]), null;\n}, \"RouteChangeHandler\");\n\nvar nc = o(({ resource: e, action: t, params: r, fallback: s, onUnauthorized: n, children: a, queryOptions: i, ...c })=>{\n    let { id: p, resource: u, action: d = \"\" } = Ke({\n        resource: e,\n        id: r == null ? void 0 : r.id\n    }), l = t ?? d, y = r ?? {\n        id: p,\n        resource: u\n    }, { data: f } = xr({\n        resource: u == null ? void 0 : u.name,\n        action: l,\n        params: y,\n        queryOptions: i\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        n && (f == null ? void 0 : f.can) === !1 && n({\n            resource: u == null ? void 0 : u.name,\n            action: l,\n            reason: f == null ? void 0 : f.reason,\n            params: y\n        });\n    }, [\n        f == null ? void 0 : f.can\n    ]), f != null && f.can ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(a) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(a, c) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, a) : (f == null ? void 0 : f.can) === !1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s ?? null) : null;\n}, \"CanAccess\");\n\nvar In = [\n    `\n    .bg-top-announcement {\n        border-bottom: 1px solid rgba(71, 235, 235, 0.15);\n        background: radial-gradient(\n                218.19% 111.8% at 0% 0%,\n                rgba(71, 235, 235, 0.1) 0%,\n                rgba(71, 235, 235, 0.2) 100%\n            ),\n            #14141f;\n    }\n    `,\n    `\n    .top-announcement-mask {\n        mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        -webkit-mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        mask-repeat: repeat;\n        -webkit-mask-repeat: repeat;\n        background: rgba(71, 235, 235, 0.25);\n    }\n    `,\n    `\n    .banner {\n        display: flex;\n        @media (max-width: 1000px) {\n            display: none;\n        }\n    }`,\n    `\n    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {\n        text-decoration: none;\n        z-index: 9;\n    }\n    `,\n    `\n    @keyframes top-announcement-glow {\n        0% {\n            opacity: 1;\n        }\n\n        100% {\n            opacity: 0;\n        }\n    }\n    `\n];\nvar ic = \"If you find Refine useful, you can contribute to its growth by giving it a star on GitHub\", uc = o(({ containerStyle: e })=>((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let t = document.createElement(\"style\");\n        document.head.appendChild(t), In.forEach((r)=>{\n            var s;\n            return (s = t.sheet) == null ? void 0 : s.insertRule(r, t.sheet.cssRules.length);\n        });\n    }, []), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"banner bg-top-announcement\",\n        style: {\n            width: \"100%\",\n            height: \"48px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"relative\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            paddingLeft: \"200px\",\n            width: \"100%\",\n            maxWidth: \"100vw\",\n            height: \"100%\",\n            borderBottom: \"1px solid #47ebeb26\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"top-announcement-mask\",\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n            height: \"100%\",\n            borderBottom: \"1px solid #47ebeb26\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"relative\",\n            width: \"960px\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            margin: \"0 auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"calc(50% - 300px)\",\n            height: \"100%\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ur, {\n        style: {\n            animationDelay: \"1.5s\",\n            position: \"absolute\",\n            top: \"2px\",\n            right: \"220px\"\n        },\n        id: \"1\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ur, {\n        style: {\n            animationDelay: \"1s\",\n            position: \"absolute\",\n            top: \"8px\",\n            right: \"100px\",\n            transform: \"rotate(180deg)\"\n        },\n        id: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Sn, {\n        style: {\n            position: \"absolute\",\n            right: \"10px\"\n        },\n        id: \"3\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"calc(50% - 300px)\",\n            height: \"100%\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ur, {\n        style: {\n            animationDelay: \"2s\",\n            position: \"absolute\",\n            top: \"6px\",\n            right: \"180px\",\n            transform: \"rotate(180deg)\"\n        },\n        id: \"4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ur, {\n        style: {\n            animationDelay: \"0.5s\",\n            transitionDelay: \"1.3s\",\n            position: \"absolute\",\n            top: \"2px\",\n            right: \"40px\"\n        },\n        id: \"5\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Sn, {\n        style: {\n            position: \"absolute\",\n            right: \"-70px\"\n        },\n        id: \"6\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cc, {\n        text: ic\n    })))), \"GitHubBanner\"), cc = o(({ text: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        className: \"gh-link\",\n        href: \"https://s.refine.dev/github-support\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            position: \"absolute\",\n            height: \"100%\",\n            padding: \"0 60px\",\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            whiteSpace: \"nowrap\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundImage: \"linear-gradient(90deg, rgba(31, 63, 72, 0.00) 0%, #1F3F48 10%, #1F3F48 90%, rgba(31, 63, 72, 0.00) 100%)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            color: \"#fff\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            gap: \"8px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, \"⭐️\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"text\",\n        style: {\n            fontSize: \"16px\",\n            lineHeight: \"24px\"\n        }\n    }, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, \"⭐️\"))), \"Text\"), Ur = o(({ style: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 80,\n        height: 40,\n        fill: \"none\",\n        style: {\n            opacity: 1,\n            animation: \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 40,\n        r: 40,\n        fill: `url(#${t.id}-a)`,\n        fillOpacity: .5\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: `${t.id}-a`,\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"matrix(0 40 -40 0 40 0)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#47EBEB\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#47EBEB\",\n        stopOpacity: 0\n    })))), \"GlowSmall\"), Sn = o(({ style: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 120,\n        height: 48,\n        fill: \"none\",\n        ...t,\n        style: {\n            opacity: 1,\n            animation: \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 60,\n        cy: 24,\n        r: 60,\n        fill: `url(#${t.id}-a)`,\n        fillOpacity: .5\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: `${t.id}-a`,\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"matrix(0 60 -60 0 60 24)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#47EBEB\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#47EBEB\",\n        stopOpacity: 0\n    })))), \"GlowBig\");\n\nvar pc = o(({ status: e, elements: { success: t = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Er, {\n    key: \"autoSave.success\",\n    defaultMessage: \"saved\"\n}), error: r = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Er, {\n    key: \"autoSave.error\",\n    defaultMessage: \"auto save failure\"\n}), loading: s = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Er, {\n    key: \"autoSave.loading\",\n    defaultMessage: \"saving...\"\n}), idle: n = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Er, {\n    key: \"autoSave.idle\",\n    defaultMessage: \"waiting for changes\"\n}) } = {} })=>{\n    switch(e){\n        case \"success\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t);\n        case \"error\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r);\n        case \"loading\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s);\n        default:\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, n);\n    }\n}, \"AutoSaveIndicator\"), Er = o(({ key: e, defaultMessage: t })=>{\n    let r = G();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, r(e, t));\n}, \"Message\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@refinedev/devtools-internal/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTrace: () => (/* binding */ p),\n/* harmony export */   getXRay: () => (/* binding */ k),\n/* harmony export */   useQuerySubscription: () => (/* binding */ b)\n/* harmony export */ });\n/* harmony import */ var error_stack_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! error-stack-parser */ \"(ssr)/./node_modules/error-stack-parser/error-stack-parser.js\");\n/* harmony import */ var _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @refinedev/devtools-shared */ \"(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ getTrace,getXRay,useQuerySubscription auto */ \nvar T = \"renderWithHooks\", y = (r)=>{\n    let e = r.findIndex((n)=>n.functionName === T);\n    return e !== -1 ? r.slice(0, e) : r;\n};\nvar f =  false ? 0 : /\\/refine\\/packages\\/(?<name>.*?)\\//;\nvar d = (r)=>r ? !!r.match(f) : !1;\nvar m = (r)=>{\n    var o;\n    if (!r) return;\n    let e = r.match(f), n = (o = e == null ? void 0 : e.groups) == null ? void 0 : o.name;\n    if (n) return `@refinedev/${n}`;\n};\nfunction p(r) {\n    if (false) {}\n    try {\n        let e = new Error, n = error_stack_parser__WEBPACK_IMPORTED_MODULE_0__.parse(e);\n        return y(n).map((t)=>({\n                file: t.fileName,\n                line: t.lineNumber,\n                column: t.columnNumber,\n                function: t.functionName,\n                isRefine: d(t.fileName),\n                packageName: m(t.fileName)\n            })).filter((t)=>t.function).filter((t)=>!(r != null && r.includes(t.function ?? \"\"))).slice(1);\n    } catch  {\n        return [];\n    }\n}\n\nvar E = (r, e)=>{\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"auth\") return null;\n    if (r === \"useCan\") return e ? \"key[1].resource\" : \"key[1]\";\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"audit-log\") return r === \"useLog\" ? \"variables.resource\" : \"key[1]\";\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"data\") {\n        if (r === \"useCustom\" || r === \"useCustomMutation\") return null;\n        switch(r){\n            case \"useList\":\n            case \"useInfiniteList\":\n            case \"useOne\":\n            case \"useMany\":\n                return e ? \"key[1]\" : \"key[2]\";\n            case \"useCreate\":\n            case \"useCreateMany\":\n            case \"useDelete\":\n            case \"useDeleteMany\":\n            case \"useUpdate\":\n            case \"useUpdateMany\":\n                return \"variables.resource\";\n        }\n    }\n    return null;\n};\nfunction k(r, e, n, o) {\n    if (false) {}\n    let s = p(o).slice(1), t = E(r, e);\n    return {\n        hookName: r,\n        trace: s,\n        resourcePath: t,\n        legacyKey: e,\n        resourceName: n\n    };\n}\n\n\n\nvar l = (r, e)=>{\n    let n = e == null ? void 0 : e.map((s)=>`${s.file}:${s.line}:${s.column}#${s.function}-${s.packageName}-${s.isRefine ? 1 : 0}`);\n    return JSON.stringify([\n        ...r ?? [],\n        ...n ?? []\n    ]);\n};\nvar g = (r)=>(e)=>{\n        var o;\n        if (!((o = e == null ? void 0 : e.meta) != null && o.trace)) return;\n        let n = e == null ? void 0 : e.meta;\n        new Promise((s)=>{\n            var t, a;\n            (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.send)(r, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.ACTIVITY, {\n                type: \"mutation\",\n                identifier: l(e == null ? void 0 : e.options.mutationKey, (t = e == null ? void 0 : e.meta) == null ? void 0 : t.trace),\n                key: e == null ? void 0 : e.options.mutationKey,\n                status: e == null ? void 0 : e.state.status,\n                state: e == null ? void 0 : e.state,\n                variables: (a = e == null ? void 0 : e.state) == null ? void 0 : a.variables,\n                ...n\n            }), s();\n        });\n    }, R = (r)=>(e)=>{\n        var o;\n        if (!((o = e == null ? void 0 : e.meta) != null && o.trace)) return;\n        let n = e == null ? void 0 : e.meta;\n        new Promise((s)=>{\n            var t;\n            (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.send)(r, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.ACTIVITY, {\n                type: \"query\",\n                identifier: l(e.queryKey, (t = e.meta) == null ? void 0 : t.trace),\n                key: e.queryKey,\n                status: e.state.status,\n                state: e.state,\n                ...n\n            }), s();\n        });\n    };\nvar b =  false ? 0 : (r)=>{\n    let { ws: e } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevToolsContext), n = react__WEBPACK_IMPORTED_MODULE_2__.useRef(), o = react__WEBPACK_IMPORTED_MODULE_2__.useRef();\n    return react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!e) return ()=>0;\n        let s = r.getQueryCache(), t = R(e);\n        return s.getAll().forEach(t), n.current = s.subscribe(({ query: a, type: c })=>(c === \"added\" || c === \"updated\") && t(a)), ()=>{\n            var a;\n            (a = n.current) == null || a.call(n);\n        };\n    }, [\n        e,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!e) return ()=>0;\n        let s = r.getMutationCache(), t = g(e);\n        return s.getAll().forEach(t), o.current = s.subscribe(({ mutation: a, type: c })=>(c === \"added\" || c === \"updated\") && t(a)), ()=>{\n            var a;\n            (a = o.current) == null || a.call(o);\n        };\n    }, [\n        e,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>e ? (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.receive)(e, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.DEVTOOLS_INVALIDATE_QUERY_ACTION, ({ queryKey: t })=>{\n            t && r.invalidateQueries(t);\n        }) : ()=>0, [\n        e,\n        r\n    ]), {};\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@refinedev/devtools-shared/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevToolsContext: () => (/* binding */ O),\n/* harmony export */   DevToolsContextProvider: () => (/* binding */ L),\n/* harmony export */   DevtoolsEvent: () => (/* binding */ T),\n/* harmony export */   hooksByScope: () => (/* binding */ _),\n/* harmony export */   receive: () => (/* binding */ c),\n/* harmony export */   scopes: () => (/* binding */ v),\n/* harmony export */   send: () => (/* binding */ d)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ DevToolsContext,DevToolsContextProvider,DevtoolsEvent,hooksByScope,receive,scopes,send auto */ var T = ((t)=>(t.RELOAD = \"devtools:reload\", t.DEVTOOLS_INIT = \"devtools:init\", t.DEVTOOLS_HANDSHAKE = \"devtools:handshake\", t.DEVTOOLS_ALREADY_CONNECTED = \"devtools:already-connected\", t.ACTIVITY = \"devtools:send-activity\", t.DEVTOOLS_ACTIVITY_UPDATE = \"devtools:activity-update\", t.DEVTOOLS_CONNECTED_APP = \"devtools:connected-app\", t.DEVTOOLS_DISCONNECTED_APP = \"devtools:disconnected-app\", t.DEVTOOLS_HIGHLIGHT_IN_MONITOR = \"devtools:highlight-in-monitor\", t.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION = \"devtools:highlight-in-monitor-action\", t.DEVTOOLS_LOGIN_SUCCESS = \"devtools:login-success\", t.DEVTOOLS_RELOAD_AFTER_LOGIN = \"devtools:reload-after-login\", t.DEVTOOLS_INVALIDATE_QUERY = \"devtools:invalidate-query\", t.DEVTOOLS_INVALIDATE_QUERY_ACTION = \"devtools:invalidate-query-action\", t))(T || {});\nvar v = {\n    useCan: \"access-control\",\n    useLog: \"audit-log\",\n    useLogList: \"audit-log\",\n    useCreate: \"data\",\n    useCreateMany: \"data\",\n    useCustom: \"data\",\n    useCustomMutation: \"data\",\n    useDelete: \"data\",\n    useDeleteMany: \"data\",\n    useInfiniteList: \"data\",\n    useList: \"data\",\n    useMany: \"data\",\n    useOne: \"data\",\n    useUpdate: \"data\",\n    useUpdateMany: \"data\",\n    useForgotPassword: \"auth\",\n    useGetIdentity: \"auth\",\n    useIsAuthenticated: \"auth\",\n    useLogin: \"auth\",\n    useLogout: \"auth\",\n    useOnError: \"auth\",\n    usePermissions: \"auth\",\n    useRegister: \"auth\",\n    useUpdatePassword: \"auth\"\n}, _ = Object.entries(v).reduce((e, [a, o])=>(e[o] || (e[o] = []), e[o].push(a), e), {});\n\nasync function d(e, a, o) {\n    if (e.readyState !== e.OPEN) {\n        await new Promise((s)=>{\n            let r = ()=>{\n                e.send(JSON.stringify({\n                    event: a,\n                    payload: o\n                })), s(), e.removeEventListener(\"open\", r);\n            };\n            e.addEventListener(\"open\", r);\n        });\n        return;\n    }\n    e.send(JSON.stringify({\n        event: a,\n        payload: o\n    }));\n}\nfunction c(e, a, o) {\n    let s = (r)=>{\n        let { event: u, payload: l } = JSON.parse(r.data);\n        a === u && o(l);\n    };\n    return e.addEventListener(\"message\", s), ()=>{\n        e.removeEventListener(\"message\", s);\n    };\n}\nvar O = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    __devtools: !1,\n    port: 5001,\n    url: \"localhost\",\n    secure: !1,\n    ws: null\n}), L = ({ __devtools: e, port: a, children: o })=>{\n    let [s, r] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        __devtools: e ?? !1,\n        port: a ?? 5001,\n        url: \"localhost\",\n        secure: !1,\n        ws: null\n    }), [u, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let n = new WebSocket(`${s.secure ? \"wss\" : \"ws\"}://localhost:${s.port}`), y = c(n, \"devtools:handshake\", (p)=>{\n            r((D)=>({\n                    ...D,\n                    devtoolsUrl: p.url\n                })), y();\n        });\n        return n.addEventListener(\"open\", ()=>{\n            s.__devtools || d(n, \"devtools:init\", {\n                url: window.location.origin\n            });\n        }), l(n), ()=>{\n            y(), n.readyState === WebSocket.CONNECTING ? n.addEventListener(\"open\", ()=>{\n                n.close(1e3, window.location.origin);\n            }) : n.close(1e3, window.location.origin);\n        };\n    }, []);\n    let E = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...s,\n            ws: u\n        }), [\n        s,\n        u\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(O.Provider, {\n        value: E\n    }, o);\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@refinedev/devtools/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevtoolsPanel: () => (/* binding */ de),\n/* harmony export */   DevtoolsProvider: () => (/* binding */ ue)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aliemir/dom-to-fiber-utils */ \"(ssr)/./node_modules/@aliemir/dom-to-fiber-utils/dist/index.mjs\");\n/* harmony import */ var _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/devtools-shared */ \"(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\");\n/* harmony import */ var lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/debounce.js */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ DevtoolsPanel,DevtoolsProvider auto */ \n\n\n\n\n\nvar V = (e)=>{\n    let { devtoolsUrl: s } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.DevToolsContext), [m, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), c = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async ()=>(await (await fetch(`${s ?? \"http://localhost:5001\"}/api/unique-trace-items`)).json()).data, [\n        s\n    ]), o = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((r, p)=>{\n        let t = r, h, i, v = !1;\n        for(; !v && t;)h = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstFiberHasName)(t), i = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstStateNodeFiber)(h), v = p.includes((0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getNameFromFiber)(h) ?? \"\"), v || (t = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getParentOfFiber)(t));\n        return i && h ? {\n            stateNode: i,\n            nameFiber: h\n        } : {\n            stateNode: null,\n            nameFiber: null\n        };\n    }, []), l = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((r)=>{\n        let p = [];\n        return r.forEach((t)=>{\n            p.find((i)=>i.element === t.element) || p.push(t);\n        }), p;\n    }, []), d = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((r, p)=>{\n        var v;\n        if (!r) return [];\n        let t = [], h = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getFiberFromElement)(r), i = o(h, p);\n        if (i.nameFiber && i.stateNode) {\n            let x = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getElementFromFiber)(i.stateNode), P = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getNameFromFiber)(i.nameFiber);\n            x && P && t.push({\n                element: x,\n                name: P\n            });\n        }\n        for(let x = 0; x < ((v = r == null ? void 0 : r.children) == null ? void 0 : v.length); x++)t.push(...d(r.children[x], p));\n        return t;\n    }, [\n        o\n    ]), a = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async ()=>{\n        let r = await c(), p = d(document.body, r), t = l(p);\n        n(t);\n    }, [\n        c,\n        d,\n        l\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        e && a();\n    }, [\n        e,\n        a\n    ]), {\n        selectableElements: m\n    };\n};\n\nvar E = ({ children: e })=>(react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let s = document.createElement(\"style\");\n        return s.innerHTML = e, document.head.appendChild(s), ()=>{\n            document.head.removeChild(s);\n        };\n    }, [\n        e\n    ]), null);\n\n\n\n\nvar z = (e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#0FBDBD\",\n        fillRule: \"evenodd\",\n        d: \"M9 1a1 1 0 0 0-2 0v2.1A5.006 5.006 0 0 0 3.1 7H1a1 1 0 0 0 0 2h2.1A5.006 5.006 0 0 0 7 12.9V15a1 1 0 1 0 2 0v-2.1A5.006 5.006 0 0 0 12.9 9H15a1 1 0 1 0 0-2h-2.1A5.006 5.006 0 0 0 9 3.1V1Zm2 7a3 3 0 1 0-6 0 3 3 0 0 0 6 0Z\",\n        clipRule: \"evenodd\"\n    })), _ = (e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#14141F\",\n        fillRule: \"evenodd\",\n        d: \"M9 1a1 1 0 0 0-2 0v2.1A5.006 5.006 0 0 0 3.1 7H1a1 1 0 0 0 0 2h2.1A5.006 5.006 0 0 0 7 12.9V15a1 1 0 1 0 2 0v-2.1A5.006 5.006 0 0 0 12.9 9H15a1 1 0 1 0 0-2h-2.1A5.006 5.006 0 0 0 9 3.1V1Zm2 7a3 3 0 1 0-6 0 3 3 0 0 0 6 0Z\",\n        clipRule: \"evenodd\"\n    }));\nvar oe = ({ element: e, name: s, onSelect: m })=>{\n    let [n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>{\n        let { top: l, left: d, width: a, height: r } = e.getBoundingClientRect(), { scrollLeft: p, scrollTop: t } = document.documentElement, h = d + p, i = l + t;\n        return {\n            left: h,\n            top: i,\n            width: a,\n            height: r\n        };\n    }), c = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(()=>{\n            var P, N, I, L, R;\n            let { top: a, left: r, width: p, height: t } = e.getBoundingClientRect(), { scrollLeft: h, scrollTop: i } = document.documentElement, v = r + h, x = a + i;\n            (P = c.current) == null || P.style.setProperty(\"left\", `${v}px`), (N = c.current) == null || N.style.setProperty(\"top\", `${x}px`), (I = c.current) == null || I.style.setProperty(\"width\", `${p}px`), (L = c.current) == null || L.style.setProperty(\"height\", `${t}px`), (R = c.current) == null || R.style.setProperty(\"opacity\", \"1\");\n        }, 200, {\n            leading: !1,\n            trailing: !0\n        }), d = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(()=>{\n            var a;\n            (a = c.current) == null || a.style.setProperty(\"opacity\", \"0\");\n        }, 200, {\n            leading: !0,\n            trailing: !1\n        });\n        return document.addEventListener(\"scroll\", l), document.addEventListener(\"scroll\", d), ()=>{\n            document.removeEventListener(\"scroll\", l), document.removeEventListener(\"scroll\", d);\n        };\n    }, [\n        e\n    ]);\n    let o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let l = {\n            width: 22,\n            height: 22\n        }, d = s.length * 7.5, a = {\n            width: l.width + d,\n            height: l.height\n        }, r = 4;\n        return n.top - a.height > 0 && n.left + a.width < window.innerWidth && n.width > a.width ? {\n            left: r / 2,\n            top: a.height * -1 - r\n        } : n.height >= a.height * 1.5 && n.width >= a.width * 1.5 ? {\n            left: 0 + r,\n            top: 0 + r\n        } : n.left - a.width > 0 ? {\n            right: n.width + r,\n            top: 0 - 1\n        } : n.left + n.width + a.width < window.innerWidth ? {\n            left: n.width + r,\n            top: 0 - 1\n        } : n.top + n.height + a.height < document.documentElement.scrollHeight ? {\n            left: 0 - 1,\n            top: n.height + r\n        } : {\n            left: 0,\n            top: 0\n        };\n    }, [\n        n,\n        s.length\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        type: \"button\",\n        className: \"selector-xray-box\",\n        onClick: (l)=>{\n            l == null || l.preventDefault(), l == null || l.stopPropagation(), m(s);\n        },\n        ref: c,\n        style: {\n            position: \"absolute\",\n            ...n\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            ...o\n        },\n        className: \"selector-xray-info\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"selector-xray-info-icon\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_, {\n        width: 12,\n        height: 12,\n        style: {\n            pointerEvents: \"none\"\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"selector-xray-info-title\"\n    }, ` ${s}`)));\n}, k = ({ elements: e, onSelect: s })=>{\n    let [m, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!m) {\n            let c = document.createElement(\"div\");\n            return c.id = \"selector-box-root\", document.body.appendChild(c), n(c), ()=>{\n                document.body.removeChild(c), n(null);\n            };\n        }\n        return ()=>0;\n    }, []), m ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_3__.createPortal)(e.map((c, o)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(oe, {\n            key: `selector-element-${o}-${c.name}`,\n            ...c,\n            onSelect: s\n        })), m), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(E, null, `\n          .selector-xray-box {\n            display: flex;\n            margin: 0;\n            padding: 0;\n            appearance: none;\n            z-index: 9999;\n            border: 2px dashed #47EBEB;\n            border-radius: 6px;\n            background: rgba(71, 235, 235, 0.01);\n            transition: opacity 0.2s ease-in-out;\n            cursor: crosshair;\n          }\n        \n          .selector-xray-info {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n      \n            z-index: 10;\n      \n            padding: 3px 0;\n            min-width: 22px;\n            height: 22px;\n      \n            color: #14141F;\n            background: #47EBEB;\n      \n            font-size: 12px;\n            line-height: 16px;\n            font-family: monospace;\n            border-radius: 11px;\n          }\n      \n          .selector-xray-info-icon {\n            display: flex;\n            min-width: 22px;\n            justify-content: center;\n            align-items: center;\n            flex-shrink: 0;\n          }\n      \n          .selector-xray-info-title {\n            display: block;\n            max-width: 0;\n            overflow: hidden;\n            transition-property: max-width, padding-right;\n            transition-duration: 0.2s;\n            transition-timing-function: ease-in-out;\n            transition-delay: 0.1s;\n          }\n      \n          .selector-xray-box:hover .selector-xray-info-title {\n            max-width: 200px;\n            padding-right: 8px;\n          }\n        `)) : null;\n};\nvar U = ({ active: e, setActive: s, onHighlight: m, icon: n, style: c })=>{\n    let { selectableElements: o } = V(e);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: c\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        role: \"button\",\n        title: \"Element Selector\",\n        className: \"refine-devtools-selector-button\",\n        onClick: (d)=>{\n            var a;\n            d.preventDefault(), d.stopPropagation(), (a = document == null ? void 0 : document.activeElement) == null || a.blur(), s((r)=>!r);\n        }\n    }, n), e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(k, {\n        elements: o,\n        onSelect: (d)=>{\n            m(d), s(!1);\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(E, null, `\n        .refine-devtools-selector-button {\n          padding: 0;\n          margin: 0;\n          height: 100%;\n          width: 100%;\n          transform: rotate(0deg);\n          transition: transform 0.2s ease-in-out;\n        }\n\n        .refine-devtools-selector-button:hover {\n          transform: rotate(180deg);\n        }\n    `));\n};\n\nvar $ = (e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 157,\n        height: 25,\n        viewBox: \"0 0 157 25\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#1D1E30\",\n        d: \"M17 1h123v24H17z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#1D1E30\",\n        d: \"M6.265 9.205A12 12 0 0 1 17.649 1H25v24H1L6.265 9.205ZM150.735 9.205A12 12 0 0 0 139.351 1H132v24h24l-5.265-15.795Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        d: \"M25 14.333A1.333 1.333 0 1 1 25 17a1.333 1.333 0 0 1 0-2.667Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M23.211 20.578a4 4 0 0 0 3.578 0l4-2A4 4 0 0 0 33 15v-4a4 4 0 0 0-2.211-3.578l-4-2a4 4 0 0 0-3.578 0l-4 2A4 4 0 0 0 17 11v4a4 4 0 0 0 2.211 3.578l4 2Zm-.878-4.911a2.667 2.667 0 0 0 5.334 0v-5.334a2.667 2.667 0 0 0-5.334 0v5.334Z\",\n        clipRule: \"evenodd\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#CFD7E2\",\n        d: \"M42.152 17a.287.287 0 0 1-.192-.072.287.287 0 0 1-.072-.192V9.032c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h4.2c.288 0 .56.056.816.168a2.135 2.135 0 0 1 1.14 1.128c.112.256.168.532.168.828v3.984c0 .296-.056.572-.168.828a2.135 2.135 0 0 1-1.14 1.128 2.014 2.014 0 0 1-.816.168h-4.2Zm1.38-1.644h2.82a.455.455 0 0 0 .336-.132.497.497 0 0 0 .132-.348v-3.984a.455.455 0 0 0-.132-.336.436.436 0 0 0-.336-.144h-2.82v4.944Zm13.18-5.196a.244.244 0 0 1-.253.252h-4.44v1.656h4.02c.072 0 .132.024.18.072a.227.227 0 0 1 .084.18v1.128a.264.264 0 0 1-.084.192.244.244 0 0 1-.18.072h-4.02v1.644h4.44c.072 0 .132.028.18.084a.244.244 0 0 1 .072.18v1.116a.287.287 0 0 1-.072.192.244.244 0 0 1-.18.072h-5.832a.244.244 0 0 1-.18-.072.287.287 0 0 1-.072-.192V9.032c0-.072.024-.132.072-.18a.227.227 0 0 1 .18-.084h5.832c.072 0 .132.028.18.084a.244.244 0 0 1 .072.18v1.128ZM63.014 17h-2.232a.387.387 0 0 1-.216-.072.356.356 0 0 1-.144-.168l-1.716-4.296a.853.853 0 0 1-.072-.24 1.783 1.783 0 0 1-.024-.264V9.032c0-.072.024-.132.072-.18a.227.227 0 0 1 .18-.084h1.128c.072 0 .132.028.18.084a.227.227 0 0 1 .084.18v2.616c0 .072.008.156.024.252s.04.176.072.24l1.284 3.216h.528l1.284-3.216a.853.853 0 0 0 .072-.24c.016-.096.024-.18.024-.252V9.032c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h1.128c.072 0 .132.028.18.084a.244.244 0 0 1 .072.18v2.928c0 .072-.008.16-.024.264a.853.853 0 0 1-.072.24l-1.716 4.296a.356.356 0 0 1-.144.168.387.387 0 0 1-.216.072ZM73.29 8.768c.072 0 .132.028.18.084a.227.227 0 0 1 .084.18v1.128a.227.227 0 0 1-.084.18.244.244 0 0 1-.18.072h-2.208v6.324a.264.264 0 0 1-.084.192.244.244 0 0 1-.18.072H69.69a.244.244 0 0 1-.18-.072.287.287 0 0 1-.072-.192v-6.324H67.23a.287.287 0 0 1-.192-.072.244.244 0 0 1-.072-.18V9.032c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h6.06Zm6.507.012c.296 0 .572.056.828.168a2.171 2.171 0 0 1 1.128 1.128c.112.256.168.528.168.816v3.996c0 .288-.056.56-.168.816a2.171 2.171 0 0 1-1.128 1.128 2.043 2.043 0 0 1-.828.168h-2.34c-.296 0-.572-.056-.828-.168a2.171 2.171 0 0 1-1.128-1.128 2.014 2.014 0 0 1-.168-.816v-3.996c0-.288.056-.56.168-.816a2.171 2.171 0 0 1 1.128-1.128c.256-.112.532-.168.828-.168h2.34Zm.48 2.112a.436.436 0 0 0-.144-.336.455.455 0 0 0-.336-.132h-2.34a.497.497 0 0 0-.348.132.455.455 0 0 0-.132.336v3.996c0 .136.044.248.132.336a.497.497 0 0 0 .348.132h2.34a.455.455 0 0 0 .336-.132.436.436 0 0 0 .144-.336v-3.996Zm7.888-2.112c.295 0 .572.056.828.168a2.171 2.171 0 0 1 1.128 1.128c.112.256.168.528.168.816v3.996c0 .288-.056.56-.168.816a2.171 2.171 0 0 1-1.128 1.128 2.043 2.043 0 0 1-.828.168h-2.34c-.297 0-.573-.056-.829-.168a2.171 2.171 0 0 1-1.127-1.128 2.014 2.014 0 0 1-.168-.816v-3.996c0-.288.056-.56.168-.816a2.171 2.171 0 0 1 1.127-1.128c.257-.112.532-.168.829-.168h2.34Zm.48 2.112a.436.436 0 0 0-.144-.336.455.455 0 0 0-.337-.132h-2.34a.497.497 0 0 0-.347.132.455.455 0 0 0-.133.336v3.996c0 .136.044.248.133.336a.497.497 0 0 0 .347.132h2.34a.455.455 0 0 0 .337-.132.436.436 0 0 0 .143-.336v-3.996ZM98.294 17H92.68a.287.287 0 0 1-.192-.072.287.287 0 0 1-.072-.192V9.032c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h1.116c.072 0 .132.028.18.084a.227.227 0 0 1 .084.18v6.324h4.236c.072 0 .132.028.18.084a.244.244 0 0 1 .072.18v1.116a.287.287 0 0 1-.072.192.244.244 0 0 1-.18.072Zm7.336-5.76a.287.287 0 0 1-.192-.072.287.287 0 0 1-.072-.192v-.084a.455.455 0 0 0-.132-.336.436.436 0 0 0-.336-.144h-2.352a.46.46 0 0 0-.336.144.455.455 0 0 0-.132.336v.696c0 .136.044.252.132.348a.482.482 0 0 0 .336.132h2.352c.288 0 .56.056.816.168a2.171 2.171 0 0 1 1.128 1.128c.112.256.168.528.168.816v.696c0 .296-.056.572-.168.828a2.171 2.171 0 0 1-1.128 1.128 2.014 2.014 0 0 1-.816.168h-2.352c-.288 0-.56-.056-.816-.168a2.171 2.171 0 0 1-1.128-1.128 2.043 2.043 0 0 1-.168-.828v-.084c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h1.116c.072 0 .132.028.18.084a.227.227 0 0 1 .084.18v.084c0 .136.044.252.132.348a.482.482 0 0 0 .336.132h2.352a.455.455 0 0 0 .336-.132.497.497 0 0 0 .132-.348v-.696a.455.455 0 0 0-.132-.336.455.455 0 0 0-.336-.132h-2.352c-.288 0-.56-.056-.816-.168a2.171 2.171 0 0 1-1.128-1.128 2.099 2.099 0 0 1-.168-.828v-.696c0-.296.056-.572.168-.828a2.171 2.171 0 0 1 1.128-1.128c.256-.112.528-.168.816-.168h2.352c.288 0 .56.056.816.168a2.171 2.171 0 0 1 1.128 1.128c.112.256.168.532.168.828v.084a.287.287 0 0 1-.072.192.244.244 0 0 1-.18.072h-1.128Z\"\n    })));\nvar G = ({ onClick: e, onSelectorHighlight: s, selectorActive: m, setSelectorActive: n })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        role: \"button\",\n        className: \"devtools-selector-pin-box\",\n        onClick: e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(U, {\n        style: {\n            position: \"absolute\",\n            top: 5,\n            right: 18,\n            width: \"16px\",\n            height: \"16px\"\n        },\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(z, {\n            width: 16,\n            height: 16,\n            style: {\n                pointerEvents: \"none\"\n            }\n        }),\n        onHighlight: s,\n        active: m,\n        setActive: n\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(E, null, `\n            .devtools-selector-pin-box {\n              z-index: 9999;\n              position: relative;\n              user-select: none;\n              -webkit-user-select: none;\n              background: none;\n              border: none;\n              padding: 0;\n              margin: 0;\n              appearance: none;\n              padding-right: 1px;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              cursor: pointer;\n              color: #6C7793;\n              transition: color 0.1s ease-in-out;\n            }\n\n            .devtools-selector-pin-box:hover {\n              color: #0FBDBD;\n            }\n          `));\n\nvar X = (e)=>e ? \"scaleX(1) translateY(0)\" : \"scaleX(0) translateY(25vw)\";\nvar ne = ()=> false ? 0 : 1007.9999999999999, re = ()=> false ? 0 : 630;\nvar C = (e)=>{\n    switch(e){\n        case \"left\":\n            return {\n                left: \"calc(50px + 10px)\",\n                top: \"50%\",\n                transform: \"translateY(-50%)\"\n            };\n        case \"right\":\n            return {\n                right: \"calc(50px + 10px)\",\n                top: \"50%\",\n                transform: \"translateY(-50%)\"\n            };\n        case \"top\":\n            return {\n                left: \"50%\",\n                top: \"calc(50px + 10px)\",\n                transform: \"translateX(-50%)\"\n            };\n        case \"bottom\":\n            return {\n                left: \"50%\",\n                bottom: \"calc(50px + 10px)\",\n                transform: \"translateX(-50%)\"\n            };\n    }\n}, T = (e)=>{\n    switch(e){\n        case \"left\":\n        case \"right\":\n            return -70 + ( false ? 0 : 1440) - 10;\n        case \"top\":\n        case \"bottom\":\n            return -10 + ( false ? 0 : 1440) - 10;\n    }\n}, B = (e)=>{\n    switch(e){\n        case \"left\":\n        case \"right\":\n            return -10 + ( false ? 0 : 900) - 10;\n        case \"top\":\n        case \"bottom\":\n            return -70 + ( false ? 0 : 900) - 10;\n    }\n}, A = (e, s)=>{\n    let m = {\n        width: ne(),\n        height: re()\n    }, n = T(e), c = B(e), o = Math.min(n, (s ?? m).width), l = Math.min(c, (s ?? m).height);\n    return {\n        width: o,\n        height: l\n    };\n}, b = (e)=>{\n    let s = Math.round(e);\n    return s % 2 === 0 ? s : s + 1;\n};\n\nvar H = (e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: 10,\n        height: 26,\n        viewBox: \"0 0 10 26\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n        x: .5,\n        y: .5,\n        width: 9,\n        height: 25,\n        rx: 4.5,\n        fill: \"#1D1E30\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7 5C7 6.10457 6.10457 7 5 7C3.89543 7 3 6.10457 3 5C3 3.89543 3.89543 3 5 3C6.10457 3 7 3.89543 7 5Z\",\n        fill: \"#303450\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7 13C7 14.1046 6.10457 15 5 15C3.89543 15 3 14.1046 3 13C3 11.8954 3.89543 11 5 11C6.10457 11 7 11.8954 7 13Z\",\n        fill: \"#303450\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7 21C7 22.1046 6.10457 23 5 23C3.89543 23 3 22.1046 3 21C3 19.8954 3.89543 19 5 19C6.10457 19 7 19.8954 7 21Z\",\n        fill: \"#303450\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n        x: .5,\n        y: .5,\n        width: 9,\n        height: 25,\n        rx: 4.5,\n        stroke: \"#303450\"\n    }));\nvar Y = ({ placement: e, visible: s, children: m })=>{\n    let [n, c] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [o, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [d, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [r, p] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>{\n        let t = A(e);\n        return {\n            width: b(t.width),\n            height: b(t.height)\n        };\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let t = ()=>{\n            p((h)=>{\n                let i = A(e, h);\n                return {\n                    width: b(i.width),\n                    height: b(i.height)\n                };\n            });\n        };\n        return t(), window.addEventListener(\"resize\", t), ()=>{\n            window.removeEventListener(\"resize\", t);\n        };\n    }, [\n        e\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let t = ()=>{\n            l(null);\n        };\n        if (o !== null) return window.addEventListener(\"mouseup\", t), ()=>{\n            window.removeEventListener(\"mouseup\", t);\n        };\n    }, [\n        o\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let t = document.body.style.cursor;\n        return o != null && o.includes(\"x\") ? document.body.style.cursor = \"col-resize\" : o != null && o.includes(\"y\") && (document.body.style.cursor = \"row-resize\"), ()=>{\n            document.body.style.cursor = t;\n        };\n    }, [\n        o\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let t = (h)=>{\n            if ((o == null ? void 0 : o[1]) === \"x\") {\n                let i = h.clientX - ((d == null ? void 0 : d.x) ?? h.clientX), v = r.width + (o === \"lx\" ? -i : i) * 2;\n                p((x)=>({\n                        ...x,\n                        width: b(Math.min(T(e), Math.max(640, v)))\n                    }));\n            } else if ((o == null ? void 0 : o[1]) === \"y\") {\n                let i = h.clientY - ((d == null ? void 0 : d.y) ?? h.clientY), v = r.height + (o === \"ty\" ? -i : i) * 1;\n                p((x)=>({\n                        ...x,\n                        height: b(Math.min(B(e), Math.max(360, v)))\n                    }));\n            }\n        };\n        if (o !== null) return window.addEventListener(\"mousemove\", t), ()=>{\n            window.removeEventListener(\"mousemove\", t);\n        };\n    }, [\n        o,\n        e\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            borderRadius: \"8px\",\n            boxShadow: \"0 0 10px rgba(0, 0, 0, 0.5)\",\n            border: \"1px solid rgba(0, 0, 0, 0.5)\",\n            transitionProperty: \"transform, opacity\",\n            transitionTimingFunction: \"ease-in-out\",\n            transitionDuration: \"0.2s\",\n            ...C(e),\n            opacity: s ? 1 : 0,\n            transform: `${C(e).transform} ${X(s ?? !1)}`,\n            ...r\n        },\n        onMouseEnter: ()=>{\n            c(!0);\n        },\n        onMouseLeave: ()=>{\n            c(!1);\n        }\n    }, m({\n        resizing: o\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: \"50%\",\n            width: \"10px\",\n            height: \"26px\",\n            transform: \"translateY(-13px) translateX(-5px)\",\n            cursor: \"col-resize\",\n            transition: \"opacity ease-in-out 0.2s\",\n            pointerEvents: n || o ? \"auto\" : \"none\",\n            opacity: n || o ? 1 : 0\n        },\n        onMouseDown: (t)=>{\n            l(\"lx\"), a({\n                x: t.clientX,\n                y: t.clientY\n            }), t.preventDefault();\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(H, null)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            right: 0,\n            top: \"50%\",\n            width: \"10px\",\n            height: \"26px\",\n            transform: \"translateY(-13px) translateX(5px)\",\n            cursor: \"col-resize\",\n            transition: \"opacity ease-in-out 0.2s\",\n            pointerEvents: n || o ? \"auto\" : \"none\",\n            opacity: n || o ? 1 : 0\n        },\n        onMouseDown: (t)=>{\n            l(\"rx\"), a({\n                x: t.clientX,\n                y: t.clientY\n            }), t.preventDefault();\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(H, null)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: \"50%\",\n            top: 0,\n            width: \"26px\",\n            height: \"10px\",\n            transform: \"translateY(-5px) translateX(-13px)\",\n            cursor: \"row-resize\",\n            transition: \"opacity ease-in-out 0.2s\",\n            pointerEvents: n || o ? \"auto\" : \"none\",\n            opacity: n || o ? 1 : 0\n        },\n        onMouseDown: (t)=>{\n            l(\"ty\"), a({\n                x: t.clientX,\n                y: t.clientY\n            }), t.preventDefault();\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(H, {\n        style: {\n            transform: \"rotate(90deg)\",\n            transformOrigin: \"13px 13px\"\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: \"50%\",\n            bottom: 0,\n            width: \"26px\",\n            height: \"10px\",\n            transform: \"translateY(5px) translateX(-13px)\",\n            cursor: \"row-resize\",\n            transition: \"opacity ease-in-out 0.2s\",\n            pointerEvents: n || o ? \"auto\" : \"none\",\n            opacity: n || o ? 1 : 0\n        },\n        onMouseDown: (t)=>{\n            l(\"by\"), a({\n                x: t.clientX,\n                y: t.clientY\n            }), t.preventDefault();\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(H, {\n        style: {\n            transform: \"rotate(90deg)\",\n            transformOrigin: \"13px 13px\"\n        }\n    }))));\n};\n\nvar de =  false ? 0 : ()=>{\n    let [e, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [m, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [c] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"bottom\"), { devtoolsUrl: o, ws: l } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.DevToolsContext), [d, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), [r, p] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), t = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i)=>{\n        l && (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.send)(l, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR, {\n            name: i\n        }), n(!0);\n    }, [\n        l\n    ]), h = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        n(!1);\n    }, []);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        r && n(!1);\n    }, [\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n         false && 0;\n    }, []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (e) {\n            a(window.innerWidth);\n            let i = ()=>{\n                a(window.innerWidth);\n            };\n            return window.addEventListener(\"resize\", i), ()=>{\n                window.removeEventListener(\"resize\", i);\n            };\n        }\n        return ()=>{};\n    }, [\n        e\n    ]), e ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            left: `${Math.round(d / 2)}px`,\n            transform: \"translateX(-50%)\",\n            bottom: 0,\n            zIndex: 99999\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(G, {\n        onClick: ()=>{\n            n((i)=>!i), p(!1);\n        },\n        onSelectorHighlight: t,\n        selectorActive: r,\n        setSelectorActive: p\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Y, {\n        visible: m,\n        placement: c\n    }, ({ resizing: i })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"iframe\", {\n            allow: \"clipboard-write;\",\n            src: o,\n            srcDoc: o ? void 0 : `\n                            <html style=\"height:100%;padding:0;margin:0;\">\n                                <body style=\"display:flex;justify-content:center;height:100%;padding:24px;margin:0;align-items:center;box-sizing:border-box;\">\n                                    <h1 style=\"font-family:ui-monospace,monospace;color:#CFD7E2;text-align:center;\">Could not connect to the devtools server</h1>\n                                </body>\n                            </html>\n                        `,\n            style: {\n                width: \"100%\",\n                height: \"100%\",\n                border: \"none\",\n                borderRadius: \"7px\",\n                pointerEvents: i ? \"none\" : \"auto\",\n                background: \"#14141F\"\n            }\n        }))) : null;\n};\n\n\nvar ue =  false ? 0 : ({ children: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.DevToolsContextProvider, null, e);\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/kbar/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/kbar/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KBAR_LISTBOX: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBAR_LISTBOX),\n/* harmony export */   KBarAnimator: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarAnimator),\n/* harmony export */   KBarContext: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarContext),\n/* harmony export */   KBarPortal: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPortal),\n/* harmony export */   KBarPositioner: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPositioner),\n/* harmony export */   KBarProvider: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarProvider),\n/* harmony export */   KBarResults: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarResults),\n/* harmony export */   KBarSearch: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarSearch),\n/* harmony export */   NO_GROUP: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.NO_GROUP),\n/* harmony export */   Priority: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.Priority),\n/* harmony export */   RefineKbar: () => (/* binding */ O),\n/* harmony export */   RefineKbarPropsContext: () => (/* binding */ w),\n/* harmony export */   RefineKbarProvider: () => (/* binding */ ge),\n/* harmony export */   VisualState: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.VisualState),\n/* harmony export */   createAction: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.createAction),\n/* harmony export */   getListboxItemId: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.getListboxItemId),\n/* harmony export */   useKBar: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useKBar),\n/* harmony export */   useMatches: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useMatches),\n/* harmony export */   useRefineKbar: () => (/* binding */ I),\n/* harmony export */   useRegisterActions: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useRegisterActions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var kbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kbar */ \"(ssr)/./node_modules/kbar/lib/index.js\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ KBAR_LISTBOX,KBarAnimator,KBarContext,KBarPortal,KBarPositioner,KBarProvider,KBarResults,KBarSearch,NO_GROUP,Priority,RefineKbar,RefineKbarPropsContext,RefineKbarProvider,VisualState,createAction,getListboxItemId,useKBar,useMatches,useRefineKbar,useRegisterActions auto */ var nt = Object.defineProperty;\nvar r = (n, e)=>nt(n, \"name\", {\n        value: e,\n        configurable: !0\n    });\n\n\n\n\n\n\nvar g = r((n)=>n.replace(/\\w\\S*/g, (e)=>e.charAt(0).toUpperCase() + e.slice(1).toLowerCase()), \"capitalize\");\n\nvar I = r(()=>{\n    let n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { resource: e, resources: p, id: c, action: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(), l = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), d = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetToPath)(), b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)(), { mutate: H } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useDelete)(), { push: K, list: Pt, create: wt, show: Tt, edit: kt } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)(), V = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)(), $ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarContext), { can: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCanWithoutCache)(), [B, j] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        r(async ()=>await Promise.all(q().flatMap((i)=>F(i))), \"preaparedActions\")().then((i)=>j(i.flatMap((m)=>m)));\n    }, [\n        p,\n        c,\n        e,\n        y\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        B.length === 0 && $.query.setVisualState(kbar__WEBPACK_IMPORTED_MODULE_1__.VisualState.hidden);\n    }, [\n        B\n    ]);\n    let q = r(()=>{\n        let t = [\n            ...p\n        ], i = t == null ? void 0 : t.findIndex((m)=>(m.identifier ?? (m == null ? void 0 : m.name)) === ((e == null ? void 0 : e.identifier) ?? (e == null ? void 0 : e.name)));\n        if (i > 0) {\n            let m = t[i];\n            t.splice(i, 1), t.splice(0, 0, m);\n        }\n        return t;\n    }, \"moveActionToFirst\"), F = r(async (t)=>{\n        var L, E, z, N, M, U;\n        let { name: i, label: m, list: _, create: T, canCreate: Q, canEdit: X, canShow: J, icon: Y, show: k, canDelete: Z, edit: D, route: Dt } = t, tt = ((L = t == null ? void 0 : t.meta) == null ? void 0 : L.label) ?? ((E = t == null ? void 0 : t.options) == null ? void 0 : E.label) ?? m, h = ((z = t == null ? void 0 : t.meta) == null ? void 0 : z.icon) ?? ((N = t == null ? void 0 : t.options) == null ? void 0 : N.icon) ?? Y, et = ((M = t == null ? void 0 : t.meta) == null ? void 0 : M.canDelete) ?? ((U = t == null ? void 0 : t.options) == null ? void 0 : U.canDelete) ?? Z, A = tt ?? n(`${t.name}.${t.name}`, V(t.name, \"plural\")), x = [];\n        if (_ && (e !== void 0 && (e == null ? void 0 : e.name) !== i || y !== void 0 && (e == null ? void 0 : e.name) === i)) {\n            let { can: f } = await (a == null ? void 0 : a({\n                resource: i,\n                action: \"list\",\n                params: {\n                    id: c,\n                    resource: t\n                }\n            })) || {\n                can: !0\n            };\n            f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                name: n(\"actions.list\", g(\"list\")),\n                section: A,\n                icon: h,\n                perform: ()=>{\n                    let o = d({\n                        resource: t,\n                        action: \"list\",\n                        legacy: l === \"legacy\"\n                    });\n                    o && (l === \"legacy\" ? K(o) : b({\n                        to: o\n                    }));\n                }\n            }));\n        }\n        if ((Q || T) && T && (y !== \"create\" || (e == null ? void 0 : e.name) !== i)) {\n            let { can: f } = await (a == null ? void 0 : a({\n                resource: i,\n                action: \"create\",\n                params: {\n                    resource: t\n                }\n            })) || {\n                can: !0\n            };\n            f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                name: n(\"actions.create\", g(\"create\")),\n                section: A,\n                icon: h,\n                keywords: \"new\",\n                perform: ()=>{\n                    let o = d({\n                        resource: t,\n                        action: \"create\",\n                        legacy: l === \"legacy\"\n                    });\n                    o && (l === \"legacy\" ? K(o) : b({\n                        to: o\n                    }));\n                }\n            }));\n        }\n        if ((e == null ? void 0 : e.name) === i && c) {\n            if ((J || k) && k && y !== \"show\") {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"show\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"actions.show\", g(\"show\")),\n                    section: A,\n                    icon: h,\n                    perform: ()=>{\n                        let o = d({\n                            resource: t,\n                            action: \"show\",\n                            legacy: l === \"legacy\",\n                            meta: {\n                                id: c\n                            }\n                        });\n                        o && (l === \"legacy\" ? K(o) : b({\n                            to: o\n                        }));\n                    }\n                }));\n            }\n            if ((X || D) && D && y !== \"edit\") {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"edit\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"actions.edit\", g(\"edit\")),\n                    section: A,\n                    icon: h,\n                    perform: ()=>{\n                        let o = d({\n                            resource: t,\n                            action: \"edit\",\n                            legacy: l === \"legacy\",\n                            meta: {\n                                id: c\n                            }\n                        });\n                        o && (l === \"legacy\" ? K(o) : b({\n                            to: o\n                        }));\n                    }\n                }));\n            }\n            if (et) {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"delete\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push({\n                    id: \"delete\",\n                    name: n(\"actions.delete\", g(\"delete\")),\n                    section: A,\n                    icon: h\n                }, (0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"buttons.delete\", g(\"delete\")),\n                    section: n(\"buttons.confirm\", \"Are you sure?\"),\n                    parent: \"delete\",\n                    perform: ()=>{\n                        H({\n                            resource: t.name,\n                            id: c\n                        }, {\n                            onSuccess: ()=>{\n                                let o = d({\n                                    resource: t,\n                                    action: \"list\",\n                                    legacy: l === \"legacy\"\n                                });\n                                o && (l === \"legacy\" ? K(o) : b({\n                                    to: o\n                                }));\n                            }\n                        });\n                    }\n                }), (0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"buttons.cancel\", \"Cancel\"),\n                    parent: \"delete\",\n                    perform: ()=>null\n                }));\n            }\n        }\n        return x;\n    }, \"createActionWithResource\");\n    (0,kbar__WEBPACK_IMPORTED_MODULE_1__.useRegisterActions)(B, [\n        B\n    ]);\n}, \"useRefineKbar\");\n\n\nvar S = r(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPortal, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPositioner, {\n        style: {\n            opacity: 1,\n            transition: \"background 0.35s cubic-bezier(0.4, 0, 0.2, 1) 0s\",\n            backdropFilter: \"saturate(180%) blur(1px)\",\n            background: \"rgba(0, 0, 0, 0.1)\",\n            zIndex: \"9999\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarAnimator, {\n        style: {\n            maxWidth: \"600px\",\n            width: \"100%\",\n            background: \"white\",\n            color: \"black\",\n            borderRadius: \"8px\",\n            overflow: \"hidden\",\n            boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarSearch, {\n        style: {\n            padding: \"12px 16px\",\n            fontSize: \"16px\",\n            width: \"100%\",\n            boxSizing: \"border-box\",\n            outline: \"none\",\n            border: \"none\",\n            background: \"rgb(252 252 252)\",\n            color: \"black\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(v, null)))), \"CommandBar\");\n\n\nvar Bt = {\n    padding: \"8px 16px\",\n    fontSize: \"14px\",\n    textTransform: \"uppercase\",\n    fontWeight: \"bold\",\n    opacity: .5\n}, v = r(()=>{\n    let { results: n, rootActionId: e } = (0,kbar__WEBPACK_IMPORTED_MODULE_1__.useMatches)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarResults, {\n        items: n,\n        onRender: ({ item: p, active: c })=>typeof p == \"string\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                style: Bt\n            }, p) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(C, {\n                action: p,\n                active: c,\n                currentRootActionId: e\n            })\n    });\n}, \"RenderResults\");\n\nvar C = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ action: n, active: e, currentRootActionId: p }, c)=>{\n    var l;\n    let y = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!p) return n.ancestors;\n        let d = n.ancestors.findIndex((b)=>b.id === p);\n        return n.ancestors.slice(d + 1);\n    }, [\n        n.ancestors,\n        p\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: c,\n        style: {\n            padding: \"12px 16px\",\n            background: e ? \"rgba(0 0 0 / 0.05)\" : \"transparent\",\n            borderLeft: `2px solid ${e ? \"rgb(28 28 29)\" : \"transparent\"}`,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            cursor: \"pointer\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            gap: \"8px\",\n            alignItems: \"center\",\n            fontSize: 14\n        }\n    }, n.icon && n.icon, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, y.length > 0 && y.map((d)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            key: d.id\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            style: {\n                opacity: .5,\n                marginRight: 8\n            }\n        }, d.name), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            style: {\n                marginRight: 8\n            }\n        }, \"›\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: n.name.toLocaleUpperCase() === \"DELETE\" ? \"red\" : \"black\"\n        }\n    }, n.name)), n.subtitle && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: 12\n        }\n    }, n.subtitle))), (l = n.shortcut) != null && l.length ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"aria-hidden\": !0,\n        style: {\n            display: \"grid\",\n            gridAutoFlow: \"column\",\n            gap: \"4px\"\n        }\n    }, n.shortcut.map((d)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"kbd\", {\n            key: d,\n            style: {\n                padding: \"4px 6px\",\n                background: \"rgba(0 0 0 / .1)\",\n                borderRadius: \"4px\",\n                fontSize: 14\n            }\n        }, d))) : null);\n});\nC.displayName = \"ResultItem\";\n\nvar O = r(({ commandBarProps: n })=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(w);\n    I();\n    let p = {\n        ...e,\n        ...n\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(S, {\n        ...p\n    });\n}, \"RefineKbar\");\nvar w = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), ge = r(({ children: n, commandBarProps: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(w.Provider, {\n        value: e ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarProvider, null, n)), \"RefineKbarProvider\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/kbar/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/mui/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@refinedev/mui/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthPage: () => (/* binding */ AuthPage),\n/* harmony export */   AutoSaveIndicator: () => (/* binding */ AutoSaveIndicator),\n/* harmony export */   BooleanField: () => (/* binding */ BooleanField),\n/* harmony export */   Breadcrumb: () => (/* binding */ Breadcrumb),\n/* harmony export */   CircularDeterminate: () => (/* binding */ CircularDeterminate),\n/* harmony export */   CloneButton: () => (/* binding */ CloneButton),\n/* harmony export */   Create: () => (/* binding */ Create),\n/* harmony export */   CreateButton: () => (/* binding */ CreateButton),\n/* harmony export */   DarkTheme: () => (/* binding */ DarkTheme),\n/* harmony export */   DateField: () => (/* binding */ DateField),\n/* harmony export */   DeleteButton: () => (/* binding */ DeleteButton),\n/* harmony export */   Edit: () => (/* binding */ Edit),\n/* harmony export */   EditButton: () => (/* binding */ EditButton),\n/* harmony export */   EmailField: () => (/* binding */ EmailField),\n/* harmony export */   ErrorComponent: () => (/* binding */ ErrorComponent),\n/* harmony export */   ExportButton: () => (/* binding */ ExportButton),\n/* harmony export */   FileField: () => (/* binding */ FileField),\n/* harmony export */   HamburgerMenu: () => (/* binding */ HamburgerMenu),\n/* harmony export */   Header: () => (/* binding */ Header),\n/* harmony export */   ImportButton: () => (/* binding */ ImportButton),\n/* harmony export */   Layout: () => (/* binding */ Layout),\n/* harmony export */   LightTheme: () => (/* binding */ LightTheme),\n/* harmony export */   List: () => (/* binding */ List4),\n/* harmony export */   ListButton: () => (/* binding */ ListButton),\n/* harmony export */   LoginPage: () => (/* binding */ LoginPage),\n/* harmony export */   MarkdownField: () => (/* binding */ MarkdownField),\n/* harmony export */   NotistackSnackbarContent: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarContent),\n/* harmony export */   NumberField: () => (/* binding */ NumberField),\n/* harmony export */   ReadyPage: () => (/* binding */ ReadyPage),\n/* harmony export */   RefineSnackbarProvider: () => (/* binding */ RefineSnackbarProvider),\n/* harmony export */   RefineThemes: () => (/* binding */ RefineThemes),\n/* harmony export */   RefreshButton: () => (/* binding */ RefreshButton),\n/* harmony export */   SaveButton: () => (/* binding */ SaveButton),\n/* harmony export */   Show: () => (/* binding */ Show),\n/* harmony export */   ShowButton: () => (/* binding */ ShowButton),\n/* harmony export */   Sider: () => (/* binding */ Sider),\n/* harmony export */   SnackbarProvider: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarProvider),\n/* harmony export */   TagField: () => (/* binding */ TagField),\n/* harmony export */   TextFieldComponent: () => (/* binding */ TextField6),\n/* harmony export */   ThemedHeader: () => (/* binding */ ThemedHeader),\n/* harmony export */   ThemedHeaderV2: () => (/* binding */ ThemedHeaderV2),\n/* harmony export */   ThemedLayout: () => (/* binding */ ThemedLayout),\n/* harmony export */   ThemedLayoutContext: () => (/* binding */ ThemedLayoutContext),\n/* harmony export */   ThemedLayoutContextProvider: () => (/* binding */ ThemedLayoutContextProvider),\n/* harmony export */   ThemedLayoutV2: () => (/* binding */ ThemedLayoutV2),\n/* harmony export */   ThemedSider: () => (/* binding */ ThemedSider),\n/* harmony export */   ThemedSiderV2: () => (/* binding */ ThemedSiderV2),\n/* harmony export */   ThemedTitle: () => (/* binding */ ThemedTitle),\n/* harmony export */   ThemedTitleV2: () => (/* binding */ ThemedTitleV2),\n/* harmony export */   Title: () => (/* binding */ Title),\n/* harmony export */   UrlField: () => (/* binding */ UrlField),\n/* harmony export */   WelcomePage: () => (/* binding */ WelcomePage),\n/* harmony export */   notificationProvider: () => (/* binding */ notificationProvider),\n/* harmony export */   useAutocomplete: () => (/* binding */ useAutocomplete),\n/* harmony export */   useDataGrid: () => (/* binding */ useDataGrid),\n/* harmony export */   useNotificationProvider: () => (/* binding */ useNotificationProvider),\n/* harmony export */   useSiderVisible: () => (/* binding */ useSiderVisible),\n/* harmony export */   useSnackbar: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.useSnackbar),\n/* harmony export */   useThemedLayoutContext: () => (/* binding */ useThemedLayoutContext),\n/* harmony export */   withSnackbar: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.withSnackbar)\n/* harmony export */ });\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! notistack */ \"(ssr)/./node_modules/notistack/dist/notistack.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _mui_material_Box__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @mui/material/Box */ \"(ssr)/./node_modules/@mui/material/Box/Box.js\");\n/* harmony import */ var _mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @mui/material/Drawer */ \"(ssr)/./node_modules/@mui/material/Drawer/Drawer.js\");\n/* harmony import */ var _mui_material_List__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @mui/material/List */ \"(ssr)/./node_modules/@mui/material/List/List.js\");\n/* harmony import */ var _mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/ListItemButton */ \"(ssr)/./node_modules/@mui/material/ListItemButton/ListItemButton.js\");\n/* harmony import */ var _mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material/ListItemIcon */ \"(ssr)/./node_modules/@mui/material/ListItemIcon/ListItemIcon.js\");\n/* harmony import */ var _mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material/ListItemText */ \"(ssr)/./node_modules/@mui/material/ListItemText/ListItemText.js\");\n/* harmony import */ var _mui_material_Collapse__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @mui/material/Collapse */ \"(ssr)/./node_modules/@mui/material/Collapse/Collapse.js\");\n/* harmony import */ var _mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mui/material/Tooltip */ \"(ssr)/./node_modules/@mui/material/Tooltip/Tooltip.js\");\n/* harmony import */ var _mui_material_Button__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @mui/material/Button */ \"(ssr)/./node_modules/@mui/material/Button/Button.js\");\n/* harmony import */ var _mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @mui/material/IconButton */ \"(ssr)/./node_modules/@mui/material/IconButton/IconButton.js\");\n/* harmony import */ var _mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/icons-material/esm/ListOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ListOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @mui/icons-material/esm/Logout */ \"(ssr)/./node_modules/@mui/icons-material/esm/Logout.js\");\n/* harmony import */ var _mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/icons-material/esm/ExpandLess */ \"(ssr)/./node_modules/@mui/icons-material/esm/ExpandLess.js\");\n/* harmony import */ var _mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @mui/icons-material/esm/ExpandMore */ \"(ssr)/./node_modules/@mui/icons-material/esm/ExpandMore.js\");\n/* harmony import */ var _mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @mui/icons-material/esm/ChevronLeft */ \"(ssr)/./node_modules/@mui/icons-material/esm/ChevronLeft.js\");\n/* harmony import */ var _mui_icons_material_esm_ChevronRight__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @mui/icons-material/esm/ChevronRight */ \"(ssr)/./node_modules/@mui/icons-material/esm/ChevronRight.js\");\n/* harmony import */ var _mui_icons_material_esm_MenuRounded__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @mui/icons-material/esm/MenuRounded */ \"(ssr)/./node_modules/@mui/icons-material/esm/MenuRounded.js\");\n/* harmony import */ var _mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @mui/icons-material/esm/Dashboard */ \"(ssr)/./node_modules/@mui/icons-material/esm/Dashboard.js\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* harmony import */ var _mui_material_AppBar__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @mui/material/AppBar */ \"(ssr)/./node_modules/@mui/material/AppBar/AppBar.js\");\n/* harmony import */ var _mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @mui/material/Stack */ \"(ssr)/./node_modules/@mui/material/Stack/Stack.js\");\n/* harmony import */ var _mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @mui/material/Toolbar */ \"(ssr)/./node_modules/@mui/material/Toolbar/Toolbar.js\");\n/* harmony import */ var _mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @mui/material/Typography */ \"(ssr)/./node_modules/@mui/material/Typography/Typography.js\");\n/* harmony import */ var _mui_material_Avatar__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @mui/material/Avatar */ \"(ssr)/./node_modules/@mui/material/Avatar/Avatar.js\");\n/* harmony import */ var _mui_material_Paper__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @mui/material/Paper */ \"(ssr)/./node_modules/@mui/material/Paper/Paper.js\");\n/* harmony import */ var _mui_icons_material_esm_Menu__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @mui/icons-material/esm/Menu */ \"(ssr)/./node_modules/@mui/icons-material/esm/Menu.js\");\n/* harmony import */ var _mui_material_Link__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @mui/material/Link */ \"(ssr)/./node_modules/@mui/material/Link/Link.js\");\n/* harmony import */ var _mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @mui/material/SvgIcon */ \"(ssr)/./node_modules/@mui/material/SvgIcon/SvgIcon.js\");\n/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! lodash-es/isEqual.js */ \"(ssr)/./node_modules/lodash-es/isEqual.js\");\n/* harmony import */ var lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! lodash-es/unionWith.js */ \"(ssr)/./node_modules/lodash-es/unionWith.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/useTheme.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/system/esm/colorManipulator.js\");\n/* harmony import */ var lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! lodash-es/differenceWith.js */ \"(ssr)/./node_modules/lodash-es/differenceWith.js\");\n/* harmony import */ var _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @mui/x-data-grid */ \"(ssr)/./node_modules/@mui/x-data-grid/models/gridFilterItem.js\");\n/* harmony import */ var _refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @refinedev/react-hook-form */ \"(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs\");\n/* harmony import */ var _mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @mui/material/TextField */ \"(ssr)/./node_modules/@mui/material/TextField/TextField.js\");\n/* harmony import */ var _mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @mui/material/FormControlLabel */ \"(ssr)/./node_modules/@mui/material/FormControlLabel/FormControlLabel.js\");\n/* harmony import */ var _mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @mui/material/Checkbox */ \"(ssr)/./node_modules/@mui/material/Checkbox/Checkbox.js\");\n/* harmony import */ var _mui_material_Container__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @mui/material/Container */ \"(ssr)/./node_modules/@mui/material/Container/Container.js\");\n/* harmony import */ var _mui_material_Card__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @mui/material/Card */ \"(ssr)/./node_modules/@mui/material/Card/Card.js\");\n/* harmony import */ var _mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @mui/material/CardContent */ \"(ssr)/./node_modules/@mui/material/CardContent/CardContent.js\");\n/* harmony import */ var _mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @mui/material/Grid */ \"(ssr)/./node_modules/@mui/material/Grid/Grid.js\");\n/* harmony import */ var _mui_icons_material_esm_Info__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @mui/icons-material/esm/Info */ \"(ssr)/./node_modules/@mui/icons-material/esm/Info.js\");\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! react-hook-form */ \"(ssr)/./node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var _mui_material_Divider__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @mui/material/Divider */ \"(ssr)/./node_modules/@mui/material/Divider/Divider.js\");\n/* harmony import */ var _mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @mui/material/CardHeader */ \"(ssr)/./node_modules/@mui/material/CardHeader/CardHeader.js\");\n/* harmony import */ var _mui_material_CardActions__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @mui/material/CardActions */ \"(ssr)/./node_modules/@mui/material/CardActions/CardActions.js\");\n/* harmony import */ var _mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @mui/icons-material/esm/ArrowBack */ \"(ssr)/./node_modules/@mui/icons-material/esm/ArrowBack.js\");\n/* harmony import */ var _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @refinedev/ui-types */ \"(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs\");\n/* harmony import */ var _mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @mui/icons-material/esm/AddBoxOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/AddBoxOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @mui/icons-material/esm/EditOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/EditOutlined.js\");\n/* harmony import */ var _mui_material_Dialog__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @mui/material/Dialog */ \"(ssr)/./node_modules/@mui/material/Dialog/Dialog.js\");\n/* harmony import */ var _mui_material_DialogActions__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! @mui/material/DialogActions */ \"(ssr)/./node_modules/@mui/material/DialogActions/DialogActions.js\");\n/* harmony import */ var _mui_material_DialogTitle__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @mui/material/DialogTitle */ \"(ssr)/./node_modules/@mui/material/DialogTitle/DialogTitle.js\");\n/* harmony import */ var _mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @mui/lab/LoadingButton */ \"(ssr)/./node_modules/@mui/lab/LoadingButton/LoadingButton.js\");\n/* harmony import */ var _mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @mui/icons-material/esm/DeleteOutline */ \"(ssr)/./node_modules/@mui/icons-material/esm/DeleteOutline.js\");\n/* harmony import */ var _mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! @mui/icons-material/esm/RefreshOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/RefreshOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! @mui/icons-material/esm/VisibilityOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/VisibilityOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! @mui/icons-material/esm/ImportExportOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ImportExportOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @mui/icons-material/esm/SaveOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/SaveOutlined.js\");\n/* harmony import */ var _mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @mui/material/CircularProgress */ \"(ssr)/./node_modules/@mui/material/CircularProgress/CircularProgress.js\");\n/* harmony import */ var _mui_material_Chip__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @mui/material/Chip */ \"(ssr)/./node_modules/@mui/material/Chip/Chip.js\");\n/* harmony import */ var _mui_icons_material_esm_CheckOutlined__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! @mui/icons-material/esm/CheckOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/CheckOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_CloseOutlined__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! @mui/icons-material/esm/CloseOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/CloseOutlined.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! dayjs */ \"(ssr)/./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs_plugin_localizedFormat_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! dayjs/plugin/localizedFormat.js */ \"(ssr)/./node_modules/dayjs/plugin/localizedFormat.js\");\n/* harmony import */ var react_markdown__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! react-markdown */ \"(ssr)/./node_modules/react-markdown/src/react-markdown.js\");\n/* harmony import */ var remark_gfm__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");\n/* harmony import */ var _mui_material_Breadcrumbs__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! @mui/material/Breadcrumbs */ \"(ssr)/./node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js\");\n/* harmony import */ var _mui_icons_material_esm_HomeOutlined__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! @mui/icons-material/esm/HomeOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/HomeOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_MoreHorizOutlined__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! @mui/icons-material/esm/MoreHorizOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/MoreHorizOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_SyncOutlined__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! @mui/icons-material/esm/SyncOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/SyncOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_TaskAltOutlined__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! @mui/icons-material/esm/TaskAltOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/TaskAltOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_ErrorOutlineOutlined__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! @mui/icons-material/esm/ErrorOutlineOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ErrorOutlineOutlined.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/createTheme.js\");\n/* harmony import */ var _mui_icons_material_esm_UndoOutlined__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! @mui/icons-material/esm/UndoOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/UndoOutlined.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/styled.js\");\n/* __next_internal_client_entry_do_not_use__ AuthPage,AutoSaveIndicator,BooleanField,Breadcrumb,CircularDeterminate,CloneButton,Create,CreateButton,DarkTheme,DateField,DeleteButton,Edit,EditButton,EmailField,ErrorComponent,ExportButton,FileField,HamburgerMenu,Header,ImportButton,Layout,LightTheme,List,ListButton,LoginPage,MarkdownField,NotistackSnackbarContent,NumberField,ReadyPage,RefineSnackbarProvider,RefineThemes,RefreshButton,SaveButton,Show,ShowButton,Sider,SnackbarProvider,TagField,TextFieldComponent,ThemedHeader,ThemedHeaderV2,ThemedLayout,ThemedLayoutContext,ThemedLayoutContextProvider,ThemedLayoutV2,ThemedSider,ThemedSiderV2,ThemedTitle,ThemedTitleV2,Title,UrlField,WelcomePage,notificationProvider,useAutocomplete,useDataGrid,useNotificationProvider,useSiderVisible,useSnackbar,useThemedLayoutContext,withSnackbar auto */ var __defProp = Object.defineProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\n// src/index.tsx\n\n// src/components/layout/index.tsx\n\n\n// src/components/layout/sider/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Sider = /* @__PURE__ */ __name(({ Title: TitleFromProps, render, meta })=>{\n    const [collapsed, setCollapsed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [opened, setOpened] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const drawerWidth = /* @__PURE__ */ __name(()=>{\n        if (collapsed) return 64;\n        return 200;\n    }, \"drawerWidth\");\n    const t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { warnWhen, setWarnWhen } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)();\n    const { menuItems, selectedKey, defaultOpenKeys } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta\n    });\n    const isExistAuthentication = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)();\n    const TitleFromContext = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: mutateLogout } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        setOpen((previous)=>{\n            const previousKeys = Object.keys(previous);\n            const previousOpenKeys = previousKeys.filter((key)=>previous[key]);\n            const uniqueKeys = /* @__PURE__ */ new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(Array.from(uniqueKeys.values()).map((key)=>[\n                    key,\n                    true\n                ]));\n            return uniqueKeysRecord;\n        });\n    }, [\n        defaultOpenKeys\n    ]);\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? Title;\n    const handleClick = /* @__PURE__ */ __name((key)=>{\n        setOpen({\n            ...open,\n            [key]: !open[key]\n        });\n    }, \"handleClick\");\n    const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2)=>{\n        return tree.map((item)=>{\n            const { icon, label, route, name, children, parentName, meta: meta2, options } = item;\n            const isOpen = open[item.key || \"\"] || false;\n            const isSelected = item.key === selectedKey2;\n            const isNested = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);\n            if (children.length > 0) {\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                    key: item.key,\n                    resource: name.toLowerCase(),\n                    action: \"list\",\n                    params: {\n                        resource: item\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    key: item.key\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    title: label ?? name,\n                    placement: \"right\",\n                    disableHoverListener: !collapsed,\n                    arrow: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    onClick: ()=>{\n                        if (collapsed) {\n                            setCollapsed(false);\n                            if (!isOpen) {\n                                handleClick(item.key || \"\");\n                            }\n                        } else {\n                            handleClick(item.key || \"\");\n                        }\n                    },\n                    sx: {\n                        pl: isNested ? 4 : 2,\n                        justifyContent: \"center\",\n                        \"&.Mui-selected\": {\n                            \"&:hover\": {\n                                backgroundColor: \"transparent\"\n                            },\n                            backgroundColor: \"transparent\"\n                        }\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    sx: {\n                        justifyContent: \"center\",\n                        minWidth: 36,\n                        color: \"secondary.contrastText\"\n                    }\n                }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    primary: label,\n                    primaryTypographyProps: {\n                        noWrap: true,\n                        fontSize: \"14px\",\n                        fontWeight: isSelected ? \"bold\" : \"normal\"\n                    }\n                }), !collapsed && (isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_8__[\"default\"], null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_9__[\"default\"], null)))), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    in: open[item.key || \"\"],\n                    timeout: \"auto\",\n                    unmountOnExit: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    component: \"div\",\n                    disablePadding: true\n                }, renderTreeView(children, selectedKey2)))));\n            }\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: item.key,\n                resource: name.toLowerCase(),\n                action: \"list\",\n                params: {\n                    resource: item\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                title: label ?? name,\n                placement: \"right\",\n                disableHoverListener: !collapsed,\n                arrow: true\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                component: ActiveLink,\n                to: route,\n                selected: isSelected,\n                onClick: ()=>{\n                    setOpened(false);\n                },\n                sx: {\n                    pl: isNested ? 4 : 2,\n                    py: isNested ? 1.25 : 1,\n                    \"&.Mui-selected\": {\n                        \"&:hover\": {\n                            backgroundColor: \"transparent\"\n                        },\n                        backgroundColor: \"transparent\"\n                    },\n                    justifyContent: \"center\"\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                sx: {\n                    justifyContent: \"center\",\n                    minWidth: 36,\n                    color: \"secondary.contrastText\"\n                }\n            }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                primary: label,\n                primaryTypographyProps: {\n                    noWrap: true,\n                    fontSize: \"14px\",\n                    fontWeight: isSelected ? \"bold\" : \"normal\"\n                }\n            }))));\n        });\n    }, \"renderTreeView\");\n    const dashboard = hasDashboard ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n        resource: \"dashboard\",\n        action: \"list\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: translate(\"dashboard.title\", \"Dashboard\"),\n        placement: \"right\",\n        disableHoverListener: !collapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        component: ActiveLink,\n        to: \"/\",\n        selected: selectedKey === \"/\",\n        onClick: ()=>{\n            setOpened(false);\n        },\n        sx: {\n            pl: 2,\n            py: 1,\n            \"&.Mui-selected\": {\n                \"&:hover\": {\n                    backgroundColor: \"transparent\"\n                },\n                backgroundColor: \"transparent\"\n            },\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: 36,\n            color: \"secondary.contrastText\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: translate(\"dashboard.title\", \"Dashboard\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\",\n            fontWeight: selectedKey === \"/\" ? \"bold\" : \"normal\"\n        }\n    })))) : null;\n    const handleLogout = /* @__PURE__ */ __name(()=>{\n        if (warnWhen) {\n            const confirm = window.confirm(translate(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"));\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    }, \"handleLogout\");\n    const logout = isExistAuthentication && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: t(\"buttons.logout\", \"Logout\"),\n        placement: \"right\",\n        disableHoverListener: !collapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        key: \"logout\",\n        onClick: handleLogout,\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: 36,\n            color: \"secondary.contrastText\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: t(\"buttons.logout\", \"Logout\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })));\n    const items = renderTreeView(menuItems, selectedKey);\n    const renderSider = /* @__PURE__ */ __name(()=>{\n        if (render) {\n            return render({\n                dashboard,\n                logout,\n                items,\n                collapsed\n            });\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, dashboard, items, logout);\n    }, \"renderSider\");\n    const drawer = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        disablePadding: true,\n        sx: {\n            mt: 1,\n            color: \"secondary.contrastText\"\n        }\n    }, renderSider());\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: {\n                xs: drawerWidth()\n            },\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            transition: \"width 0.3s ease\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"nav\",\n        sx: {\n            position: \"fixed\",\n            zIndex: 1101,\n            width: {\n                sm: drawerWidth()\n            },\n            display: \"flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"temporary\",\n        open: opened,\n        onClose: ()=>setOpened(false),\n        ModalProps: {\n            keepMounted: true\n        },\n        sx: {\n            display: {\n                sm: \"block\",\n                md: \"none\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: 256,\n                bgcolor: \"secondary.main\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: false\n    })), drawer), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"permanent\",\n        PaperProps: {\n            elevation: 1\n        },\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: drawerWidth,\n                bgcolor: \"secondary.main\",\n                overflow: \"hidden\",\n                transition: \"width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms\"\n            }\n        },\n        open: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            flexGrow: 1,\n            overflowX: \"hidden\",\n            overflowY: \"auto\"\n        }\n    }, drawer), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        sx: {\n            background: \"rgba(0,0,0,.5)\",\n            color: \"secondary.contrastText\",\n            textAlign: \"center\",\n            borderRadius: 0,\n            borderTop: \"1px solid #ffffff1a\"\n        },\n        fullWidth: true,\n        size: \"large\",\n        onClick: ()=>setCollapsed((prev)=>!prev)\n    }, collapsed ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronRight__WEBPACK_IMPORTED_MODULE_17__[\"default\"], null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            display: {\n                xs: \"block\",\n                md: \"none\"\n            },\n            position: \"fixed\",\n            top: \"64px\",\n            left: \"0px\",\n            borderRadius: \"0 6px 6px 0\",\n            bgcolor: \"secondary.main\",\n            zIndex: 1199,\n            width: \"36px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        sx: {\n            color: \"#fff\",\n            width: \"36px\"\n        },\n        onClick: ()=>setOpened((prev)=>!prev)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_MenuRounded__WEBPACK_IMPORTED_MODULE_20__[\"default\"], null)))));\n}, \"Sider\");\n// src/components/layout/header/index.tsx\n\n\n\n\n\n\n\nvar Header = /* @__PURE__ */ __name(()=>{\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { data: user } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const shouldRenderHeader = user && (user.name || user.avatar);\n    return shouldRenderHeader ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_AppBar__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n        color: \"default\",\n        position: \"sticky\",\n        elevation: 1\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_22__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        width: \"100%\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        gap: \"16px\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"subtitle2\"\n    }, user == null ? void 0 : user.name), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Avatar__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n        src: user == null ? void 0 : user.avatar,\n        alt: user == null ? void 0 : user.name\n    }))))) : null;\n}, \"Header\");\n// src/components/layout/index.tsx\nvar Layout = /* @__PURE__ */ __name(({ Sider: Sider2, Header: Header2, Title: Title2, Footer, OffLayoutArea, children })=>{\n    const SiderToRender = Sider2 ?? Sider;\n    const HeaderToRender = Header2 ?? Header;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SiderToRender, {\n        Title: Title2\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flex: 1,\n            minHeight: \"100vh\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HeaderToRender, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"main\",\n        sx: {\n            p: {\n                xs: 1,\n                md: 2,\n                lg: 3\n            },\n            flexGrow: 1,\n            bgcolor: (theme)=>theme.palette.background.default\n        }\n    }, children), Footer && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Footer, null)), OffLayoutArea && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(OffLayoutArea, null));\n}, \"Layout\");\n// src/components/layout/title/index.tsx\n\n\n\nvar Title = /* @__PURE__ */ __name(({ collapsed })=>{\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        fullWidth: true,\n        variant: \"text\",\n        disableRipple: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ActiveLink, {\n        to: \"/\"\n    }, collapsed ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine-mini.svg\",\n        alt: \"Refine\",\n        width: \"28px\",\n        style: {\n            maxHeight: \"38px\"\n        }\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine\",\n        width: \"140px\"\n    })));\n}, \"Title\");\n// src/components/themedLayout/index.tsx\n\n\n// src/components/themedLayout/sider/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ThemedSider = /* @__PURE__ */ __name(({ Title: TitleFromProps, render, meta, isSiderOpen, onToggleSiderClick })=>{\n    const [opened, setOpened] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const drawerWidth = /* @__PURE__ */ __name(()=>{\n        if (isSiderOpen) return 240;\n        return 56;\n    }, \"drawerWidth\");\n    const t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { menuItems, selectedKey, defaultOpenKeys } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta\n    });\n    const isExistAuthentication = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)();\n    const TitleFromContext = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { warnWhen, setWarnWhen } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)();\n    const { mutate: mutateLogout } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        setOpen((previous)=>{\n            const previousKeys = Object.keys(previous);\n            const previousOpenKeys = previousKeys.filter((key)=>previous[key]);\n            const uniqueKeys = /* @__PURE__ */ new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(Array.from(uniqueKeys.values()).map((key)=>[\n                    key,\n                    true\n                ]));\n            return uniqueKeysRecord;\n        });\n    }, [\n        defaultOpenKeys\n    ]);\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitle;\n    const handleClick = /* @__PURE__ */ __name((key)=>{\n        setOpen({\n            ...open,\n            [key]: !open[key]\n        });\n    }, \"handleClick\");\n    const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2)=>{\n        return tree.map((item)=>{\n            const { icon, label, route, name, children, parentName, meta: meta2, options } = item;\n            const isOpen = open[item.key || \"\"] || false;\n            const isSelected = item.key === selectedKey2;\n            const isNested = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);\n            if (children.length > 0) {\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                    key: item.key,\n                    resource: name.toLowerCase(),\n                    action: \"list\",\n                    params: {\n                        resource: item\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    key: item.key\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    title: label ?? name,\n                    placement: \"right\",\n                    disableHoverListener: isSiderOpen,\n                    arrow: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    onClick: ()=>{\n                        if (!isSiderOpen) {\n                            onToggleSiderClick == null ? void 0 : onToggleSiderClick(true);\n                            if (!isOpen) {\n                                handleClick(item.key || \"\");\n                            }\n                        } else {\n                            handleClick(item.key || \"\");\n                        }\n                    },\n                    sx: {\n                        pl: isNested ? 4 : 2,\n                        justifyContent: \"center\",\n                        marginTop: \"8px\"\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    sx: {\n                        justifyContent: \"center\",\n                        minWidth: \"24px\",\n                        transition: \"margin-right 0.3s\",\n                        marginRight: isSiderOpen ? \"12px\" : \"0px\",\n                        color: \"currentColor\"\n                    }\n                }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    primary: label,\n                    primaryTypographyProps: {\n                        noWrap: true,\n                        fontSize: \"14px\"\n                    }\n                }), isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }))), isSiderOpen && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    in: open[item.key || \"\"],\n                    timeout: \"auto\",\n                    unmountOnExit: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    component: \"div\",\n                    disablePadding: true\n                }, renderTreeView(children, selectedKey2)))));\n            }\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: item.key,\n                resource: name.toLowerCase(),\n                action: \"list\",\n                params: {\n                    resource: item\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                title: label ?? name,\n                placement: \"right\",\n                disableHoverListener: isSiderOpen,\n                arrow: true\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                component: ActiveLink,\n                to: route,\n                selected: isSelected,\n                onClick: ()=>{\n                    setOpened(false);\n                },\n                sx: {\n                    pl: isNested ? 4 : 2,\n                    py: isNested ? 1.25 : 1,\n                    justifyContent: \"center\",\n                    color: isSelected ? \"primary.main\" : \"text.primary\"\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                sx: {\n                    justifyContent: \"center\",\n                    transition: \"margin-right 0.3s\",\n                    marginRight: isSiderOpen ? \"12px\" : \"0px\",\n                    minWidth: \"24px\",\n                    color: \"currentColor\"\n                }\n            }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                primary: label,\n                primaryTypographyProps: {\n                    noWrap: true,\n                    fontSize: \"14px\"\n                }\n            }))));\n        });\n    }, \"renderTreeView\");\n    const dashboard = hasDashboard ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n        resource: \"dashboard\",\n        action: \"list\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: translate(\"dashboard.title\", \"Dashboard\"),\n        placement: \"right\",\n        disableHoverListener: isSiderOpen,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        component: ActiveLink,\n        to: \"/\",\n        selected: selectedKey === \"/\",\n        onClick: ()=>{\n            setOpened(false);\n        },\n        sx: {\n            pl: 2,\n            py: 1,\n            justifyContent: \"center\",\n            color: selectedKey === \"/\" ? \"primary.main\" : \"text.primary\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: isSiderOpen ? \"12px\" : \"0px\",\n            color: \"currentColor\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: translate(\"dashboard.title\", \"Dashboard\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })))) : null;\n    const handleLogout = /* @__PURE__ */ __name(()=>{\n        if (warnWhen) {\n            const confirm = window.confirm(t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"));\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    }, \"handleLogout\");\n    const logout = isExistAuthentication && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: t(\"buttons.logout\", \"Logout\"),\n        placement: \"right\",\n        disableHoverListener: isSiderOpen,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        key: \"logout\",\n        onClick: ()=>handleLogout(),\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: isSiderOpen ? \"12px\" : \"0px\",\n            marginLeft: \"2px\",\n            color: \"currentColor\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: t(\"buttons.logout\", \"Logout\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })));\n    const items = renderTreeView(menuItems, selectedKey);\n    const renderSider = /* @__PURE__ */ __name(()=>{\n        if (render) {\n            return render({\n                dashboard,\n                logout,\n                items,\n                collapsed: !isSiderOpen\n            });\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, dashboard, items, logout);\n    }, \"renderSider\");\n    const drawer = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        disablePadding: true,\n        sx: {\n            flexGrow: 1,\n            paddingTop: \"16px\"\n        }\n    }, renderSider());\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: {\n                xs: drawerWidth()\n            },\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            transition: \"width 0.3s ease\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"nav\",\n        sx: {\n            position: \"fixed\",\n            zIndex: 1101,\n            width: {\n                sm: drawerWidth()\n            },\n            display: \"flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"temporary\",\n        elevation: 2,\n        open: opened,\n        onClose: ()=>setOpened(false),\n        ModalProps: {\n            keepMounted: true\n        },\n        sx: {\n            display: {\n                sm: \"block\",\n                md: \"none\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: drawerWidth()\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            paddingLeft: \"16px\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: false\n    })), drawer)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"permanent\",\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: drawerWidth,\n                overflow: \"hidden\",\n                transition: \"width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms\"\n            }\n        },\n        open: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Paper__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        elevation: 0,\n        sx: {\n            fontSize: \"14px\",\n            width: \"100%\",\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: !isSiderOpen ? \"center\" : \"space-between\",\n            paddingLeft: !isSiderOpen ? 0 : \"16px\",\n            paddingRight: !isSiderOpen ? 0 : \"8px\",\n            variant: \"outlined\",\n            borderRadius: 0,\n            borderBottom: (theme)=>`1px solid ${theme.palette.action.focus}`\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: !isSiderOpen\n    }), isSiderOpen && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        size: \"small\",\n        onClick: ()=>onToggleSiderClick == null ? void 0 : onToggleSiderClick(false)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            flexGrow: 1,\n            overflowX: \"hidden\",\n            overflowY: \"auto\"\n        }\n    }, drawer)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        sx: (theme)=>{\n            const { palette } = theme;\n            const { mode, getContrastText, primary, background } = palette;\n            return {\n                color: mode === \"light\" ? getContrastText(primary.main) : getContrastText(background.paper),\n                display: {\n                    xs: \"flex\",\n                    md: \"none\"\n                },\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                position: \"fixed\",\n                top: \"12px\",\n                left: \"16px\",\n                zIndex: 1199,\n                height: \"36px\",\n                width: \"36px\"\n            };\n        },\n        onClick: ()=>setOpened((prev)=>!prev)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_MenuRounded__WEBPACK_IMPORTED_MODULE_20__[\"default\"], null))));\n}, \"ThemedSider\");\n// src/components/themedLayout/header/index.tsx\n\n\n\n\n\n\n\n\n\nvar ThemedHeader = /* @__PURE__ */ __name(({ isSiderOpen, onToggleSiderClick, toggleSiderIcon: toggleSiderIconFromProps })=>{\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { data: user } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const hasSidebarToggle = Boolean(onToggleSiderClick);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_AppBar__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n        position: \"sticky\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_22__[\"default\"], null, hasSidebarToggle && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        color: \"inherit\",\n        \"aria-label\": \"open drawer\",\n        onClick: ()=>onToggleSiderClick == null ? void 0 : onToggleSiderClick(),\n        edge: \"start\",\n        sx: {\n            mr: 2,\n            display: {\n                xs: \"none\",\n                md: \"flex\"\n            },\n            ...isSiderOpen && {\n                display: \"none\"\n            }\n        }\n    }, (toggleSiderIconFromProps == null ? void 0 : toggleSiderIconFromProps(Boolean(isSiderOpen))) ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Menu__WEBPACK_IMPORTED_MODULE_27__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        width: \"100%\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        gap: \"16px\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            }\n        },\n        variant: \"subtitle2\"\n    }, user == null ? void 0 : user.name), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Avatar__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n        src: user == null ? void 0 : user.avatar,\n        alt: user == null ? void 0 : user.name\n    })))));\n}, \"ThemedHeader\");\n// src/components/themedLayout/index.tsx\nvar ThemedLayout = /* @__PURE__ */ __name(({ Sider: Sider2, Header: Header2, Title: Title2, Footer, OffLayoutArea, children })=>{\n    const [isSiderOpen, setIsSiderOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const SiderToRender = Sider2 ?? ThemedSider;\n    const HeaderToRender = Header2 ?? ThemedHeader;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SiderToRender, {\n        Title: Title2,\n        isSiderOpen,\n        onToggleSiderClick: (isOpen)=>setIsSiderOpen(Boolean(isOpen))\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flex: 1,\n            minHeight: \"100vh\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HeaderToRender, {\n        isSiderOpen,\n        onToggleSiderClick: ()=>setIsSiderOpen((prev)=>!prev)\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"main\",\n        sx: {\n            p: {\n                xs: 1,\n                md: 2,\n                lg: 3\n            },\n            flexGrow: 1,\n            bgcolor: (theme)=>theme.palette.background.default\n        }\n    }, children), Footer && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Footer, null)), OffLayoutArea && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(OffLayoutArea, null));\n}, \"ThemedLayout\");\n// src/components/themedLayout/title/index.tsx\n\n\n\n\n\nvar defaultText = \"Refine Project\";\nvar defaultIcon = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"svg\", {\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n}, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M13.7889 0.422291C12.6627 -0.140764 11.3373 -0.140764 10.2111 0.422291L2.21115 4.42229C0.85601 5.09986 0 6.48491 0 8V16C0 17.5151 0.85601 18.9001 2.21115 19.5777L10.2111 23.5777C11.3373 24.1408 12.6627 24.1408 13.7889 23.5777L21.7889 19.5777C23.144 18.9001 24 17.5151 24 16V8C24 6.48491 23.144 5.09986 21.7889 4.42229L13.7889 0.422291ZM8 8C8 5.79086 9.79086 4 12 4C14.2091 4 16 5.79086 16 8V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16V8Z\",\n    fill: \"currentColor\"\n}), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"path\", {\n    d: \"M14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z\",\n    fill: \"currentColor\"\n}));\nvar ThemedTitle = /* @__PURE__ */ __name(({ collapsed, wrapperStyles, icon = defaultIcon, text = defaultText })=>{\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        to: \"/\",\n        component: ActiveLink,\n        underline: \"none\",\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"12px\",\n            ...wrapperStyles\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        height: \"24px\",\n        width: \"24px\",\n        color: \"primary\"\n    }, icon), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h6\",\n        fontWeight: 700,\n        color: \"text.primary\",\n        fontSize: \"inherit\",\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }, text));\n}, \"ThemedTitle\");\n// src/components/themedLayoutV2/index.tsx\n\n\n// src/contexts/themedLayoutContext/index.tsx\n\nvar ThemedLayoutContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n    siderCollapsed: false,\n    mobileSiderOpen: false,\n    setSiderCollapsed: ()=>void 0,\n    setMobileSiderOpen: ()=>void 0\n});\nvar ThemedLayoutContextProvider = /* @__PURE__ */ __name(({ children, initialSiderCollapsed })=>{\n    const [siderCollapsed, setSiderCollapsed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialSiderCollapsed ?? false);\n    const [mobileSiderOpen, setMobileSiderOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedLayoutContext.Provider, {\n        value: {\n            siderCollapsed,\n            mobileSiderOpen,\n            setSiderCollapsed,\n            setMobileSiderOpen\n        }\n    }, children);\n}, \"ThemedLayoutContextProvider\");\n// src/components/themedLayoutV2/sider/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/hooks/useAutocomplete/index.ts\n\n\n\nvar useAutocomplete = /* @__PURE__ */ __name((props)=>{\n    var _a, _b;\n    const { queryResult, defaultValueQueryResult, onSearch, overtime } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSelect)(props);\n    return {\n        autocompleteProps: {\n            options: (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_30__[\"default\"])(((_a = queryResult.data) == null ? void 0 : _a.data) || [], ((_b = defaultValueQueryResult.data) == null ? void 0 : _b.data) || [], lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"]),\n            loading: queryResult.isFetching || defaultValueQueryResult.isFetching,\n            onInputChange: (event, value)=>{\n                if ((event == null ? void 0 : event.type) === \"change\") {\n                    onSearch(value);\n                } else if ((event == null ? void 0 : event.type) === \"click\") {\n                    onSearch(\"\");\n                }\n            },\n            filterOptions: (x)=>x\n        },\n        onSearch,\n        queryResult,\n        defaultValueQueryResult,\n        overtime\n    };\n}, \"useAutocomplete\");\n// src/hooks/useDataGrid/index.ts\n\n\n\n\n\n// src/definitions/dataGrid/index.ts\n\nvar transformSortModelToCrudSorting = /* @__PURE__ */ __name((sortModel)=>{\n    const sorter = sortModel.map(({ field, sort })=>({\n            field,\n            order: sort || \"asc\"\n        }));\n    return sorter;\n}, \"transformSortModelToCrudSorting\");\nvar transformCrudSortingToSortModel = /* @__PURE__ */ __name((crudSorting)=>{\n    const sortModel = crudSorting.map(({ field, order })=>({\n            field,\n            sort: order\n        }));\n    return sortModel;\n}, \"transformCrudSortingToSortModel\");\nvar transformMuiOperatorToCrudOperator = /* @__PURE__ */ __name((operatorValue)=>{\n    if (!operatorValue) {\n        return \"eq\";\n    }\n    switch(operatorValue){\n        case \"equals\":\n        case \"is\":\n        case \"=\":\n            return \"eq\";\n        case \"!=\":\n        case \"not\":\n            return \"ne\";\n        case \"contains\":\n            return \"contains\";\n        case \"isAnyOf\":\n            return \"in\";\n        case \">\":\n        case \"after\":\n            return \"gt\";\n        case \">=\":\n        case \"onOrAfter\":\n            return \"gte\";\n        case \"<\":\n        case \"before\":\n            return \"lt\";\n        case \"<=\":\n        case \"onOrBefore\":\n            return \"lte\";\n        case \"startsWith\":\n            return \"startswith\";\n        case \"endsWith\":\n            return \"endswith\";\n        case \"isEmpty\":\n            return \"null\";\n        case \"isNotEmpty\":\n            return \"nnull\";\n        default:\n            return operatorValue;\n    }\n}, \"transformMuiOperatorToCrudOperator\");\nvar transformFilterModelToCrudFilters = /* @__PURE__ */ __name(({ items, logicOperator })=>{\n    const filters = items.map(({ field, value, operator })=>{\n        const filter = {\n            field,\n            value: [\n                \"isEmpty\",\n                \"isNotEmpty\"\n            ].includes(operator) ? true : value ?? \"\",\n            operator: transformMuiOperatorToCrudOperator(operator)\n        };\n        return filter;\n    });\n    if (logicOperator === _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_32__.GridLogicOperator.Or) {\n        return [\n            {\n                operator: \"or\",\n                value: filters\n            }\n        ];\n    }\n    return filters;\n}, \"transformFilterModelToCrudFilters\");\nvar transformCrudOperatorToMuiOperator = /* @__PURE__ */ __name((operator, columnType)=>{\n    switch(columnType){\n        case \"number\":\n            switch(operator){\n                case \"eq\":\n                    return \"=\";\n                case \"ne\":\n                    return \"!=\";\n                case \"gt\":\n                    return \">\";\n                case \"gte\":\n                    return \">=\";\n                case \"lt\":\n                    return \"<\";\n                case \"lte\":\n                    return \"<=\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                case \"in\":\n                    return \"isAnyOf\";\n                default:\n                    return operator;\n            }\n        case \"singleSelect\":\n        case \"boolean\":\n            switch(operator){\n                case \"eq\":\n                    return \"is\";\n                default:\n                    return operator;\n            }\n        case void 0:\n        case \"string\":\n            switch(operator){\n                case \"eq\":\n                    return \"equals\";\n                case \"contains\":\n                    return \"contains\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                case \"startswith\":\n                    return \"startsWith\";\n                case \"endswith\":\n                    return \"endsWith\";\n                case \"in\":\n                    return \"isAnyOf\";\n                default:\n                    return operator;\n            }\n        case \"date\":\n        case \"dateTime\":\n            switch(operator){\n                case \"eq\":\n                    return \"is\";\n                case \"ne\":\n                    return \"not\";\n                case \"gt\":\n                    return \"after\";\n                case \"gte\":\n                    return \"onOrAfter\";\n                case \"lt\":\n                    return \"before\";\n                case \"lte\":\n                    return \"onOrBefore\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                default:\n                    return operator;\n            }\n        default:\n            return operator;\n    }\n}, \"transformCrudOperatorToMuiOperator\");\nvar transformCrudFiltersToFilterModel = /* @__PURE__ */ __name((crudFilters, columnsType)=>{\n    var _a;\n    const gridFilterItems = [];\n    const isExistOrFilter = crudFilters.some((filter)=>filter.operator === \"or\");\n    if (columnsType) {\n        if (isExistOrFilter) {\n            const orLogicalFilters = (_a = crudFilters.find((filter)=>filter.operator === \"or\")) == null ? void 0 : _a.value;\n            orLogicalFilters.map(({ field, value, operator })=>{\n                const columnType = columnsType[field];\n                gridFilterItems.push({\n                    field,\n                    operator: transformCrudOperatorToMuiOperator(operator, columnType),\n                    value: value === \"\" ? void 0 : value,\n                    id: field + operator\n                });\n            });\n        } else {\n            crudFilters.map(({ field, value, operator })=>{\n                const columnType = columnsType[field];\n                gridFilterItems.push({\n                    field,\n                    operator: transformCrudOperatorToMuiOperator(operator, columnType),\n                    value: value === \"\" ? void 0 : value,\n                    id: field + operator\n                });\n            });\n        }\n    }\n    return {\n        items: gridFilterItems,\n        // If there is \"or\" filter, default link operator is \"or\"\n        logicOperator: isExistOrFilter ? _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_32__.GridLogicOperator.Or : _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_32__.GridLogicOperator.And\n    };\n}, \"transformCrudFiltersToFilterModel\");\n// src/hooks/useDataGrid/index.ts\nfunction useDataGrid({ onSearch: onSearchProp, initialCurrent, initialPageSize = 25, pagination, hasPagination = true, initialSorter, permanentSorter, defaultSetFilterBehavior = \"replace\", initialFilter, permanentFilter, filters: filtersFromProp, sorters: sortersFromProp, syncWithLocation: syncWithLocationProp, resource: resourceFromProp, successNotification, errorNotification, queryOptions, liveMode: liveModeFromProp, onLiveEvent, liveParams, meta, metaData, dataProviderName, overtimeOptions } = {}) {\n    const theme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_33__[\"default\"])();\n    const liveMode = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLiveMode)(liveModeFromProp);\n    const [columnsTypes, setColumnsType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const { tableQueryResult, current, setCurrent, pageSize, setPageSize, filters, setFilters, sorters, setSorters, sorter, setSorter, pageCount, createLinkForSyncWithLocation, overtime } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTable)({\n        permanentSorter,\n        permanentFilter,\n        initialCurrent,\n        initialPageSize,\n        pagination,\n        hasPagination,\n        initialSorter,\n        initialFilter,\n        filters: filtersFromProp,\n        sorters: sortersFromProp,\n        syncWithLocation: syncWithLocationProp,\n        defaultSetFilterBehavior,\n        resource: resourceFromProp,\n        successNotification,\n        errorNotification,\n        queryOptions,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta, metaData),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta, metaData),\n        dataProviderName,\n        overtimeOptions\n    });\n    const [muiCrudFilters, setMuiCrudFilters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(filters);\n    const { data, isFetched, isLoading } = tableQueryResult;\n    const isServerSideFilteringEnabled = ((filtersFromProp == null ? void 0 : filtersFromProp.mode) || \"server\") === \"server\";\n    const isServerSideSortingEnabled = ((sortersFromProp == null ? void 0 : sortersFromProp.mode) || \"server\") === \"server\";\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const isPaginationEnabled = ((pagination == null ? void 0 : pagination.mode) ?? hasPaginationString) !== \"off\";\n    const preferredPermanentSorters = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(sortersFromProp == null ? void 0 : sortersFromProp.permanent, permanentSorter) ?? [];\n    const preferredPermanentFilters = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(filtersFromProp == null ? void 0 : filtersFromProp.permanent, permanentFilter) ?? [];\n    const handlePageChange = /* @__PURE__ */ __name((page)=>{\n        if (isPaginationEnabled) {\n            setCurrent(page + 1);\n        }\n    }, \"handlePageChange\");\n    const handlePageSizeChange = /* @__PURE__ */ __name((pageSize2)=>{\n        if (isPaginationEnabled) {\n            setPageSize(pageSize2);\n        }\n    }, \"handlePageSizeChange\");\n    const handleSortModelChange = /* @__PURE__ */ __name((sortModel)=>{\n        const crudSorting = transformSortModelToCrudSorting(sortModel);\n        setSorters(crudSorting);\n    }, \"handleSortModelChange\");\n    const handleFilterModelChange = /* @__PURE__ */ __name((filterModel)=>{\n        const crudFilters = transformFilterModelToCrudFilters(filterModel);\n        setMuiCrudFilters(crudFilters);\n        setFilters(crudFilters.filter((f)=>f.value !== \"\"));\n        if (isPaginationEnabled) {\n            setCurrent(1);\n        }\n    }, \"handleFilterModelChange\");\n    const search = /* @__PURE__ */ __name(async (value)=>{\n        if (onSearchProp) {\n            const searchFilters = await onSearchProp(value);\n            setMuiCrudFilters(searchFilters);\n            setFilters(searchFilters.filter((f)=>f.value !== \"\"));\n            if (isPaginationEnabled) {\n                setCurrent(1);\n            }\n        }\n    }, \"search\");\n    const dataGridPaginationValues = /* @__PURE__ */ __name(()=>{\n        if (isPaginationEnabled) {\n            return {\n                paginationMode: \"server\",\n                paginationModel: {\n                    page: current - 1,\n                    pageSize\n                },\n                onPaginationModelChange: (model)=>{\n                    handlePageChange(model.page);\n                    handlePageSizeChange(model.pageSize);\n                }\n            };\n        }\n        return {\n            paginationMode: \"client\"\n        };\n    }, \"dataGridPaginationValues\");\n    return {\n        tableQueryResult,\n        dataGridProps: {\n            disableRowSelectionOnClick: true,\n            rows: (data == null ? void 0 : data.data) || [],\n            loading: liveMode === \"auto\" ? isLoading : !isFetched,\n            rowCount: (data == null ? void 0 : data.total) || 0,\n            ...dataGridPaginationValues(),\n            sortingMode: isServerSideSortingEnabled ? \"server\" : \"client\",\n            sortModel: transformCrudSortingToSortModel((0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_34__[\"default\"])(sorters, preferredPermanentSorters, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"])),\n            onSortModelChange: handleSortModelChange,\n            filterMode: isServerSideFilteringEnabled ? \"server\" : \"client\",\n            filterModel: transformCrudFiltersToFilterModel((0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_34__[\"default\"])(muiCrudFilters, preferredPermanentFilters, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"]), columnsTypes),\n            onFilterModelChange: handleFilterModelChange,\n            onStateChange: (state)=>{\n                const newColumnsTypes = Object.fromEntries(Object.entries(state.columns.lookup).map(([key, value])=>{\n                    return [\n                        key,\n                        value.type\n                    ];\n                }));\n                const isStateChanged = !(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"])(newColumnsTypes, columnsTypes);\n                if (isStateChanged) {\n                    setColumnsType(newColumnsTypes);\n                }\n            },\n            sx: {\n                border: \"none\",\n                \"& .MuiDataGrid-columnHeaders\": {\n                    background: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.darken)(theme.palette.background.paper, 0.05),\n                    borderBottom: `1px solid ${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.darken)(theme.palette.background.paper, 0.1)}`\n                },\n                \"& .MuiDataGrid-cell\": {\n                    borderBottom: `1px solid ${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.darken)(theme.palette.background.paper, 0.05)}`\n                }\n            }\n        },\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        pageCount,\n        sorters,\n        setSorters,\n        sorter,\n        setSorter,\n        filters,\n        setFilters,\n        search,\n        createLinkForSyncWithLocation,\n        overtime\n    };\n}\n__name(useDataGrid, \"useDataGrid\");\n// src/hooks/useSiderVisible/index.ts\n\nvar useSiderVisible = /* @__PURE__ */ __name(()=>{\n    const { mobileSiderOpen, siderCollapsed, setMobileSiderOpen, setSiderCollapsed } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemedLayoutContext);\n    return {\n        siderVisible: mobileSiderOpen,\n        setSiderVisible: setMobileSiderOpen,\n        drawerSiderVisible: !siderCollapsed,\n        setDrawerSiderVisible: (visible)=>setSiderCollapsed(!visible)\n    };\n}, \"useSiderVisible\");\n// src/hooks/useThemedLayoutContext/index.ts\n\nvar useThemedLayoutContext = /* @__PURE__ */ __name(()=>{\n    const { mobileSiderOpen, siderCollapsed, setMobileSiderOpen, setSiderCollapsed } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemedLayoutContext);\n    return {\n        mobileSiderOpen,\n        siderCollapsed,\n        setMobileSiderOpen,\n        setSiderCollapsed\n    };\n}, \"useThemedLayoutContext\");\n// src/components/themedLayoutV2/sider/index.tsx\nvar ThemedSiderV2 = /* @__PURE__ */ __name(({ Title: TitleFromProps, render, meta, activeItemDisabled = false })=>{\n    const { siderCollapsed, setSiderCollapsed, mobileSiderOpen, setMobileSiderOpen } = useThemedLayoutContext();\n    const drawerWidth = /* @__PURE__ */ __name(()=>{\n        if (siderCollapsed) return 56;\n        return 240;\n    }, \"drawerWidth\");\n    const t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { menuItems, selectedKey, defaultOpenKeys } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta\n    });\n    const isExistAuthentication = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)();\n    const TitleFromContext = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { warnWhen, setWarnWhen } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)();\n    const { mutate: mutateLogout } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        setOpen((previous)=>{\n            const previousKeys = Object.keys(previous);\n            const previousOpenKeys = previousKeys.filter((key)=>previous[key]);\n            const uniqueKeys = /* @__PURE__ */ new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(Array.from(uniqueKeys.values()).map((key)=>[\n                    key,\n                    true\n                ]));\n            return uniqueKeysRecord;\n        });\n    }, [\n        defaultOpenKeys\n    ]);\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitleV2;\n    const handleClick = /* @__PURE__ */ __name((key)=>{\n        setOpen({\n            ...open,\n            [key]: !open[key]\n        });\n    }, \"handleClick\");\n    const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2)=>{\n        return tree.map((item)=>{\n            const { icon, label, route, name, children, parentName, meta: meta2, options } = item;\n            const isOpen = open[item.key || \"\"] || false;\n            const isSelected = item.key === selectedKey2;\n            const isNested = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);\n            if (children.length > 0) {\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                    key: item.key,\n                    resource: name.toLowerCase(),\n                    action: \"list\",\n                    params: {\n                        resource: item\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    key: item.key\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    title: label ?? name,\n                    placement: \"right\",\n                    disableHoverListener: !siderCollapsed,\n                    arrow: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    onClick: ()=>{\n                        if (siderCollapsed) {\n                            setSiderCollapsed(false);\n                            if (!isOpen) {\n                                handleClick(item.key || \"\");\n                            }\n                        } else {\n                            handleClick(item.key || \"\");\n                        }\n                    },\n                    sx: {\n                        pl: isNested ? 4 : 2,\n                        justifyContent: \"center\"\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    sx: {\n                        justifyContent: \"center\",\n                        minWidth: \"24px\",\n                        transition: \"margin-right 0.3s\",\n                        marginRight: siderCollapsed ? \"0px\" : \"12px\",\n                        color: \"currentColor\"\n                    }\n                }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    primary: label,\n                    primaryTypographyProps: {\n                        noWrap: true,\n                        fontSize: \"14px\"\n                    }\n                }), isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }))), !siderCollapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    in: open[item.key || \"\"],\n                    timeout: \"auto\",\n                    unmountOnExit: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    component: \"div\",\n                    disablePadding: true\n                }, renderTreeView(children, selectedKey2)))));\n            }\n            const linkStyle = activeItemDisabled && isSelected ? {\n                pointerEvents: \"none\"\n            } : {};\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: item.key,\n                resource: name.toLowerCase(),\n                action: \"list\",\n                params: {\n                    resource: item\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                title: label ?? name,\n                placement: \"right\",\n                disableHoverListener: !siderCollapsed,\n                arrow: true\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                component: ActiveLink,\n                to: route,\n                selected: isSelected,\n                style: linkStyle,\n                onClick: ()=>{\n                    setMobileSiderOpen(false);\n                },\n                sx: {\n                    pl: isNested ? 4 : 2,\n                    py: isNested ? 1.25 : 1,\n                    justifyContent: \"center\",\n                    color: isSelected ? \"primary.main\" : \"text.primary\"\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                sx: {\n                    justifyContent: \"center\",\n                    transition: \"margin-right 0.3s\",\n                    marginRight: siderCollapsed ? \"0px\" : \"12px\",\n                    minWidth: \"24px\",\n                    color: \"currentColor\"\n                }\n            }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                primary: label,\n                primaryTypographyProps: {\n                    noWrap: true,\n                    fontSize: \"14px\"\n                }\n            }))));\n        });\n    }, \"renderTreeView\");\n    const dashboard = hasDashboard ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n        resource: \"dashboard\",\n        action: \"list\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: translate(\"dashboard.title\", \"Dashboard\"),\n        placement: \"right\",\n        disableHoverListener: !siderCollapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        component: ActiveLink,\n        to: \"/\",\n        selected: selectedKey === \"/\",\n        onClick: ()=>{\n            setMobileSiderOpen(false);\n        },\n        sx: {\n            pl: 2,\n            py: 1,\n            justifyContent: \"center\",\n            color: selectedKey === \"/\" ? \"primary.main\" : \"text.primary\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: siderCollapsed ? \"0px\" : \"12px\",\n            color: \"currentColor\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: translate(\"dashboard.title\", \"Dashboard\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })))) : null;\n    const handleLogout = /* @__PURE__ */ __name(()=>{\n        if (warnWhen) {\n            const confirm = window.confirm(t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"));\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    }, \"handleLogout\");\n    const logout = isExistAuthentication && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: t(\"buttons.logout\", \"Logout\"),\n        placement: \"right\",\n        disableHoverListener: !siderCollapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        key: \"logout\",\n        onClick: ()=>handleLogout(),\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: siderCollapsed ? \"0px\" : \"12px\",\n            color: \"currentColor\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: t(\"buttons.logout\", \"Logout\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })));\n    const items = renderTreeView(menuItems, selectedKey);\n    const renderSider = /* @__PURE__ */ __name(()=>{\n        if (render) {\n            return render({\n                dashboard,\n                logout,\n                items,\n                collapsed: siderCollapsed\n            });\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, dashboard, items, logout);\n    }, \"renderSider\");\n    const drawer = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        disablePadding: true,\n        sx: {\n            flexGrow: 1,\n            paddingTop: \"16px\"\n        }\n    }, renderSider());\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: {\n                xs: drawerWidth()\n            },\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            transition: \"width 0.3s ease\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"nav\",\n        sx: {\n            position: \"fixed\",\n            zIndex: 1101,\n            width: {\n                sm: drawerWidth()\n            },\n            display: \"flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"temporary\",\n        elevation: 2,\n        open: mobileSiderOpen,\n        onClose: ()=>setMobileSiderOpen(false),\n        ModalProps: {\n            keepMounted: true\n        },\n        sx: {\n            display: {\n                sm: \"block\",\n                md: \"none\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: drawerWidth()\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            paddingLeft: \"16px\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: false\n    })), drawer)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"permanent\",\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: drawerWidth(),\n                overflow: \"hidden\",\n                transition: \"width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms\"\n            }\n        },\n        open: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Paper__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        elevation: 0,\n        sx: {\n            fontSize: \"14px\",\n            width: \"100%\",\n            height: 64,\n            display: \"flex\",\n            flexShrink: 0,\n            alignItems: \"center\",\n            justifyContent: siderCollapsed ? \"center\" : \"space-between\",\n            paddingLeft: siderCollapsed ? 0 : \"16px\",\n            paddingRight: siderCollapsed ? 0 : \"8px\",\n            variant: \"outlined\",\n            borderRadius: 0,\n            borderBottom: (theme)=>`1px solid ${theme.palette.action.focus}`\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: siderCollapsed\n    }), !siderCollapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        size: \"small\",\n        onClick: ()=>setSiderCollapsed(true)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            flexGrow: 1,\n            overflowX: \"hidden\",\n            overflowY: \"auto\"\n        }\n    }, drawer))));\n}, \"ThemedSiderV2\");\n// src/components/themedLayoutV2/header/index.tsx\n\n\n\n\n\n\n\n// src/components/themedLayoutV2/hamburgerMenu/index.tsx\n\n\n\nvar HamburgerIcon = /* @__PURE__ */ __name((props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        color: \"inherit\",\n        \"aria-label\": \"open drawer\",\n        edge: \"start\",\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Menu__WEBPACK_IMPORTED_MODULE_27__[\"default\"], null)), \"HamburgerIcon\");\nvar HamburgerMenu = /* @__PURE__ */ __name(()=>{\n    const { siderCollapsed, setSiderCollapsed, mobileSiderOpen, setMobileSiderOpen } = useThemedLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerIcon, {\n        onClick: ()=>setSiderCollapsed(!siderCollapsed),\n        sx: {\n            mr: 2,\n            display: {\n                xs: \"none\",\n                md: \"flex\"\n            },\n            ...!siderCollapsed && {\n                display: \"none\"\n            }\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerIcon, {\n        onClick: ()=>setMobileSiderOpen(!mobileSiderOpen),\n        sx: {\n            mr: 2,\n            display: {\n                xs: \"flex\",\n                md: \"none\"\n            },\n            ...mobileSiderOpen && {\n                display: \"none\"\n            }\n        }\n    }));\n}, \"HamburgerMenu\");\n// src/components/themedLayoutV2/header/index.tsx\nvar ThemedHeaderV2 = /* @__PURE__ */ __name(({ isSticky, sticky })=>{\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { data: user } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const prefferedSticky = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(sticky, isSticky) ?? true;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_AppBar__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n        position: prefferedSticky ? \"sticky\" : \"relative\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_22__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerMenu, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        width: \"100%\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        gap: \"16px\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }, (user == null ? void 0 : user.name) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"subtitle2\"\n    }, user == null ? void 0 : user.name), (user == null ? void 0 : user.avatar) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Avatar__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n        src: user == null ? void 0 : user.avatar,\n        alt: user == null ? void 0 : user.name\n    })))));\n}, \"ThemedHeaderV2\");\n// src/components/themedLayoutV2/index.tsx\nvar ThemedLayoutV2 = /* @__PURE__ */ __name(({ Sider: Sider2, Header: Header2, Title: Title2, Footer, OffLayoutArea, children, initialSiderCollapsed })=>{\n    const SiderToRender = Sider2 ?? ThemedSiderV2;\n    const HeaderToRender = Header2 ?? ThemedHeaderV2;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedLayoutContextProvider, {\n        initialSiderCollapsed\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SiderToRender, {\n        Title: Title2\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: [\n            {\n                display: \"flex\",\n                flexDirection: \"column\",\n                flex: 1,\n                minHeight: \"100vh\"\n            },\n            {\n                overflow: \"auto\"\n            },\n            {\n                overflow: \"clip\"\n            }\n        ]\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HeaderToRender, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"main\",\n        sx: {\n            p: {\n                xs: 1,\n                md: 2,\n                lg: 3\n            },\n            flexGrow: 1,\n            bgcolor: (theme)=>theme.palette.background.default\n        }\n    }, children), Footer && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Footer, null)), OffLayoutArea && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(OffLayoutArea, null)));\n}, \"ThemedLayoutV2\");\n// src/components/themedLayoutV2/title/index.tsx\n\n\n\n\n\nvar ThemedTitleV2 = /* @__PURE__ */ __name(({ collapsed, wrapperStyles, icon: iconFromProps, text: textFromProps })=>{\n    const { title: { icon: defaultIcon2, text: defaultText2 } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineOptions)();\n    const icon = typeof iconFromProps === \"undefined\" ? defaultIcon2 : iconFromProps;\n    const text = typeof textFromProps === \"undefined\" ? defaultText2 : textFromProps;\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        to: \"/\",\n        component: ActiveLink,\n        underline: \"none\",\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"12px\",\n            ...wrapperStyles\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        height: \"24px\",\n        width: \"24px\",\n        color: \"primary\"\n    }, icon), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h6\",\n        fontWeight: 700,\n        color: \"text.primary\",\n        fontSize: \"inherit\",\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }, text));\n}, \"ThemedTitleV2\");\n// src/components/pages/login/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar LoginPage = /* @__PURE__ */ __name(()=>{\n    var _a;\n    const { register, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: login, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogin)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        sx: {\n            background: \"radial-gradient(50% 50% at 50% 50%, #63386A 0%, #310438 100%)\",\n            backgroundSize: \"cover\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        maxWidth: \"xs\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            height: \"100vh\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine Logo\",\n        style: {\n            maxWidth: 200\n        }\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        mt: 4\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            paddingX: \"32px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        sx: {\n            fontWeight: \"700\",\n            margin: \"12px 0\"\n        }\n    }, translate(\"pages.login.title\", \"Sign in your account\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            login(data);\n        }),\n        gap: \"16px\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"username\", {\n            required: true\n        }),\n        id: \"username\",\n        margin: \"normal\",\n        size: \"small\",\n        fullWidth: true,\n        label: translate(\"pages.login.username\", \"Username\"),\n        name: \"username\",\n        autoComplete: \"username\",\n        autoFocus: true\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"password\", {\n            required: true\n        }),\n        id: \"password\",\n        size: \"small\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.login.password\", \"Password\"),\n        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        sx: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_41__[\"default\"], {\n        sx: {\n            span: {\n                fontSize: \"12px\",\n                color: \"text.secondary\"\n            }\n        },\n        color: \"secondary\",\n        control: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_42__[\"default\"], {\n            size: \"small\",\n            id: \"remember\",\n            ...register(\"remember\")\n        }),\n        label: translate(\"pages.login.remember\", \"Remember me\")\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: \"#\",\n        sx: {\n            fontSize: \"12px\",\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        sx: {\n            fontSize: \"12px\"\n        }\n    }, translate(\"pages.login.forgotPassword\", \"Forgot password?\")))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n            my: \"8px\",\n            color: \"white\"\n        },\n        disabled: isLoading\n    }, translate(\"pages.login.signin\", \"Sign in\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        style: {\n            marginTop: 8\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"subtitle2\"\n    }, translate(\"pages.login.noAccount\", \"Don’t have an account?\"), \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        underline: \"none\",\n        href: \"#\",\n        style: {\n            fontWeight: \"bold\"\n        }\n    }, translate(\"pages.login.signup\", \"Sign up\"))))))))))));\n}, \"LoginPage\");\n// src/components/pages/ready/index.tsx\n\n\n\n\n\n\nvar ReadyPage = /* @__PURE__ */ __name(()=>{\n    const renderCode = /* @__PURE__ */ __name((text)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            sx: {\n                backgroundColor: (theme)=>theme.palette.secondary.contrastText,\n                color: (theme)=>theme.palette.secondary.main,\n                display: \"inline-block\",\n                fontFamily: \"monospace\"\n            }\n        }, text), \"renderCode\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        container: true,\n        sx: {\n            backgroundColor: (theme)=>theme.palette.secondary.main,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"100vh\",\n            backgroundImage: \"url('https://refine.ams3.cdn.digitaloceanspaces.com/login-background/background.png')\",\n            backgroundSize: \"cover\"\n        },\n        p: 3\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"column\",\n        flex: 1,\n        alignItems: \"center\",\n        color: (theme)=>theme.palette.primary.contrastText\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        display: \"flex\",\n        justifyContent: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"img\", {\n        style: {\n            marginBottom: \"48px\"\n        },\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine Logo\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h2\",\n        fontWeight: \"bold\",\n        display: \"flex\",\n        justifyContent: \"center\"\n    }, \"Welcome on board\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h5\",\n        mt: 2\n    }, \"Your configuration is completed.\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h6\",\n        mt: 2\n    }, \"Now you can get started by adding your resources to the\", \" \", renderCode(\"resources\"), \" property of \", renderCode(\"Refine\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        item: true,\n        sm: 12,\n        mt: 12,\n        display: \"flex\",\n        justifyContent: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        spacing: 2,\n        direction: {\n            xs: \"column\",\n            sm: \"row\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: \"https://refine.dev\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        variant: \"outlined\",\n        fullWidth: true\n    }, \"Documentation\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: \"https://refine.dev/examples\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        variant: \"outlined\",\n        fullWidth: true\n    }, \"Examples\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: \"https://discord.gg/refine\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        variant: \"outlined\",\n        fullWidth: true\n    }, \"Community\")))))));\n}, \"ReadyPage\");\n// src/components/pages/welcome/index.tsx\n\n\nvar WelcomePage = /* @__PURE__ */ __name(()=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.WelcomePage, null);\n}, \"WelcomePage\");\n// src/components/pages/error/index.tsx\n\n\n\n\n\n\n\n\n\nvar ErrorComponent = /* @__PURE__ */ __name(()=>{\n    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const { push } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const { resource, action } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (resource && action) {\n            setErrorMessage(translate(\"pages.error.info\", {\n                action,\n                resource: resource == null ? void 0 : resource.name\n            }, `You may have forgotten to add the \"${action}\" component to \"${resource == null ? void 0 : resource.name}\" resource.`));\n        }\n    }, [\n        action,\n        resource\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        mt: 20\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        container: true,\n        direction: \"column\",\n        display: \"flex\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h1\"\n    }, \"404\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        spacing: \"2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], null, translate(\"pages.error.404\", \"Sorry, the page you visited does not exist.\")), errorMessage && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: errorMessage\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Info__WEBPACK_IMPORTED_MODULE_44__[\"default\"], {}))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        onClick: ()=>{\n            if (routerType === \"legacy\") {\n                push(\"/\");\n            } else {\n                go({\n                    to: \"/\"\n                });\n            }\n        }\n    }, translate(\"pages.error.backHome\", \"Back Home\"))));\n}, \"ErrorComponent\");\n// src/components/pages/auth/index.tsx\n\n// src/components/pages/auth/components/login/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/components/pages/auth/components/styles.ts\nvar layoutStyles = {};\nvar titleStyles = {\n    textAlign: \"center\",\n    fontSize: \"24px\",\n    marginBottom: \"24px\",\n    overflowWrap: \"break-word\",\n    hyphens: \"manual\",\n    textOverflow: \"unset\",\n    whiteSpace: \"pre-wrap\"\n};\n// src/components/pages/auth/components/login/index.tsx\nvar LoginPage2 = /* @__PURE__ */ __name(({ providers, registerLink, forgotPasswordLink, rememberMe, contentProps, wrapperProps, renderContent, formProps, title, hideForm })=>{\n    var _a;\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const methods = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)({\n        ...useFormProps\n    });\n    const { register, handleSubmit, formState: { errors } } = methods;\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: login, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogin)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const renderProviders = /* @__PURE__ */ __name(()=>{\n        if (providers && providers.length > 0) {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n                spacing: 1\n            }, providers.map((provider)=>{\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                    key: provider.name,\n                    variant: \"outlined\",\n                    fullWidth: true,\n                    sx: {\n                        color: \"primary.light\",\n                        borderColor: \"primary.light\",\n                        textTransform: \"none\"\n                    },\n                    onClick: ()=>login({\n                            providerName: provider.name\n                        }),\n                    startIcon: provider.icon\n                }, provider.label);\n            })), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Divider__WEBPACK_IMPORTED_MODULE_45__[\"default\"], {\n                sx: {\n                    fontSize: \"12px\",\n                    marginY: \"16px\"\n                }\n            }, translate(\"pages.login.divider\", \"or\")));\n        }\n        return null;\n    }, \"renderProviders\");\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.login.title\", \"Sign in to your account\")), renderProviders(), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return login(data);\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.login.errors.requiredEmail\", \"Email is required\")\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.login.fields.email\", \"Email\"),\n        error: !!errors.email,\n        name: \"email\",\n        type: \"email\",\n        autoComplete: \"email\",\n        sx: {\n            mt: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.login.errors.requiredPassword\", \"Password is required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.login.fields.password\", \"Password\"),\n        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,\n        error: !!errors.password,\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n        }\n    }, rememberMe ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_41__[\"default\"], {\n        sx: {\n            span: {\n                fontSize: \"14px\",\n                color: \"text.secondary\"\n            }\n        },\n        color: \"secondary\",\n        control: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_42__[\"default\"], {\n            size: \"small\",\n            id: \"remember\",\n            ...register(\"remember\")\n        }),\n        label: translate(\"pages.login.buttons.rememberMe\", \"Remember me\")\n    }), forgotPasswordLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        variant: \"body2\",\n        color: \"primary\",\n        fontSize: \"12px\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/forgot-password\"\n    }, translate(\"pages.login.buttons.forgotPassword\", \"Forgot password?\"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        disabled: isLoading,\n        sx: {\n            mt: \"24px\"\n        }\n    }, translate(\"pages.login.signin\", \"Sign in\"))), registerLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        textAlign: \"center\",\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.login.buttons.noAccount\", \"Don’t have an account?\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        ml: \"4px\",\n        fontSize: \"12px\",\n        variant: \"body2\",\n        color: \"primary\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/register\",\n        fontWeight: \"bold\"\n    }, translate(\"pages.login.signup\", \"Sign up\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react_hook_form__WEBPACK_IMPORTED_MODULE_46__.FormProvider, {\n        ...methods\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: hideForm ? \"flex-start\" : \"center\",\n            alignItems: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: \"100%\",\n            maxWidth: \"400px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            paddingTop: hideForm ? \"15dvh\" : 0\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content)))));\n}, \"LoginPage\");\n// src/components/pages/auth/components/register/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RegisterPage = /* @__PURE__ */ __name(({ loginLink, wrapperProps, contentProps, renderContent, providers, formProps, title, hideForm })=>{\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)({\n        ...useFormProps\n    });\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: registerMutate, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRegister)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const renderProviders = /* @__PURE__ */ __name(()=>{\n        if (providers && providers.length > 0) {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n                spacing: 1\n            }, providers.map((provider)=>{\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                    key: provider.name,\n                    color: \"secondary\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    sx: {\n                        color: \"primary.light\",\n                        borderColor: \"primary.light\",\n                        textTransform: \"none\"\n                    },\n                    onClick: ()=>registerMutate({\n                            providerName: provider.name\n                        }),\n                    startIcon: provider.icon\n                }, provider.label);\n            })), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Divider__WEBPACK_IMPORTED_MODULE_45__[\"default\"], {\n                sx: {\n                    fontSize: \"12px\",\n                    marginY: \"16px\"\n                }\n            }, translate(\"pages.login.divider\", \"or\")));\n        }\n        return null;\n    }, \"renderProviders\");\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.register.title\", \"Sign up for your account\")), renderProviders(), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return registerMutate(data);\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.register.errors.requiredEmail\", \"Email is required\"),\n            pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: translate(\"pages.register.errors.validEmail\", \"Invalid email address\")\n            }\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.register.email\", \"Email\"),\n        error: !!errors.email,\n        helperText: errors[\"email\"] ? errors[\"email\"].message : \"\",\n        name: \"email\",\n        autoComplete: \"email\",\n        sx: {\n            mt: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.register.errors.requiredPassword\", \"Password is required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.register.fields.password\", \"Password\"),\n        helperText: errors[\"password\"] ? errors[\"password\"].message : \"\",\n        error: !!errors.password,\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        disabled: isLoading,\n        sx: {\n            mt: \"24px\"\n        }\n    }, translate(\"pages.register.signup\", \"Sign up\"))), loginLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\",\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.login.buttons.haveAccount\", \"Have an account?\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        ml: \"4px\",\n        variant: \"body2\",\n        color: \"primary\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/login\",\n        fontSize: \"12px\",\n        fontWeight: \"bold\"\n    }, translate(\"pages.login.signin\", \"Sign in\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: hideForm ? \"flex-start\" : \"center\",\n            alignItems: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: \"100%\",\n            maxWidth: \"400px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            paddingTop: hideForm ? \"15dvh\" : 0\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"RegisterPage\");\n// src/components/pages/auth/components/forgotPassword/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar ForgotPasswordPage = /* @__PURE__ */ __name(({ loginLink, wrapperProps, contentProps, renderContent, formProps, title })=>{\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)({\n        ...useFormProps\n    });\n    const { mutate, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useForgotPassword)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.forgotPassword.title\", \"Forgot your password?\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return mutate(data);\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.forgotPassword.errors.requiredEmail\", \"Email is required\"),\n            pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: translate(\"pages.register.errors.validEmail\", \"Invalid email address\")\n            }\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.forgotPassword.fields.email\", \"Email\"),\n        name: \"email\",\n        type: \"email\",\n        error: !!errors.email,\n        autoComplete: \"email\",\n        sx: {\n            m: 0\n        }\n    }), loginLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        textAlign: \"right\",\n        sx: {\n            mt: \"24px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.register.buttons.haveAccount\", \"Have an account?\")), \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        variant: \"body2\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/login\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        color: \"primary.light\"\n    }, translate(\"pages.login.signin\", \"Sign in\"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n            mt: \"24px\"\n        },\n        disabled: isLoading\n    }, translate(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        maxWidth: \"xs\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"ForgotPasswordPage\");\n// src/components/pages/auth/components/updatePassword/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar UpdatePasswordPage = /* @__PURE__ */ __name(({ wrapperProps, contentProps, renderContent, formProps, title = void 0 })=>{\n    var _a, _b;\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, watch, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)({\n        ...useFormProps\n    });\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: update, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUpdatePassword)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.updatePassword.title\", \"Set New Password\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return update(data);\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.updatePassword.errors.requiredPassword\", \"Password required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.updatePassword.fields.password\", \"New Password\"),\n        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,\n        error: !!(errors == null ? void 0 : errors.password),\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            m: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"confirmPassword\", {\n            required: translate(\"pages.updatePassword.errors.requiredConfirmPassword\", \"Confirm Password is required\"),\n            validate: (value)=>{\n                if (watch(\"password\") !== value) {\n                    return translate(\"pages.updatePassword.errors.confirmPasswordNotMatch\", \"Passwords do not match\");\n                }\n                return true;\n            }\n        }),\n        id: \"confirmPassword\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"confirmPassword\",\n        label: translate(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\"),\n        helperText: (_b = errors == null ? void 0 : errors.confirmPassword) == null ? void 0 : _b.message,\n        error: !!(errors == null ? void 0 : errors.confirmPassword),\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-confirm-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n            mt: \"24px\"\n        },\n        disabled: isLoading\n    }, translate(\"pages.updatePassword.buttons.submit\", \"Update\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        maxWidth: \"xs\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"UpdatePasswordPage\");\n// src/components/pages/auth/index.tsx\nvar AuthPage = /* @__PURE__ */ __name((props)=>{\n    const { type } = props;\n    const renderView = /* @__PURE__ */ __name(()=>{\n        switch(type){\n            case \"register\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RegisterPage, {\n                    ...props\n                });\n            case \"forgotPassword\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ForgotPasswordPage, {\n                    ...props\n                });\n            case \"updatePassword\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(UpdatePasswordPage, {\n                    ...props\n                });\n            default:\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LoginPage2, {\n                    ...props\n                });\n        }\n    }, \"renderView\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, renderView());\n}, \"AuthPage\");\n// src/components/crud/create/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar Create = /* @__PURE__ */ __name(({ title, children, saveButtonProps: saveButtonPropsFromProps, resource: resourceFromProps, isLoading = false, breadcrumb: breadcrumbFromProps, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps })=>{\n    var _a, _b;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const { goBack } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const saveButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        ...saveButtonPropsFromProps\n    };\n    const defaultFooterButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SaveButton, {\n        ...saveButtonProps\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...wrapperProps ?? {}\n    }, breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.create`, `Create ${getUserFriendlyName(((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.label) ?? ((_b = resource == null ? void 0 : resource.options) == null ? void 0 : _b.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n            onClick: action !== \"list\" || typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_49__[\"default\"], null)),\n        action: headerButtons ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: null\n        }) : headerButtons : null) : void 0,\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            gap: \"16px\",\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: defaultFooterButtons,\n        saveButtonProps\n    }) : footerButtons : defaultFooterButtons));\n}, \"Create\");\n// src/components/crud/edit/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar Edit = /* @__PURE__ */ __name(({ title, saveButtonProps: saveButtonPropsFromProps, mutationMode: mutationModeProp, recordItemId, children, deleteButtonProps: deleteButtonPropsFromProps, canDelete, resource: resourceFromProps, isLoading = false, breadcrumb: breadcrumbFromProps, dataProviderName, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps, autoSaveProps })=>{\n    var _a, _b, _c;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const { mutationMode: mutationModeContext } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMutationMode)();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const { goBack, list: legacyGoList } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, id: idFromParams, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const goListPath = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useToPath)({\n        resource,\n        action: \"list\"\n    });\n    const id = recordItemId ?? idFromParams;\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const hasList = (resource == null ? void 0 : resource.list) && !recordItemId;\n    const isDeleteButtonVisible = canDelete ?? ((((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.canDelete) ?? (resource == null ? void 0 : resource.canDelete)) || deleteButtonPropsFromProps);\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const listButtonProps = hasList ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier\n    } : void 0;\n    const refreshButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        dataProviderName\n    };\n    const defaultHeaderButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\"\n    }, autoSaveProps && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AutoSaveIndicator, {\n        ...autoSaveProps\n    }), hasList && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ListButton, {\n        ...listButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RefreshButton, {\n        ...refreshButtonProps\n    }));\n    const deleteButtonProps = isDeleteButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        mutationMode,\n        variant: \"outlined\",\n        onSuccess: ()=>{\n            if (routerType === \"legacy\") {\n                legacyGoList((resource == null ? void 0 : resource.route) ?? (resource == null ? void 0 : resource.name) ?? \"\");\n            } else {\n                go({\n                    to: goListPath\n                });\n            }\n        },\n        recordItemId: id,\n        dataProviderName,\n        ...deleteButtonPropsFromProps\n    } : void 0;\n    const saveButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        ...saveButtonPropsFromProps\n    };\n    const defaultFooterButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, isDeleteButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(DeleteButton, {\n        ...deleteButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SaveButton, {\n        ...saveButtonProps\n    }));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...wrapperProps ?? {}\n    }, breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.edit`, `Edit ${getUserFriendlyName(((_b = resource == null ? void 0 : resource.meta) == null ? void 0 : _b.label) ?? ((_c = resource == null ? void 0 : resource.options) == null ? void 0 : _c.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n            onClick: action !== \"list\" && typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_49__[\"default\"], null)),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            listButtonProps,\n            refreshButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            gap: \"16px\",\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: defaultFooterButtons,\n        deleteButtonProps,\n        saveButtonProps\n    }) : footerButtons : defaultFooterButtons));\n}, \"Edit\");\n// src/components/crud/list/index.tsx\n\n\n\n\n\n\n\n\nvar List4 = /* @__PURE__ */ __name(({ title, canCreate, children, createButtonProps: createButtonPropsFromProps, resource: resourceFromProps, breadcrumb: breadcrumbFromProps, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons })=>{\n    var _a, _b;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const { resource, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const isCreateButtonVisible = canCreate ?? (((resource == null ? void 0 : resource.canCreate) ?? !!(resource == null ? void 0 : resource.create)) || createButtonPropsFromProps);\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const createButtonProps = isCreateButtonVisible ? {\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        ...createButtonPropsFromProps\n    } : void 0;\n    const defaultHeaderButtons = isCreateButtonVisible ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CreateButton, {\n        ...createButtonProps\n    }) : null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...wrapperProps ?? {}\n    }, breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.list`, getUserFriendlyName(((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.label) ?? ((_b = resource == null ? void 0 : resource.options) == null ? void 0 : _b.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"plural\"))),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            createButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        ...contentProps ?? {}\n    }, children));\n}, \"List\");\n// src/components/crud/show/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar Show = /* @__PURE__ */ __name(({ title, canEdit, canDelete, isLoading = false, children, resource: resourceFromProps, recordItemId, breadcrumb: breadcrumbFromProps, dataProviderName, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps })=>{\n    var _a, _b, _c;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const { goBack, list: legacyGoList } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, id: idFromParams, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const goListPath = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useToPath)({\n        resource,\n        action: \"list\"\n    });\n    const id = recordItemId ?? idFromParams;\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const hasList = (resource == null ? void 0 : resource.list) && !recordItemId;\n    const hasDelete = canDelete ?? ((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.canDelete) ?? (resource == null ? void 0 : resource.canDelete);\n    const isDeleteButtonVisible = hasDelete && typeof id !== \"undefined\";\n    const isEditButtonVisible = canEdit ?? (resource == null ? void 0 : resource.canEdit) ?? !!(resource == null ? void 0 : resource.edit);\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const listButtonProps = hasList ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier\n    } : void 0;\n    const editButtonProps = isEditButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id\n    } : void 0;\n    const deleteButtonProps = isDeleteButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        onSuccess: ()=>{\n            if (routerType === \"legacy\") {\n                legacyGoList((resource == null ? void 0 : resource.route) ?? (resource == null ? void 0 : resource.name) ?? \"\");\n            } else {\n                go({\n                    to: goListPath\n                });\n            }\n        },\n        dataProviderName\n    } : void 0;\n    const refreshButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        dataProviderName\n    };\n    const defaultHeaderButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, hasList && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ListButton, {\n        ...listButtonProps\n    }), isEditButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(EditButton, {\n        ...editButtonProps\n    }), isDeleteButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(DeleteButton, {\n        ...deleteButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RefreshButton, {\n        ...refreshButtonProps\n    }));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...wrapperProps ?? {}\n    }, breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.show`, `Show ${getUserFriendlyName(((_b = resource == null ? void 0 : resource.meta) == null ? void 0 : _b.label) ?? ((_c = resource == null ? void 0 : resource.options) == null ? void 0 : _c.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n            onClick: action !== \"list\" && typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_49__[\"default\"], null)),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            deleteButtonProps,\n            editButtonProps,\n            listButtonProps,\n            refreshButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        sx: {\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: null\n    }) : footerButtons : null));\n}, \"Show\");\n// src/components/buttons/create/index.tsx\n\n\n\n\n\nvar CreateButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, disabled, hidden, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCreateButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        meta,\n        accessControl\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        variant: \"contained\",\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.CreateButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"CreateButton\");\n// src/components/buttons/edit/index.tsx\n\n\n\n\n\nvar EditButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useEditButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        accessControl,\n        meta\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n            sx: {\n                selfAlign: \"center\"\n            },\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.EditButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"EditButton\");\n// src/components/buttons/delete/index.tsx\n\n\n\n\n\n\n\n\n\nvar DeleteButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, onSuccess, mutationMode, children, successNotification, errorNotification, hideText = false, accessControl, meta, metaData, dataProviderName, confirmTitle, confirmOkText, confirmCancelText, svgIconProps, invalidates, ...rest })=>{\n    const { onConfirm, title, label, hidden, disabled, loading, confirmTitle: defaultConfirmTitle, confirmOkLabel, cancelLabel } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useDeleteButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        dataProviderName,\n        mutationMode,\n        accessControl,\n        invalidates,\n        onSuccess,\n        meta,\n        successNotification,\n        errorNotification\n    });\n    const [open, setOpen] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const { sx, ...restProps } = rest;\n    if (hidden) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n        color: \"error\",\n        onClick: ()=>setOpen(true),\n        disabled,\n        loading,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_54__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        loadingPosition: hideText ? \"center\" : \"start\",\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.DeleteButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_54__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Dialog__WEBPACK_IMPORTED_MODULE_55__[\"default\"], {\n        open,\n        onClose: ()=>setOpen(false),\n        \"aria-labelledby\": \"alert-dialog-title\",\n        \"aria-describedby\": \"alert-dialog-description\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_DialogTitle__WEBPACK_IMPORTED_MODULE_56__[\"default\"], {\n        id: \"alert-dialog-title\"\n    }, confirmTitle ?? defaultConfirmTitle), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_DialogActions__WEBPACK_IMPORTED_MODULE_57__[\"default\"], {\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        onClick: ()=>setOpen(false)\n    }, confirmCancelText ?? cancelLabel), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        color: \"error\",\n        onClick: ()=>{\n            onConfirm();\n            setOpen(false);\n        },\n        autoFocus: true\n    }, confirmOkText ?? confirmOkLabel))));\n}, \"DeleteButton\");\n// src/components/buttons/refresh/index.tsx\n\n\n\n\n\nvar RefreshButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, dataProviderName, svgIconProps, children, onClick, meta: _meta, metaData: _metaData, ...rest })=>{\n    const { onClick: onRefresh, loading, label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefreshButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        dataProviderName\n    });\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_58__[\"default\"], {\n            ...svgIconProps\n        }),\n        loading,\n        loadingPosition: hideText ? \"center\" : \"start\",\n        onClick: onClick ? onClick : onRefresh,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.RefreshButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_58__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"RefreshButton\");\n// src/components/buttons/show/index.tsx\n\n\n\n\n\nvar ShowButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useShowButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        accessControl,\n        meta\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_59__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.ShowButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_59__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ShowButton\");\n// src/components/buttons/list/index.tsx\n\n\n\n\n\nvar ListButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useListButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        meta,\n        accessControl\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.ListButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ListButton\");\n// src/components/buttons/export/index.tsx\n\n\n\n\n\nvar ExportButton = /* @__PURE__ */ __name(({ hideText = false, children, loading = false, svgIconProps, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useExportButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n        ...rest,\n        loading,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_60__[\"default\"], {\n            ...svgIconProps\n        }),\n        loadingPosition: hideText ? \"center\" : \"start\",\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.ExportButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_60__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"ExportButton\");\n// src/components/buttons/save/index.tsx\n\n\n\n\n\nvar SaveButton = /* @__PURE__ */ __name(({ hideText = false, svgIconProps, children, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSaveButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_61__[\"default\"], {\n            ...svgIconProps\n        }),\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        variant: \"contained\",\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.SaveButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_61__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"SaveButton\");\n// src/components/buttons/clone/index.tsx\n\n\n\n\n\nvar CloneButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCloneButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        meta,\n        accessControl\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.CloneButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"CloneButton\");\n// src/components/buttons/import/index.tsx\n\n\n\n\n\nvar ImportButton = /* @__PURE__ */ __name(({ inputProps, hideText = false, loading = false, svgIconProps, children, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useImportButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"label\", {\n        htmlFor: \"contained-button-file\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"input\", {\n        ...inputProps,\n        id: \"contained-button-file\",\n        multiple: true,\n        hidden: true\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n        component: \"span\",\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_60__[\"default\"], {\n            ...svgIconProps\n        }),\n        loadingPosition: hideText ? \"center\" : \"start\",\n        loading,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.ImportButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_60__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ImportButton\");\n// src/components/circularDeterminate/index.tsx\n\n\n\n\nvar CircularDeterminate = /* @__PURE__ */ __name(({ undoableTimeout, message })=>{\n    const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(100);\n    const [timeCount, setTimeCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undoableTimeout);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const increaseProgress = 100 / undoableTimeout;\n        const timer = setInterval(()=>{\n            setTimeCount((prevProgress)=>prevProgress - 1);\n            setProgress((prevProgress)=>prevProgress - increaseProgress);\n        }, 1e3);\n        if (timeCount === 0) {\n            clearInterval(timer);\n        }\n        return ()=>{\n            clearInterval(timer);\n        };\n    }, [\n        timeCount\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            position: \"relative\",\n            display: \"inline-flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_62__[\"default\"], {\n        color: \"inherit\",\n        variant: \"determinate\",\n        value: progress\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: \"absolute\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"div\"\n    }, timeCount))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            marginLeft: \"10px\",\n            maxWidth: {\n                xs: \"150px\",\n                md: \"100%\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"subtitle2\"\n    }, message)));\n}, \"CircularDeterminate\");\n// src/components/fields/text/index.tsx\n\n\nvar TextField6 = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, value);\n}, \"TextField\");\n// src/components/fields/tag/index.tsx\n\n\nvar TagField = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Chip__WEBPACK_IMPORTED_MODULE_63__[\"default\"], {\n        label: value == null ? void 0 : value.toString(),\n        ...rest\n    });\n}, \"TagField\");\n// src/components/fields/email/index.tsx\n\n\n\nvar EmailField = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: `mailto:${value}`,\n        ...rest\n    }, value));\n}, \"EmailField\");\n// src/components/fields/boolean/index.tsx\n\n\n\n\nvar BooleanField = /* @__PURE__ */ __name(({ value, valueLabelTrue = \"true\", valueLabelFalse = \"false\", trueIcon, falseIcon, svgIconProps, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: value ? valueLabelTrue : valueLabelFalse,\n        ...rest\n    }, value ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, trueIcon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_CheckOutlined__WEBPACK_IMPORTED_MODULE_64__[\"default\"], {\n        ...svgIconProps\n    })) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, falseIcon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_CloseOutlined__WEBPACK_IMPORTED_MODULE_65__[\"default\"], {\n        ...svgIconProps\n    })));\n}, \"BooleanField\");\n// src/components/fields/date/index.tsx\n\n\n\n\ndayjs__WEBPACK_IMPORTED_MODULE_66__.extend(dayjs_plugin_localizedFormat_js__WEBPACK_IMPORTED_MODULE_67__);\nvar defaultLocale = dayjs__WEBPACK_IMPORTED_MODULE_66__.locale();\nvar DateField = /* @__PURE__ */ __name(({ value, locales, format: dateFormat = \"L\", ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, dayjs__WEBPACK_IMPORTED_MODULE_66__(value).locale(locales || defaultLocale).format(dateFormat));\n}, \"DateField\");\n// src/components/fields/file/index.tsx\n\nvar FileField = /* @__PURE__ */ __name(({ title, src, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(UrlField, {\n        value: src,\n        title,\n        ...rest\n    }, title ?? src);\n}, \"FileField\");\n// src/components/fields/url/index.tsx\n\n\n\nvar UrlField = /* @__PURE__ */ __name(({ children, value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: value,\n        ...rest\n    }, children ?? value));\n}, \"UrlField\");\n// src/components/fields/number/index.tsx\n\n\nfunction toLocaleStringSupportsOptions() {\n    return !!(typeof Intl === \"object\" && Intl && typeof Intl.NumberFormat === \"function\");\n}\n__name(toLocaleStringSupportsOptions, \"toLocaleStringSupportsOptions\");\nvar NumberField = /* @__PURE__ */ __name(({ value, locale, options, ...rest })=>{\n    const number = Number(value);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, toLocaleStringSupportsOptions() ? number.toLocaleString(locale, options) : number);\n}, \"NumberField\");\n// src/components/fields/markdown/index.tsx\n\n\n\nvar MarkdownField = /* @__PURE__ */ __name(({ value = \"\" })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react_markdown__WEBPACK_IMPORTED_MODULE_68__, {\n        remarkPlugins: [\n            remark_gfm__WEBPACK_IMPORTED_MODULE_69__\n        ]\n    }, value);\n}, \"MarkdownField\");\n// src/components/breadcrumb/index.tsx\n\n\n\n\n\n\n\nvar Breadcrumb = /* @__PURE__ */ __name(({ breadcrumbProps, showHome = true, hideIcons = false, meta })=>{\n    var _a, _b;\n    const { breadcrumbs } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBreadcrumb)({\n        meta\n    });\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const NewLink = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : NewLink;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const { resources } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)();\n    const rootRouteResource = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.matchResourceFromRoute)(\"/\", resources);\n    if (breadcrumbs.length === 1) {\n        return null;\n    }\n    const LinkRouter = /* @__PURE__ */ __name((props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n            ...props,\n            component: ActiveLink\n        }), \"LinkRouter\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Breadcrumbs__WEBPACK_IMPORTED_MODULE_70__[\"default\"], {\n        \"aria-label\": \"breadcrumb\",\n        sx: {\n            paddingY: 2,\n            paddingX: 2,\n            ...(breadcrumbProps == null ? void 0 : breadcrumbProps.sx) ?? {}\n        },\n        ...breadcrumbProps\n    }, showHome && (hasDashboard || rootRouteResource.found) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkRouter, {\n        underline: \"hover\",\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\"\n        },\n        color: \"inherit\",\n        to: \"/\"\n    }, ((_b = (_a = rootRouteResource == null ? void 0 : rootRouteResource.resource) == null ? void 0 : _a.meta) == null ? void 0 : _b.icon) ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_HomeOutlined__WEBPACK_IMPORTED_MODULE_71__[\"default\"], {\n        sx: {\n            fontSize: \"18px\"\n        }\n    })), breadcrumbs.map(({ label, icon, href })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n            key: label,\n            sx: {\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .MuiSvgIcon-root\": {\n                    fontSize: \"16px\"\n                }\n            }\n        }, !hideIcons && icon, href ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkRouter, {\n            underline: \"hover\",\n            sx: {\n                display: \"flex\",\n                alignItems: \"center\",\n                fontSize: \"14px\"\n            },\n            color: \"inherit\",\n            to: href,\n            variant: \"subtitle1\",\n            marginLeft: 0.5\n        }, label) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            fontSize: \"14px\"\n        }, label));\n    }));\n}, \"Breadcrumb\");\n// src/components/autoSaveIndicator/index.tsx\n\n\n\n\n\n\n\nvar AutoSaveIndicator = /* @__PURE__ */ __name(({ status, elements: { success = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    key: \"autoSave.success\",\n    defaultMessage: \"saved\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_TaskAltOutlined__WEBPACK_IMPORTED_MODULE_72__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), error = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    key: \"autoSave.error\",\n    defaultMessage: \"auto save failure\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ErrorOutlineOutlined__WEBPACK_IMPORTED_MODULE_73__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), loading = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    key: \"autoSave.loading\",\n    defaultMessage: \"saving...\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SyncOutlined__WEBPACK_IMPORTED_MODULE_74__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), idle = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    key: \"autoSave.idle\",\n    defaultMessage: \"waiting for changes\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_MoreHorizOutlined__WEBPACK_IMPORTED_MODULE_75__[\"default\"], {\n        fontSize: \"small\"\n    })\n}) } = {} })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.AutoSaveIndicator, {\n        status,\n        elements: {\n            success,\n            error,\n            loading,\n            idle\n        }\n    });\n}, \"AutoSaveIndicator\");\nvar Message = /* @__PURE__ */ __name(({ key, defaultMessage, icon })=>{\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        color: \"gray\",\n        fontSize: \"0.8rem\",\n        position: \"relative\",\n        display: \"flex\",\n        alignItems: \"center\",\n        flexWrap: \"wrap\",\n        marginRight: \".3rem\"\n    }, translate(key, defaultMessage), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        style: {\n            position: \"relative\",\n            top: \"3px\",\n            marginLeft: \"3px\"\n        }\n    }, icon));\n}, \"Message\");\n// src/theme/index.ts\n\n// src/theme/palette/lightPalette.ts\nvar lightPalette = {\n    mode: \"light\",\n    primary: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    secondary: {\n        main: \"#2A132E\",\n        contrastText: \"#fff\"\n    },\n    background: {\n        default: \"#f0f0f0\",\n        paper: \"#ffffff\"\n    },\n    success: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    error: {\n        main: \"#fa541c\",\n        contrastText: \"#fff\"\n    },\n    warning: {\n        main: \"#fa8c16\",\n        contrastText: \"#fff\"\n    },\n    info: {\n        main: \"#0b82f0\",\n        contrastText: \"#fff\"\n    },\n    divider: \"rgba(0,0,0,0)\",\n    text: {\n        primary: \"#626262\",\n        secondary: \"#9f9f9f\",\n        disabled: \"#c1c1c1\"\n    }\n};\n// src/theme/palette/darkPalette.ts\nvar darkPalette = {\n    mode: \"dark\",\n    primary: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    secondary: {\n        main: \"#2A132E\",\n        contrastText: \"#fff\"\n    },\n    background: {\n        default: \"#212121\",\n        paper: \"#242424\"\n    },\n    success: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    error: {\n        main: \"#ee2a1e\",\n        contrastText: \"#fff\"\n    },\n    warning: {\n        main: \"#fa8c16\",\n        contrastText: \"#fff\"\n    },\n    info: {\n        main: \"#1890ff\",\n        contrastText: \"#fff\"\n    },\n    divider: \"rgba(0,0,0,0)\",\n    text: {\n        primary: \"#fff\",\n        secondary: \"rgba(255,255,255,0.7)\",\n        disabled: \"#d1d1d1\"\n    }\n};\n// src/theme/typography.ts\nvar typography = {\n    fontFamily: [\n        \"Montserrat\",\n        \"-apple-system\",\n        \"BlinkMacSystemFont\",\n        '\"Segoe UI\"',\n        \"Roboto\",\n        '\"Helvetica Neue\"',\n        \"Arial\",\n        \"sans-serif\",\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"'\n    ].join(\",\")\n};\n// src/theme/palette/refinePalette.ts\nvar RefinePalettes = {\n    Blue: {\n        mode: \"light\",\n        primary: {\n            main: \"#1976D2\",\n            light: \"#4791db\",\n            dark: \"#115293\"\n        }\n    },\n    BlueDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#67b7f7\",\n            light: \"#85c5f8\",\n            dark: \"#4880ac\"\n        }\n    },\n    Purple: {\n        mode: \"light\",\n        primary: {\n            main: \"#7B1FA2\",\n            light: \"#954bb4\",\n            dark: \"#561571\"\n        }\n    },\n    PurpleDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#AB47BC\",\n            light: \"#bb6bc9\",\n            dark: \"#773183\"\n        }\n    },\n    Magenta: {\n        mode: \"light\",\n        primary: {\n            main: \"#C2185B\",\n            light: \"#ce467b\",\n            dark: \"#87103f\"\n        }\n    },\n    MagentaDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#EC407A\",\n            light: \"#ef6694\",\n            dark: \"#a52c55\"\n        }\n    },\n    Red: {\n        mode: \"light\",\n        primary: {\n            main: \"#D32F2F\",\n            light: \"#db5858\",\n            dark: \"#932020\"\n        }\n    },\n    RedDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#EF5350\",\n            light: \"#f27573\",\n            dark: \"#a73a38\"\n        }\n    },\n    Orange: {\n        mode: \"light\",\n        primary: {\n            main: \"#F57C00\",\n            light: \"#f79633\",\n            dark: \"#ab5600\"\n        }\n    },\n    OrangeDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#FFA726\",\n            light: \"#ffb851\",\n            dark: \"#b2741a\"\n        }\n    },\n    Yellow: {\n        mode: \"light\",\n        primary: {\n            main: \"#FFA000\",\n            light: \"#ffb333\",\n            dark: \"#b27000\"\n        }\n    },\n    YellowDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#FFCA28\",\n            light: \"#ffd453\",\n            dark: \"#E87040\"\n        }\n    },\n    Green: {\n        mode: \"light\",\n        primary: {\n            main: \"#689F38\",\n            light: \"#86b25f\",\n            dark: \"#486f27\"\n        }\n    },\n    GreenDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#9CCC65\",\n            light: \"#afd683\",\n            dark: \"#6d8e46\"\n        }\n    }\n};\n// src/theme/index.ts\nvar commonThemeProperties = {\n    shape: {\n        borderRadius: 6\n    },\n    typography: {\n        ...typography\n    }\n};\nvar LightTheme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_76__[\"default\"])({\n    ...commonThemeProperties,\n    palette: lightPalette,\n    components: {\n        MuiAppBar: {\n            styleOverrides: {\n                colorDefault: {\n                    backgroundColor: \"#fff\"\n                }\n            }\n        },\n        MuiPaper: {\n            styleOverrides: {\n                root: {\n                    backgroundImage: \"linear-gradient(rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.01))\"\n                }\n            }\n        },\n        MuiTypography: {\n            styleOverrides: {\n                h5: {\n                    fontWeight: 800,\n                    lineHeight: \"2rem\"\n                }\n            }\n        }\n    }\n});\nvar DarkTheme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_76__[\"default\"])({\n    ...commonThemeProperties,\n    palette: darkPalette,\n    components: {\n        MuiPaper: {\n            styleOverrides: {\n                root: {\n                    backgroundImage: \"linear-gradient(rgba(255, 255, 255, 0.025), rgba(255, 255, 255, 0.025))\"\n                }\n            }\n        },\n        MuiAppBar: {\n            defaultProps: {\n                color: \"transparent\"\n            }\n        },\n        MuiTypography: {\n            styleOverrides: {\n                h5: {\n                    fontWeight: 800,\n                    lineHeight: \"2rem\"\n                }\n            }\n        }\n    }\n});\nvar RefineThemes = Object.keys(RefinePalettes).reduce((acc, key)=>{\n    const paletteName = key;\n    return {\n        ...acc,\n        [key]: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_76__[\"default\"])({\n            palette: {\n                ...RefinePalettes[paletteName]\n            },\n            components: {\n                MuiButton: {\n                    styleOverrides: {\n                        root: ({ ownerState })=>({\n                                ...ownerState.variant === \"contained\" && ownerState.color === \"primary\" && {\n                                    color: \"#fff\"\n                                }\n                            })\n                    }\n                }\n            }\n        })\n    };\n}, {});\n// src/providers/notificationProvider/index.tsx\n\n\n\n\n\n\nvar useNotificationProvider = /* @__PURE__ */ __name(()=>{\n    const { closeSnackbar, enqueueSnackbar } = (0,notistack__WEBPACK_IMPORTED_MODULE_0__.useSnackbar)();\n    const notificationProvider2 = {\n        open: ({ message, type, undoableTimeout, key, cancelMutation, description })=>{\n            if (type === \"progress\") {\n                const action = /* @__PURE__ */ __name((key2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                        onClick: ()=>{\n                            cancelMutation == null ? void 0 : cancelMutation();\n                            closeSnackbar(key2);\n                        },\n                        color: \"inherit\"\n                    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_UndoOutlined__WEBPACK_IMPORTED_MODULE_77__[\"default\"], null)), \"action\");\n                enqueueSnackbar(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CircularDeterminate, {\n                    undoableTimeout: undoableTimeout ?? 0,\n                    message\n                })), {\n                    action,\n                    preventDuplicate: true,\n                    key,\n                    autoHideDuration: (undoableTimeout ?? 0) * 1e3\n                });\n            } else {\n                enqueueSnackbar(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                    variant: \"subtitle2\",\n                    component: \"h6\"\n                }, description), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                    variant: \"caption\",\n                    component: \"p\"\n                }, message)), {\n                    key,\n                    variant: type\n                });\n            }\n        },\n        close: (key)=>{\n            closeSnackbar(key);\n        }\n    };\n    return notificationProvider2;\n}, \"useNotificationProvider\");\nvar notificationProvider = useNotificationProvider;\n// src/providers/refineSnackbarProvider/index.tsx\n\n\n\nvar SnackbarProviderWithDefaultValues = /* @__PURE__ */ __name(({ anchorOrigin = {\n    vertical: \"top\",\n    horizontal: \"right\"\n}, disableWindowBlurListener = true, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarProvider, {\n        anchorOrigin,\n        disableWindowBlurListener,\n        ...rest\n    });\n}, \"SnackbarProviderWithDefaultValues\");\nvar RefineSnackbarProvider = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_78__[\"default\"])(SnackbarProviderWithDefaultValues)`\n&.SnackbarItem-contentRoot {\n    background-color: ${(props)=>props.theme.palette.background.default};\n    color: ${(props)=>props.theme.palette.primary.main};\n}\n&.SnackbarItem-variantSuccess {\n    background-color: ${(props)=>props.theme.palette.success.main};\n    color: ${(props)=>props.theme.palette.success.contrastText};\n}\n&.SnackbarItem-variantError {\n    background-color: ${(props)=>props.theme.palette.error.main};\n    color: ${(props)=>props.theme.palette.error.contrastText};\n}\n&.SnackbarItem-variantInfo {\n    background-color: ${(props)=>props.theme.palette.info.main};\n    color: ${(props)=>props.theme.palette.info.contrastText};\n}\n&.SnackbarItem-variantWarning {\n    background-color: ${(props)=>props.theme.palette.warning.main};\n    color: ${(props)=>props.theme.palette.warning.contrastText};\n}\n`;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/mui/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigateToResource: () => (/* binding */ v),\n/* harmony export */   RefineRoutes: () => (/* binding */ M),\n/* harmony export */   \"default\": () => (/* binding */ k),\n/* harmony export */   paramsFromCurrentPath: () => (/* binding */ P),\n/* harmony export */   parseTableParams: () => (/* binding */ H),\n/* harmony export */   stringifyConfig: () => (/* binding */ T)\n/* harmony export */ });\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* harmony import */ var next_navigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/navigation.js */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var next_link_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link.js */ \"(ssr)/./node_modules/next/dist/api/link.js\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/@refinedev/nextjs-router/node_modules/qs/lib/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ NavigateToResource,RefineRoutes,default,paramsFromCurrentPath,parseTableParams,stringifyConfig auto */ \n\n\n\n\nvar P = (e, r)=>{\n    let t = {}, o = r.replace(/^\\/|\\/$/g, \"\"), n = e.replace(/^\\/|\\/$/g, \"\"), s = o.split(\"/\"), a = n.split(\"/\");\n    return s.forEach((i, u)=>{\n        var p;\n        i.startsWith(\":\") && ((p = a[u]) == null ? void 0 : p.length) > 0 && (t[i.replace(\":\", \"\")] = a[u]);\n    }), t;\n};\nvar R = (e)=>{\n    if (typeof e > \"u\") return e;\n    let r = Number(e);\n    return `${r}` === e ? r : e;\n};\nvar T = {\n    addQueryPrefix: !0,\n    skipNulls: !0,\n    arrayFormat: \"indices\",\n    encode: !1,\n    encodeValuesOnly: !0\n}, k = {\n    go: ()=>{\n        let { push: e, replace: r } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)(), t = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), o = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)();\n        return react__WEBPACK_IMPORTED_MODULE_2__.useCallback(({ to: s, type: a, query: i, options: { keepQuery: u, keepHash: p } = {}, hash: c })=>{\n            let m = \"\";\n            p && typeof document < \"u\" && (m = document.location.hash), c && (m = `#${c.replace(/^#/, \"\")}`);\n            let d = {\n                ...u ? qs__WEBPACK_IMPORTED_MODULE_3__.parse(o.toString(), {\n                    ignoreQueryPrefix: !0\n                }) : {},\n                ...i\n            };\n            d.to && (d.to = encodeURIComponent(`${d.to}`));\n            let N = (t == null ? void 0 : t.split(\"?\")[0].split(\"#\")[0]) ?? \"\", S = s || N, $ = m.length > 1, z = Object.keys(d).length > 0, g = `${S}${z ? qs__WEBPACK_IMPORTED_MODULE_3__.stringify(d, T) : \"\"}${$ ? m : \"\"}`;\n            if (a === \"path\") return g;\n            a === \"replace\" ? r(g) : e(g);\n        }, [\n            o,\n            e,\n            r\n        ]);\n    },\n    back: ()=>{\n        let { back: e } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)();\n        return e;\n    },\n    parse: ()=>{\n        let e = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), r = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)(), { resources: t } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.ResourceContext), { resource: o, action: n, matchedRoute: s } = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>e ? (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.matchResourceFromRoute)(e, t) : {\n                found: !1\n            }, [\n            e,\n            t\n        ]), a = s && e ? P(e, s) : {}, i = a.id, u = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>{\n            let c = r.toString();\n            return qs__WEBPACK_IMPORTED_MODULE_3__.parse(c, {\n                ignoreQueryPrefix: !0\n            });\n        }, [\n            r\n        ]);\n        return react__WEBPACK_IMPORTED_MODULE_2__.useCallback(()=>{\n            let c = {\n                ...a,\n                ...u\n            };\n            return {\n                ...o && {\n                    resource: o\n                },\n                ...n && {\n                    action: n\n                },\n                ...i && {\n                    id: decodeURIComponent(i)\n                },\n                pathname: e || void 0,\n                params: {\n                    ...c,\n                    current: R(c.current),\n                    pageSize: R(c.pageSize),\n                    to: c.to ? decodeURIComponent(c.to) : void 0\n                }\n            };\n        }, [\n            e,\n            u,\n            a,\n            i,\n            o,\n            n\n        ]);\n    },\n    Link: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(function({ to: r, ...t }, o) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(next_link_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n            href: r,\n            ...t,\n            ref: o\n        });\n    })\n};\n\n\n\nvar M = ({ children: e })=>{\n    let { resource: r, action: t } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useResource)(), o = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), n = r && t ? r[t] : void 0, s = typeof n == \"function\" ? n : typeof n == \"object\" ? n.component : void 0;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, null, e ? e(s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(s, null) : void 0, o ?? void 0) : s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(s, null) : void 0);\n};\n\n\n\nvar v = ({ resource: e, meta: r })=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_2__.useRef(!1), { replace: o } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useGetToPath)(), { resource: s, resources: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useResource)(e), i = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>s || a.find((u)=>u.list), [\n        s,\n        a\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (i && !t.current) {\n            let u = n({\n                resource: i,\n                action: \"list\",\n                meta: r\n            });\n            u && o(u), t.current = !0;\n        }\n    }, [\n        i,\n        o,\n        r,\n        n\n    ]), null;\n};\n\nvar G = (e)=>{\n    let r = qs__WEBPACK_IMPORTED_MODULE_3__.parse(e, {\n        ignoreQueryPrefix: !0\n    }), t = {\n        ...r,\n        pagination: {\n            current: r.current,\n            pageSize: r.pageSize\n        }\n    };\n    return delete t.current, delete t.pageSize, t;\n}, H = G;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@refinedev/react-hook-form/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useForm: () => (/* binding */ C),\n/* harmony export */   useModalForm: () => (/* binding */ xe),\n/* harmony export */   useStepsForm: () => (/* binding */ le)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/get.js */ \"(ssr)/./node_modules/lodash-es/get.js\");\n/* harmony import */ var lodash_es_has_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/has.js */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ \"(ssr)/./node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ useForm,useModalForm,useStepsForm auto */ var L = Object.defineProperty;\nvar F = (t, a)=>L(t, \"name\", {\n        value: a,\n        configurable: !0\n    });\n\n\n\n\n\nvar C = F(({ refineCoreProps: t, warnWhenUnsavedChanges: a, disableServerSideValidation: c = !1, ...g } = {})=>{\n    let { options: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useRefineContext)(), S = (y == null ? void 0 : y.disableServerSideValidation) || c, h = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useTranslate)(), { warnWhenUnsavedChanges: U, setWarnWhen: b } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useWarnAboutChange)(), f = a ?? U, o = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.useForm)({\n        ...g\n    }), { watch: m, setValue: R, getValues: i, handleSubmit: n, setError: E } = o, x = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useForm)({\n        ...t,\n        onMutationError: (r, s, e)=>{\n            var v, H;\n            if (S) {\n                (v = t == null ? void 0 : t.onMutationError) == null || v.call(t, r, s, e);\n                return;\n            }\n            let u = r == null ? void 0 : r.errors;\n            for(let V in u){\n                if (!Object.keys((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.flattenObjectKeys)(s)).includes(V)) continue;\n                let p = u[V], D = \"\";\n                Array.isArray(p) && (D = p.join(\" \")), typeof p == \"string\" && (D = p), typeof p == \"boolean\" && p && (D = \"Field is not valid.\"), typeof p == \"object\" && \"key\" in p && (D = h(p.key, p.message)), E(V, {\n                    message: D\n                });\n            }\n            (H = t == null ? void 0 : t.onMutationError) == null || H.call(t, r, s, e);\n        }\n    }), { queryResult: l, onFinish: d, formLoading: B, onFinishAutoSave: M } = x;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var e;\n        let r = (e = l == null ? void 0 : l.data) == null ? void 0 : e.data;\n        if (!r) return;\n        Object.keys((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.flattenObjectKeys)(i())).forEach((u)=>{\n            let v = (0,lodash_es_has_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(r, u), H = (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(r, u);\n            v && R(u, H);\n        });\n    }, [\n        l == null ? void 0 : l.data,\n        R,\n        i\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let r = m((s, { type: e })=>{\n            e === \"change\" && W(s);\n        });\n        return ()=>r.unsubscribe();\n    }, [\n        m\n    ]);\n    let W = F((r)=>{\n        var s;\n        if (f && b(!0), t != null && t.autoSave) {\n            b(!1);\n            let e = ((s = t.autoSave) == null ? void 0 : s.onFinish) ?? ((u)=>u);\n            return M(e(r)).catch((u)=>u);\n        }\n        return r;\n    }, \"onValuesChange\"), Q = F((r, s)=>async (e)=>(b(!1), n(r, s)(e)), \"handleSubmit\");\n    return {\n        ...o,\n        handleSubmit: Q,\n        refineCore: x,\n        saveButtonProps: {\n            disabled: B,\n            onClick: (r)=>{\n                Q((s)=>d(s).catch(()=>{}), ()=>!1)(r);\n            }\n        }\n    };\n}, \"useForm\");\n\n\nvar le = F(({ stepsProps: t, ...a } = {})=>{\n    let { defaultStep: c = 0, isBackValidate: g = !1 } = t ?? {}, [y, S] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(c), h = C({\n        ...a\n    }), { trigger: U, getValues: b, setValue: f, formState: { dirtyFields: o }, refineCore: { queryResult: m } } = h;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var x;\n        let n = (x = m == null ? void 0 : m.data) == null ? void 0 : x.data;\n        if (!n) return;\n        let E = Object.keys(b());\n        console.log({\n            dirtyFields: o,\n            registeredFields: E,\n            data: n\n        }), Object.entries(n).forEach(([l, d])=>{\n            let B = l;\n            E.includes(B) && ((0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(o, B) || f(B, d));\n        });\n    }, [\n        m == null ? void 0 : m.data,\n        y,\n        f,\n        b\n    ]);\n    let R = F((n)=>{\n        let E = n;\n        n < 0 && (E = 0), S(E);\n    }, \"go\");\n    return {\n        ...h,\n        steps: {\n            currentStep: y,\n            gotoStep: F(async (n)=>{\n                if (n === y) return;\n                if (n < y && !g) {\n                    R(n);\n                    return;\n                }\n                await U() && R(n);\n            }, \"gotoStep\")\n        }\n    };\n}, \"useStepsForm\");\n\n\n\nvar xe = F(({ modalProps: t, refineCoreProps: a, syncWithLocation: c, ...g } = {})=>{\n    var A, N;\n    let y = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useInvalidate)(), [S, h] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), U = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useTranslate)(), { resource: b, action: f } = a ?? {}, { resource: o, action: m, identifier: R } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useResource)(b), i = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useParsed)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useGo)(), E = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useUserFriendlyName)(), x = f ?? m ?? \"\", l = !(typeof c == \"object\" && (c == null ? void 0 : c.syncId) === !1), d = typeof c == \"object\" && \"key\" in c ? c.key : o && x && c ? `modal-${R}-${x}` : void 0, { defaultVisible: B = !1, autoSubmitClose: M = !0, autoResetForm: W = !0 } = t ?? {}, Q = C({\n        refineCoreProps: {\n            ...a,\n            meta: {\n                ...d ? {\n                    [d]: void 0\n                } : {},\n                ...a == null ? void 0 : a.meta\n            }\n        },\n        ...g\n    }), { reset: $, refineCore: { onFinish: r, id: s, setId: e, autoSaveProps: u }, saveButtonProps: v, handleSubmit: H } = Q, { visible: V, show: k, close: p } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useModal)({\n        defaultVisible: B\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var T, j, K, I;\n        if (S === !1 && d) {\n            let w = (j = (T = i == null ? void 0 : i.params) == null ? void 0 : T[d]) == null ? void 0 : j.open;\n            if (typeof w == \"boolean\" ? w && k() : typeof w == \"string\" && w === \"true\" && k(), l) {\n                let G = (I = (K = i == null ? void 0 : i.params) == null ? void 0 : K[d]) == null ? void 0 : I.id;\n                G && (e == null || e(G));\n            }\n            h(!0);\n        }\n    }, [\n        d,\n        i,\n        l,\n        e\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var T;\n        S === !0 && (V && d ? n({\n            query: {\n                [d]: {\n                    ...(T = i == null ? void 0 : i.params) == null ? void 0 : T[d],\n                    open: !0,\n                    ...l && s && {\n                        id: s\n                    }\n                }\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }) : d && !V && n({\n            query: {\n                [d]: void 0\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }));\n    }, [\n        s,\n        V,\n        k,\n        d,\n        l\n    ]);\n    let D = F(async (T)=>{\n        await r(T), M && p(), W && $();\n    }, \"submit\"), { warnWhen: O, setWarnWhen: X } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useWarnAboutChange)(), Z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        var T;\n        if (u.status === \"success\" && (T = a == null ? void 0 : a.autoSave) != null && T.invalidateOnClose && y({\n            id: s,\n            invalidates: a.invalidates || [\n                \"list\",\n                \"many\",\n                \"detail\"\n            ],\n            dataProviderName: a.dataProviderName,\n            resource: R\n        }), O) if (window.confirm(U(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"))) X(!1);\n        else return;\n        e == null || e(void 0), p();\n    }, [\n        O,\n        u.status\n    ]), _ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((T)=>{\n        typeof T < \"u\" && (e == null || e(T)), (!(x === \"edit\" || x === \"clone\") || typeof T < \"u\" || typeof s < \"u\") && k();\n    }, [\n        s\n    ]), q = U(`${R}.titles.${f}`, void 0, `${E(`${f} ${((A = o == null ? void 0 : o.meta) == null ? void 0 : A.label) ?? ((N = o == null ? void 0 : o.options) == null ? void 0 : N.label) ?? (o == null ? void 0 : o.label) ?? R}`, \"singular\")}`);\n    return {\n        modal: {\n            submit: D,\n            close: Z,\n            show: _,\n            visible: V,\n            title: q\n        },\n        ...Q,\n        saveButtonProps: {\n            ...v,\n            onClick: (T)=>H(D)(T)\n        }\n    };\n}, \"useModalForm\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   axiosInstance: () => (/* binding */ h),\n/* harmony export */   \"default\": () => (/* binding */ N),\n/* harmony export */   generateFilter: () => (/* binding */ g),\n/* harmony export */   generateSort: () => (/* binding */ f),\n/* harmony export */   mapOperator: () => (/* binding */ M),\n/* harmony export */   stringify: () => (/* reexport safe */ query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)\n/* harmony export */ });\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/query-string/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\nvar M=r=>{switch(r){case\"ne\":case\"gte\":case\"lte\":return`_${r}`;case\"contains\":return\"_like\";default:return\"\"}};var f=r=>{if(r&&r.length>0){let s=[],e=[];return r.map(t=>{s.push(t.field),e.push(t.order)}),{_sort:s,_order:e}}};var g=r=>{let s={};return r&&r.map(e=>{if(e.operator===\"or\"||e.operator===\"and\")throw new Error(`[@refinedev/simple-rest]: \\`operator: ${e.operator}\\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`);if(\"field\"in e){let{field:t,operator:o,value:n}=e;if(t===\"q\"){s[t]=n;return}let d=M(o);s[`${t}${d}`]=n}}),s};var h=axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create();h.interceptors.response.use(r=>r,r=>{var e,t,o;let s={...r,message:(t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message,statusCode:(o=r.response)==null?void 0:o.status};return Promise.reject(s)});var q=(r,s=h)=>({getList:async({resource:e,pagination:t,filters:o,sorters:n,meta:d})=>{let i=`${r}/${e}`,{current:c=1,pageSize:a=10,mode:p=\"server\"}=t??{},{headers:$,method:m}=d??{},x=m??\"get\",v=g(o),u={};p===\"server\"&&(u._start=(c-1)*a,u._end=c*a);let l=f(n);if(l){let{_sort:T,_order:b}=l;u._sort=T.join(\",\"),u._order=b.join(\",\")}let _={...u,...v},O=Object.keys(_).length?`${i}?${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(_)}`:i,{data:w,headers:F}=await s[x](O,{headers:$}),S=+F[\"x-total-count\"];return{data:w,total:S||w.length}},getMany:async({resource:e,ids:t,meta:o})=>{let{headers:n,method:d}=o??{},i=d??\"get\",{data:c}=await s[i](`${r}/${e}?${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)({id:t})}`,{headers:n});return{data:c}},create:async({resource:e,variables:t,meta:o})=>{let n=`${r}/${e}`,{headers:d,method:i}=o??{},c=i??\"post\",{data:a}=await s[c](n,t,{headers:d});return{data:a}},update:async({resource:e,id:t,variables:o,meta:n})=>{let d=`${r}/${e}/${t}`,{headers:i,method:c}=n??{},a=c??\"patch\",{data:p}=await s[a](d,o,{headers:i});return{data:p}},getOne:async({resource:e,id:t,meta:o})=>{let n=`${r}/${e}/${t}`,{headers:d,method:i}=o??{},c=i??\"get\",{data:a}=await s[c](n,{headers:d});return{data:a}},deleteOne:async({resource:e,id:t,variables:o,meta:n})=>{let d=`${r}/${e}/${t}`,{headers:i,method:c}=n??{},a=c??\"delete\",{data:p}=await s[a](d,{data:o,headers:i});return{data:p}},getApiUrl:()=>r,custom:async({url:e,method:t,filters:o,sorters:n,payload:d,query:i,headers:c})=>{let a=`${e}?`;if(n){let m=f(n);if(m){let{_sort:x,_order:v}=m,u={_sort:x.join(\",\"),_order:v.join(\",\")};a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(u)}`}}if(o){let m=g(o);a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(m)}`}i&&(a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(i)}`);let p;switch(t){case\"put\":case\"post\":case\"patch\":p=await s[t](e,d,{headers:c});break;case\"delete\":p=await s.delete(e,{data:d,headers:c});break;default:p=await s.get(a,{headers:c});break}let{data:$}=p;return Promise.resolve({data:$})}});var N=q;\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFrRixVQUFVLFVBQVUsdUNBQXVDLEVBQUUsRUFBRSw2QkFBNkIsbUJBQW1CLFVBQVUsa0JBQWtCLGNBQWMsaUJBQWlCLGdDQUFnQyxHQUFHLG9CQUFvQixVQUFVLFNBQVMsb0JBQW9CLGtHQUFrRyxXQUFXLHlKQUF5SixnQkFBZ0IsSUFBSSwyQkFBMkIsR0FBRyxZQUFZLE9BQU8sT0FBTyxXQUFXLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxLQUEwQixNQUFNLDZDQUFDLFVBQVUscUNBQXFDLFVBQVUsT0FBTyw0SEFBNEgseUJBQXlCLEVBQUUsaUJBQWlCLGVBQWUsbURBQW1ELElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLDBDQUEwQyxNQUFNLEVBQUUsbUJBQW1CLE1BQU0sd0JBQXdCLDRDQUE0QyxXQUFXLE1BQU0sSUFBSSxpQkFBaUIsR0FBRyx5Q0FBeUMsT0FBTyxVQUFVLDRCQUE0QixFQUFFLEdBQUcsdURBQUMsSUFBSSxLQUFLLGlCQUFpQixlQUFlLFVBQVUsd0JBQXdCLE9BQU8sMEJBQTBCLGdCQUFnQix3QkFBd0IsSUFBSSxJQUFJLG1CQUFtQixNQUFNLGFBQWEsT0FBTyxlQUFlLEVBQUUsR0FBRyxFQUFFLEdBQUcsdURBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxVQUFVLEVBQUUsT0FBTyxRQUFRLGVBQWUsOEJBQThCLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixNQUFNLGNBQWMsT0FBTyxpQkFBaUIsVUFBVSxFQUFFLE9BQU8sUUFBUSxlQUFlLG1DQUFtQyxJQUFJLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsbUJBQW1CLE1BQU0sZUFBZSxPQUFPLGlCQUFpQixVQUFVLEVBQUUsT0FBTyxRQUFRLGVBQWUsdUJBQXVCLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxtQkFBbUIsTUFBTSxhQUFhLE9BQU8sZUFBZSxVQUFVLEVBQUUsT0FBTyxRQUFRLGtCQUFrQixtQ0FBbUMsSUFBSSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixNQUFNLGdCQUFnQixPQUFPLGVBQWUsaUJBQWlCLEVBQUUsT0FBTyxRQUFRLCtCQUErQiwrREFBK0QsSUFBSSxTQUFTLEVBQUUsR0FBRyxNQUFNLFdBQVcsTUFBTSxJQUFJLGlCQUFpQixNQUFNLHNDQUFzQyxLQUFLLEVBQUUsR0FBRyx1REFBQyxJQUFJLEdBQUcsTUFBTSxXQUFXLEtBQUssRUFBRSxHQUFHLHVEQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyx1REFBQyxJQUFJLEdBQUcsTUFBTSxVQUFVLG1EQUFtRCxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsVUFBVSxFQUFFLE1BQU0sSUFBSSxPQUFPLEdBQUcsd0JBQXdCLE9BQU8sR0FBRyxFQUFFLFFBQXNIO0FBQzkwRiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZmluZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3QvZGlzdC9pbmRleC5tanM/MWMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7c3RyaW5naWZ5IGFzIEp9ZnJvbVwicXVlcnktc3RyaW5nXCI7aW1wb3J0e3N0cmluZ2lmeSBhcyB5fWZyb21cInF1ZXJ5LXN0cmluZ1wiO3ZhciBNPXI9Pntzd2l0Y2gocil7Y2FzZVwibmVcIjpjYXNlXCJndGVcIjpjYXNlXCJsdGVcIjpyZXR1cm5gXyR7cn1gO2Nhc2VcImNvbnRhaW5zXCI6cmV0dXJuXCJfbGlrZVwiO2RlZmF1bHQ6cmV0dXJuXCJcIn19O3ZhciBmPXI9PntpZihyJiZyLmxlbmd0aD4wKXtsZXQgcz1bXSxlPVtdO3JldHVybiByLm1hcCh0PT57cy5wdXNoKHQuZmllbGQpLGUucHVzaCh0Lm9yZGVyKX0pLHtfc29ydDpzLF9vcmRlcjplfX19O3ZhciBnPXI9PntsZXQgcz17fTtyZXR1cm4gciYmci5tYXAoZT0+e2lmKGUub3BlcmF0b3I9PT1cIm9yXCJ8fGUub3BlcmF0b3I9PT1cImFuZFwiKXRocm93IG5ldyBFcnJvcihgW0ByZWZpbmVkZXYvc2ltcGxlLXJlc3RdOiBcXGBvcGVyYXRvcjogJHtlLm9wZXJhdG9yfVxcYCBpcyBub3Qgc3VwcG9ydGVkLiBZb3UgY2FuIGNyZWF0ZSBjdXN0b20gZGF0YSBwcm92aWRlci4gaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL3Byb3ZpZGVycy9kYXRhLXByb3ZpZGVyLyNjcmVhdGluZy1hLWRhdGEtcHJvdmlkZXJgKTtpZihcImZpZWxkXCJpbiBlKXtsZXR7ZmllbGQ6dCxvcGVyYXRvcjpvLHZhbHVlOm59PWU7aWYodD09PVwicVwiKXtzW3RdPW47cmV0dXJufWxldCBkPU0obyk7c1tgJHt0fSR7ZH1gXT1ufX0pLHN9O2ltcG9ydCBqIGZyb21cImF4aW9zXCI7dmFyIGg9ai5jcmVhdGUoKTtoLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2Uocj0+cixyPT57dmFyIGUsdCxvO2xldCBzPXsuLi5yLG1lc3NhZ2U6KHQ9KGU9ci5yZXNwb25zZSk9PW51bGw/dm9pZCAwOmUuZGF0YSk9PW51bGw/dm9pZCAwOnQubWVzc2FnZSxzdGF0dXNDb2RlOihvPXIucmVzcG9uc2UpPT1udWxsP3ZvaWQgMDpvLnN0YXR1c307cmV0dXJuIFByb21pc2UucmVqZWN0KHMpfSk7dmFyIHE9KHIscz1oKT0+KHtnZXRMaXN0OmFzeW5jKHtyZXNvdXJjZTplLHBhZ2luYXRpb246dCxmaWx0ZXJzOm8sc29ydGVyczpuLG1ldGE6ZH0pPT57bGV0IGk9YCR7cn0vJHtlfWAse2N1cnJlbnQ6Yz0xLHBhZ2VTaXplOmE9MTAsbW9kZTpwPVwic2VydmVyXCJ9PXQ/P3t9LHtoZWFkZXJzOiQsbWV0aG9kOm19PWQ/P3t9LHg9bT8/XCJnZXRcIix2PWcobyksdT17fTtwPT09XCJzZXJ2ZXJcIiYmKHUuX3N0YXJ0PShjLTEpKmEsdS5fZW5kPWMqYSk7bGV0IGw9ZihuKTtpZihsKXtsZXR7X3NvcnQ6VCxfb3JkZXI6Yn09bDt1Ll9zb3J0PVQuam9pbihcIixcIiksdS5fb3JkZXI9Yi5qb2luKFwiLFwiKX1sZXQgXz17Li4udSwuLi52fSxPPU9iamVjdC5rZXlzKF8pLmxlbmd0aD9gJHtpfT8ke3koXyl9YDppLHtkYXRhOncsaGVhZGVyczpGfT1hd2FpdCBzW3hdKE8se2hlYWRlcnM6JH0pLFM9K0ZbXCJ4LXRvdGFsLWNvdW50XCJdO3JldHVybntkYXRhOncsdG90YWw6U3x8dy5sZW5ndGh9fSxnZXRNYW55OmFzeW5jKHtyZXNvdXJjZTplLGlkczp0LG1ldGE6b30pPT57bGV0e2hlYWRlcnM6bixtZXRob2Q6ZH09bz8/e30saT1kPz9cImdldFwiLHtkYXRhOmN9PWF3YWl0IHNbaV0oYCR7cn0vJHtlfT8ke3koe2lkOnR9KX1gLHtoZWFkZXJzOm59KTtyZXR1cm57ZGF0YTpjfX0sY3JlYXRlOmFzeW5jKHtyZXNvdXJjZTplLHZhcmlhYmxlczp0LG1ldGE6b30pPT57bGV0IG49YCR7cn0vJHtlfWAse2hlYWRlcnM6ZCxtZXRob2Q6aX09bz8/e30sYz1pPz9cInBvc3RcIix7ZGF0YTphfT1hd2FpdCBzW2NdKG4sdCx7aGVhZGVyczpkfSk7cmV0dXJue2RhdGE6YX19LHVwZGF0ZTphc3luYyh7cmVzb3VyY2U6ZSxpZDp0LHZhcmlhYmxlczpvLG1ldGE6bn0pPT57bGV0IGQ9YCR7cn0vJHtlfS8ke3R9YCx7aGVhZGVyczppLG1ldGhvZDpjfT1uPz97fSxhPWM/P1wicGF0Y2hcIix7ZGF0YTpwfT1hd2FpdCBzW2FdKGQsbyx7aGVhZGVyczppfSk7cmV0dXJue2RhdGE6cH19LGdldE9uZTphc3luYyh7cmVzb3VyY2U6ZSxpZDp0LG1ldGE6b30pPT57bGV0IG49YCR7cn0vJHtlfS8ke3R9YCx7aGVhZGVyczpkLG1ldGhvZDppfT1vPz97fSxjPWk/P1wiZ2V0XCIse2RhdGE6YX09YXdhaXQgc1tjXShuLHtoZWFkZXJzOmR9KTtyZXR1cm57ZGF0YTphfX0sZGVsZXRlT25lOmFzeW5jKHtyZXNvdXJjZTplLGlkOnQsdmFyaWFibGVzOm8sbWV0YTpufSk9PntsZXQgZD1gJHtyfS8ke2V9LyR7dH1gLHtoZWFkZXJzOmksbWV0aG9kOmN9PW4/P3t9LGE9Yz8/XCJkZWxldGVcIix7ZGF0YTpwfT1hd2FpdCBzW2FdKGQse2RhdGE6byxoZWFkZXJzOml9KTtyZXR1cm57ZGF0YTpwfX0sZ2V0QXBpVXJsOigpPT5yLGN1c3RvbTphc3luYyh7dXJsOmUsbWV0aG9kOnQsZmlsdGVyczpvLHNvcnRlcnM6bixwYXlsb2FkOmQscXVlcnk6aSxoZWFkZXJzOmN9KT0+e2xldCBhPWAke2V9P2A7aWYobil7bGV0IG09ZihuKTtpZihtKXtsZXR7X3NvcnQ6eCxfb3JkZXI6dn09bSx1PXtfc29ydDp4LmpvaW4oXCIsXCIpLF9vcmRlcjp2LmpvaW4oXCIsXCIpfTthPWAke2F9JiR7eSh1KX1gfX1pZihvKXtsZXQgbT1nKG8pO2E9YCR7YX0mJHt5KG0pfWB9aSYmKGE9YCR7YX0mJHt5KGkpfWApO2xldCBwO3N3aXRjaCh0KXtjYXNlXCJwdXRcIjpjYXNlXCJwb3N0XCI6Y2FzZVwicGF0Y2hcIjpwPWF3YWl0IHNbdF0oZSxkLHtoZWFkZXJzOmN9KTticmVhaztjYXNlXCJkZWxldGVcIjpwPWF3YWl0IHMuZGVsZXRlKGUse2RhdGE6ZCxoZWFkZXJzOmN9KTticmVhaztkZWZhdWx0OnA9YXdhaXQgcy5nZXQoYSx7aGVhZGVyczpjfSk7YnJlYWt9bGV0e2RhdGE6JH09cDtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtkYXRhOiR9KX19KTt2YXIgTj1xO2V4cG9ydHtoIGFzIGF4aW9zSW5zdGFuY2UsTiBhcyBkZWZhdWx0LGcgYXMgZ2VuZXJhdGVGaWx0ZXIsZiBhcyBnZW5lcmF0ZVNvcnQsTSBhcyBtYXBPcGVyYXRvcixKIGFzIHN0cmluZ2lmeX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@refinedev/ui-types/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RefineButtonClassNames: () => (/* binding */ n),\n/* harmony export */   RefineButtonTestIds: () => (/* binding */ e),\n/* harmony export */   RefinePageHeaderClassNames: () => (/* binding */ o)\n/* harmony export */ });\nvar e={CloneButton:\"refine-clone-button\",DeleteButton:\"refine-delete-button\",EditButton:\"refine-edit-button\",SaveButton:\"refine-save-button\",CreateButton:\"refine-create-button\",ImportButton:\"refine-import-button\",ExportButton:\"refine-export-button\",ListButton:\"refine-list-button\",RefreshButton:\"refine-refresh-button\",ShowButton:\"refine-show-button\"};var o={Title:\"refine-pageHeader-title\",SubTitle:\"refine-pageHeader-subTitle\"},n={CloneButton:\"refine-clone-button\",DeleteButton:\"refine-delete-button\",EditButton:\"refine-edit-button\",SaveButton:\"refine-save-button\",CreateButton:\"refine-create-button\",ImportButton:\"refine-import-button\",ExportButton:\"refine-export-button\",ListButton:\"refine-list-button\",RefreshButton:\"refine-refresh-button\",ShowButton:\"refine-show-button\"};\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi91aS10eXBlcy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLHlWQUF5VixPQUFPLHNFQUFzRSxJQUFJLHlWQUFzYjtBQUN2MkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWZpbmUtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3VpLXR5cGVzL2Rpc3QvaW5kZXgubWpzPzU3ZmEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGU9e0Nsb25lQnV0dG9uOlwicmVmaW5lLWNsb25lLWJ1dHRvblwiLERlbGV0ZUJ1dHRvbjpcInJlZmluZS1kZWxldGUtYnV0dG9uXCIsRWRpdEJ1dHRvbjpcInJlZmluZS1lZGl0LWJ1dHRvblwiLFNhdmVCdXR0b246XCJyZWZpbmUtc2F2ZS1idXR0b25cIixDcmVhdGVCdXR0b246XCJyZWZpbmUtY3JlYXRlLWJ1dHRvblwiLEltcG9ydEJ1dHRvbjpcInJlZmluZS1pbXBvcnQtYnV0dG9uXCIsRXhwb3J0QnV0dG9uOlwicmVmaW5lLWV4cG9ydC1idXR0b25cIixMaXN0QnV0dG9uOlwicmVmaW5lLWxpc3QtYnV0dG9uXCIsUmVmcmVzaEJ1dHRvbjpcInJlZmluZS1yZWZyZXNoLWJ1dHRvblwiLFNob3dCdXR0b246XCJyZWZpbmUtc2hvdy1idXR0b25cIn07dmFyIG89e1RpdGxlOlwicmVmaW5lLXBhZ2VIZWFkZXItdGl0bGVcIixTdWJUaXRsZTpcInJlZmluZS1wYWdlSGVhZGVyLXN1YlRpdGxlXCJ9LG49e0Nsb25lQnV0dG9uOlwicmVmaW5lLWNsb25lLWJ1dHRvblwiLERlbGV0ZUJ1dHRvbjpcInJlZmluZS1kZWxldGUtYnV0dG9uXCIsRWRpdEJ1dHRvbjpcInJlZmluZS1lZGl0LWJ1dHRvblwiLFNhdmVCdXR0b246XCJyZWZpbmUtc2F2ZS1idXR0b25cIixDcmVhdGVCdXR0b246XCJyZWZpbmUtY3JlYXRlLWJ1dHRvblwiLEltcG9ydEJ1dHRvbjpcInJlZmluZS1pbXBvcnQtYnV0dG9uXCIsRXhwb3J0QnV0dG9uOlwicmVmaW5lLWV4cG9ydC1idXR0b25cIixMaXN0QnV0dG9uOlwicmVmaW5lLWxpc3QtYnV0dG9uXCIsUmVmcmVzaEJ1dHRvbjpcInJlZmluZS1yZWZyZXNoLWJ1dHRvblwiLFNob3dCdXR0b246XCJyZWZpbmUtc2hvdy1idXR0b25cIn07ZXhwb3J0e24gYXMgUmVmaW5lQnV0dG9uQ2xhc3NOYW1lcyxlIGFzIFJlZmluZUJ1dHRvblRlc3RJZHMsbyBhcyBSZWZpbmVQYWdlSGVhZGVyQ2xhc3NOYW1lc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/core/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/core/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AccessControlContext: () => (/* binding */ e0),
/* harmony export */   AuthPage: () => (/* binding */ e1),
/* harmony export */   Authenticated: () => (/* binding */ e2),
/* harmony export */   AutoSaveIndicator: () => (/* binding */ e3),
/* harmony export */   CanAccess: () => (/* binding */ e4),
/* harmony export */   ErrorComponent: () => (/* binding */ e5),
/* harmony export */   GitHubBanner: () => (/* binding */ e6),
/* harmony export */   I18nContext: () => (/* binding */ e7),
/* harmony export */   KeyBuilder: () => (/* binding */ e8),
/* harmony export */   LayoutWrapper: () => (/* binding */ e9),
/* harmony export */   LoginPage: () => (/* binding */ e10),
/* harmony export */   ReadyPage: () => (/* binding */ e11),
/* harmony export */   Refine: () => (/* binding */ e12),
/* harmony export */   ResourceContext: () => (/* binding */ e13),
/* harmony export */   RouteChangeHandler: () => (/* binding */ e14),
/* harmony export */   TranslationContext: () => (/* binding */ e15),
/* harmony export */   UndoableQueue: () => (/* binding */ e16),
/* harmony export */   WelcomePage: () => (/* binding */ e17),
/* harmony export */   createTreeView: () => (/* binding */ e18),
/* harmony export */   file2Base64: () => (/* binding */ e19),
/* harmony export */   flattenObjectKeys: () => (/* binding */ e20),
/* harmony export */   generateDefaultDocumentTitle: () => (/* binding */ e21),
/* harmony export */   getDefaultFilter: () => (/* binding */ e22),
/* harmony export */   getDefaultSortOrder: () => (/* binding */ e23),
/* harmony export */   getNextPageParam: () => (/* binding */ e24),
/* harmony export */   getPreviousPageParam: () => (/* binding */ e25),
/* harmony export */   handleUseParams: () => (/* binding */ e26),
/* harmony export */   importCSVMapper: () => (/* binding */ e27),
/* harmony export */   keys: () => (/* binding */ e28),
/* harmony export */   legacyResourceTransform: () => (/* binding */ e29),
/* harmony export */   matchResourceFromRoute: () => (/* binding */ e30),
/* harmony export */   parseTableParams: () => (/* binding */ e31),
/* harmony export */   parseTableParamsFromQuery: () => (/* binding */ e32),
/* harmony export */   pickDataProvider: () => (/* binding */ e33),
/* harmony export */   pickNotDeprecated: () => (/* binding */ e34),
/* harmony export */   propertyPathToArray: () => (/* binding */ e35),
/* harmony export */   queryKeys: () => (/* binding */ e36),
/* harmony export */   routeGenerator: () => (/* binding */ e37),
/* harmony export */   setInitialFilters: () => (/* binding */ e38),
/* harmony export */   setInitialSorters: () => (/* binding */ e39),
/* harmony export */   stringifyTableParams: () => (/* binding */ e40),
/* harmony export */   unionFilters: () => (/* binding */ e41),
/* harmony export */   unionSorters: () => (/* binding */ e42),
/* harmony export */   useActiveAuthProvider: () => (/* binding */ e43),
/* harmony export */   useApiUrl: () => (/* binding */ e44),
/* harmony export */   useAuthenticated: () => (/* binding */ e45),
/* harmony export */   useBack: () => (/* binding */ e46),
/* harmony export */   useBreadcrumb: () => (/* binding */ e47),
/* harmony export */   useCan: () => (/* binding */ e48),
/* harmony export */   useCanWithoutCache: () => (/* binding */ e49),
/* harmony export */   useCancelNotification: () => (/* binding */ e50),
/* harmony export */   useCheckError: () => (/* binding */ e51),
/* harmony export */   useCloneButton: () => (/* binding */ e52),
/* harmony export */   useCreate: () => (/* binding */ e53),
/* harmony export */   useCreateButton: () => (/* binding */ e54),
/* harmony export */   useCreateMany: () => (/* binding */ e55),
/* harmony export */   useCustom: () => (/* binding */ e56),
/* harmony export */   useCustomMutation: () => (/* binding */ e57),
/* harmony export */   useDataProvider: () => (/* binding */ e58),
/* harmony export */   useDelete: () => (/* binding */ e59),
/* harmony export */   useDeleteButton: () => (/* binding */ e60),
/* harmony export */   useDeleteMany: () => (/* binding */ e61),
/* harmony export */   useEditButton: () => (/* binding */ e62),
/* harmony export */   useExport: () => (/* binding */ e63),
/* harmony export */   useExportButton: () => (/* binding */ e64),
/* harmony export */   useForgotPassword: () => (/* binding */ e65),
/* harmony export */   useForm: () => (/* binding */ e66),
/* harmony export */   useGetIdentity: () => (/* binding */ e67),
/* harmony export */   useGetLocale: () => (/* binding */ e68),
/* harmony export */   useGetToPath: () => (/* binding */ e69),
/* harmony export */   useGo: () => (/* binding */ e70),
/* harmony export */   useHandleNotification: () => (/* binding */ e71),
/* harmony export */   useImport: () => (/* binding */ e72),
/* harmony export */   useImportButton: () => (/* binding */ e73),
/* harmony export */   useInfiniteList: () => (/* binding */ e74),
/* harmony export */   useInvalidate: () => (/* binding */ e75),
/* harmony export */   useIsAuthenticated: () => (/* binding */ e76),
/* harmony export */   useIsExistAuthentication: () => (/* binding */ e77),
/* harmony export */   useKeys: () => (/* binding */ e78),
/* harmony export */   useLink: () => (/* binding */ e79),
/* harmony export */   useList: () => (/* binding */ e80),
/* harmony export */   useListButton: () => (/* binding */ e81),
/* harmony export */   useLiveMode: () => (/* binding */ e82),
/* harmony export */   useLoadingOvertime: () => (/* binding */ e83),
/* harmony export */   useLog: () => (/* binding */ e84),
/* harmony export */   useLogList: () => (/* binding */ e85),
/* harmony export */   useLogin: () => (/* binding */ e86),
/* harmony export */   useLogout: () => (/* binding */ e87),
/* harmony export */   useMany: () => (/* binding */ e88),
/* harmony export */   useMenu: () => (/* binding */ e89),
/* harmony export */   useMeta: () => (/* binding */ e90),
/* harmony export */   useModal: () => (/* binding */ e91),
/* harmony export */   useMutationMode: () => (/* binding */ e92),
/* harmony export */   useNavigation: () => (/* binding */ e93),
/* harmony export */   useNotification: () => (/* binding */ e94),
/* harmony export */   useOnError: () => (/* binding */ e95),
/* harmony export */   useOne: () => (/* binding */ e96),
/* harmony export */   useParse: () => (/* binding */ e97),
/* harmony export */   useParsed: () => (/* binding */ e98),
/* harmony export */   usePermissions: () => (/* binding */ e99),
/* harmony export */   usePublish: () => (/* binding */ e100),
/* harmony export */   useRedirectionAfterSubmission: () => (/* binding */ e101),
/* harmony export */   useRefineContext: () => (/* binding */ e102),
/* harmony export */   useRefineOptions: () => (/* binding */ e103),
/* harmony export */   useRefreshButton: () => (/* binding */ e104),
/* harmony export */   useRegister: () => (/* binding */ e105),
/* harmony export */   useResource: () => (/* binding */ e106),
/* harmony export */   useResourceParams: () => (/* binding */ e107),
/* harmony export */   useResourceSubscription: () => (/* binding */ e108),
/* harmony export */   useResourceWithRoute: () => (/* binding */ e109),
/* harmony export */   useRouterContext: () => (/* binding */ e110),
/* harmony export */   useRouterType: () => (/* binding */ e111),
/* harmony export */   useSaveButton: () => (/* binding */ e112),
/* harmony export */   useSelect: () => (/* binding */ e113),
/* harmony export */   useSetLocale: () => (/* binding */ e114),
/* harmony export */   useShow: () => (/* binding */ e115),
/* harmony export */   useShowButton: () => (/* binding */ e116),
/* harmony export */   useSubscription: () => (/* binding */ e117),
/* harmony export */   useSyncWithLocation: () => (/* binding */ e118),
/* harmony export */   useTable: () => (/* binding */ e119),
/* harmony export */   useTitle: () => (/* binding */ e120),
/* harmony export */   useToPath: () => (/* binding */ e121),
/* harmony export */   useTranslate: () => (/* binding */ e122),
/* harmony export */   useTranslation: () => (/* binding */ e123),
/* harmony export */   useUpdate: () => (/* binding */ e124),
/* harmony export */   useUpdateMany: () => (/* binding */ e125),
/* harmony export */   useUpdatePassword: () => (/* binding */ e126),
/* harmony export */   useUserFriendlyName: () => (/* binding */ e127),
/* harmony export */   useWarnAboutChange: () => (/* binding */ e128),
/* harmony export */   userFriendlyResourceName: () => (/* binding */ e129)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#AccessControlContext`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#AuthPage`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#Authenticated`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#AutoSaveIndicator`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#CanAccess`);

const e5 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#ErrorComponent`);

const e6 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#GitHubBanner`);

const e7 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#I18nContext`);

const e8 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#KeyBuilder`);

const e9 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#LayoutWrapper`);

const e10 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#LoginPage`);

const e11 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#ReadyPage`);

const e12 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#Refine`);

const e13 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#ResourceContext`);

const e14 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#RouteChangeHandler`);

const e15 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#TranslationContext`);

const e16 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#UndoableQueue`);

const e17 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#WelcomePage`);

const e18 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#createTreeView`);

const e19 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#file2Base64`);

const e20 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#flattenObjectKeys`);

const e21 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#generateDefaultDocumentTitle`);

const e22 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#getDefaultFilter`);

const e23 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#getDefaultSortOrder`);

const e24 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#getNextPageParam`);

const e25 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#getPreviousPageParam`);

const e26 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#handleUseParams`);

const e27 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#importCSVMapper`);

const e28 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#keys`);

const e29 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#legacyResourceTransform`);

const e30 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#matchResourceFromRoute`);

const e31 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#parseTableParams`);

const e32 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#parseTableParamsFromQuery`);

const e33 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#pickDataProvider`);

const e34 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#pickNotDeprecated`);

const e35 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#propertyPathToArray`);

const e36 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#queryKeys`);

const e37 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#routeGenerator`);

const e38 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#setInitialFilters`);

const e39 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#setInitialSorters`);

const e40 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#stringifyTableParams`);

const e41 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#unionFilters`);

const e42 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#unionSorters`);

const e43 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useActiveAuthProvider`);

const e44 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useApiUrl`);

const e45 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useAuthenticated`);

const e46 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useBack`);

const e47 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useBreadcrumb`);

const e48 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCan`);

const e49 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCanWithoutCache`);

const e50 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCancelNotification`);

const e51 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCheckError`);

const e52 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCloneButton`);

const e53 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCreate`);

const e54 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCreateButton`);

const e55 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCreateMany`);

const e56 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCustom`);

const e57 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useCustomMutation`);

const e58 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useDataProvider`);

const e59 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useDelete`);

const e60 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useDeleteButton`);

const e61 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useDeleteMany`);

const e62 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useEditButton`);

const e63 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useExport`);

const e64 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useExportButton`);

const e65 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useForgotPassword`);

const e66 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useForm`);

const e67 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useGetIdentity`);

const e68 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useGetLocale`);

const e69 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useGetToPath`);

const e70 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useGo`);

const e71 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useHandleNotification`);

const e72 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useImport`);

const e73 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useImportButton`);

const e74 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useInfiniteList`);

const e75 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useInvalidate`);

const e76 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useIsAuthenticated`);

const e77 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useIsExistAuthentication`);

const e78 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useKeys`);

const e79 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useLink`);

const e80 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useList`);

const e81 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useListButton`);

const e82 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useLiveMode`);

const e83 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useLoadingOvertime`);

const e84 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useLog`);

const e85 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useLogList`);

const e86 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useLogin`);

const e87 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useLogout`);

const e88 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useMany`);

const e89 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useMenu`);

const e90 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useMeta`);

const e91 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useModal`);

const e92 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useMutationMode`);

const e93 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useNavigation`);

const e94 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useNotification`);

const e95 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useOnError`);

const e96 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useOne`);

const e97 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useParse`);

const e98 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useParsed`);

const e99 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#usePermissions`);

const e100 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#usePublish`);

const e101 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useRedirectionAfterSubmission`);

const e102 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useRefineContext`);

const e103 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useRefineOptions`);

const e104 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useRefreshButton`);

const e105 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useRegister`);

const e106 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useResource`);

const e107 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useResourceParams`);

const e108 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useResourceSubscription`);

const e109 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useResourceWithRoute`);

const e110 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useRouterContext`);

const e111 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useRouterType`);

const e112 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useSaveButton`);

const e113 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useSelect`);

const e114 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useSetLocale`);

const e115 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useShow`);

const e116 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useShowButton`);

const e117 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useSubscription`);

const e118 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useSyncWithLocation`);

const e119 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useTable`);

const e120 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useTitle`);

const e121 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useToPath`);

const e122 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useTranslate`);

const e123 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useTranslation`);

const e124 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useUpdate`);

const e125 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useUpdateMany`);

const e126 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useUpdatePassword`);

const e127 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useUserFriendlyName`);

const e128 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#useWarnAboutChange`);

const e129 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/core/dist/index.mjs#userFriendlyResourceName`);


/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/kbar/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/kbar/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KBAR_LISTBOX: () => (/* binding */ e0),
/* harmony export */   KBarAnimator: () => (/* binding */ e1),
/* harmony export */   KBarContext: () => (/* binding */ e2),
/* harmony export */   KBarPortal: () => (/* binding */ e3),
/* harmony export */   KBarPositioner: () => (/* binding */ e4),
/* harmony export */   KBarProvider: () => (/* binding */ e5),
/* harmony export */   KBarResults: () => (/* binding */ e6),
/* harmony export */   KBarSearch: () => (/* binding */ e7),
/* harmony export */   NO_GROUP: () => (/* binding */ e8),
/* harmony export */   Priority: () => (/* binding */ e9),
/* harmony export */   RefineKbar: () => (/* binding */ e10),
/* harmony export */   RefineKbarPropsContext: () => (/* binding */ e11),
/* harmony export */   RefineKbarProvider: () => (/* binding */ e12),
/* harmony export */   VisualState: () => (/* binding */ e13),
/* harmony export */   createAction: () => (/* binding */ e14),
/* harmony export */   getListboxItemId: () => (/* binding */ e15),
/* harmony export */   useKBar: () => (/* binding */ e16),
/* harmony export */   useMatches: () => (/* binding */ e17),
/* harmony export */   useRefineKbar: () => (/* binding */ e18),
/* harmony export */   useRegisterActions: () => (/* binding */ e19)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#KBAR_LISTBOX`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#KBarAnimator`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#KBarContext`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#KBarPortal`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#KBarPositioner`);

const e5 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#KBarProvider`);

const e6 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#KBarResults`);

const e7 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#KBarSearch`);

const e8 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#NO_GROUP`);

const e9 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#Priority`);

const e10 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#RefineKbar`);

const e11 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#RefineKbarPropsContext`);

const e12 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#RefineKbarProvider`);

const e13 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#VisualState`);

const e14 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#createAction`);

const e15 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#getListboxItemId`);

const e16 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#useKBar`);

const e17 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#useMatches`);

const e18 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#useRefineKbar`);

const e19 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/kbar/dist/index.mjs#useRegisterActions`);


/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/mui/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@refinedev/mui/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthPage: () => (/* binding */ e0),
/* harmony export */   AutoSaveIndicator: () => (/* binding */ e1),
/* harmony export */   BooleanField: () => (/* binding */ e2),
/* harmony export */   Breadcrumb: () => (/* binding */ e3),
/* harmony export */   CircularDeterminate: () => (/* binding */ e4),
/* harmony export */   CloneButton: () => (/* binding */ e5),
/* harmony export */   Create: () => (/* binding */ e6),
/* harmony export */   CreateButton: () => (/* binding */ e7),
/* harmony export */   DarkTheme: () => (/* binding */ e8),
/* harmony export */   DateField: () => (/* binding */ e9),
/* harmony export */   DeleteButton: () => (/* binding */ e10),
/* harmony export */   Edit: () => (/* binding */ e11),
/* harmony export */   EditButton: () => (/* binding */ e12),
/* harmony export */   EmailField: () => (/* binding */ e13),
/* harmony export */   ErrorComponent: () => (/* binding */ e14),
/* harmony export */   ExportButton: () => (/* binding */ e15),
/* harmony export */   FileField: () => (/* binding */ e16),
/* harmony export */   HamburgerMenu: () => (/* binding */ e17),
/* harmony export */   Header: () => (/* binding */ e18),
/* harmony export */   ImportButton: () => (/* binding */ e19),
/* harmony export */   Layout: () => (/* binding */ e20),
/* harmony export */   LightTheme: () => (/* binding */ e21),
/* harmony export */   List: () => (/* binding */ e22),
/* harmony export */   ListButton: () => (/* binding */ e23),
/* harmony export */   LoginPage: () => (/* binding */ e24),
/* harmony export */   MarkdownField: () => (/* binding */ e25),
/* harmony export */   NotistackSnackbarContent: () => (/* binding */ e26),
/* harmony export */   NumberField: () => (/* binding */ e27),
/* harmony export */   ReadyPage: () => (/* binding */ e28),
/* harmony export */   RefineSnackbarProvider: () => (/* binding */ e29),
/* harmony export */   RefineThemes: () => (/* binding */ e30),
/* harmony export */   RefreshButton: () => (/* binding */ e31),
/* harmony export */   SaveButton: () => (/* binding */ e32),
/* harmony export */   Show: () => (/* binding */ e33),
/* harmony export */   ShowButton: () => (/* binding */ e34),
/* harmony export */   Sider: () => (/* binding */ e35),
/* harmony export */   SnackbarProvider: () => (/* binding */ e36),
/* harmony export */   TagField: () => (/* binding */ e37),
/* harmony export */   TextFieldComponent: () => (/* binding */ e38),
/* harmony export */   ThemedHeader: () => (/* binding */ e39),
/* harmony export */   ThemedHeaderV2: () => (/* binding */ e40),
/* harmony export */   ThemedLayout: () => (/* binding */ e41),
/* harmony export */   ThemedLayoutContext: () => (/* binding */ e42),
/* harmony export */   ThemedLayoutContextProvider: () => (/* binding */ e43),
/* harmony export */   ThemedLayoutV2: () => (/* binding */ e44),
/* harmony export */   ThemedSider: () => (/* binding */ e45),
/* harmony export */   ThemedSiderV2: () => (/* binding */ e46),
/* harmony export */   ThemedTitle: () => (/* binding */ e47),
/* harmony export */   ThemedTitleV2: () => (/* binding */ e48),
/* harmony export */   Title: () => (/* binding */ e49),
/* harmony export */   UrlField: () => (/* binding */ e50),
/* harmony export */   WelcomePage: () => (/* binding */ e51),
/* harmony export */   notificationProvider: () => (/* binding */ e52),
/* harmony export */   useAutocomplete: () => (/* binding */ e53),
/* harmony export */   useDataGrid: () => (/* binding */ e54),
/* harmony export */   useNotificationProvider: () => (/* binding */ e55),
/* harmony export */   useSiderVisible: () => (/* binding */ e56),
/* harmony export */   useSnackbar: () => (/* binding */ e57),
/* harmony export */   useThemedLayoutContext: () => (/* binding */ e58),
/* harmony export */   withSnackbar: () => (/* binding */ e59)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#AuthPage`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#AutoSaveIndicator`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#BooleanField`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#Breadcrumb`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#CircularDeterminate`);

const e5 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#CloneButton`);

const e6 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#Create`);

const e7 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#CreateButton`);

const e8 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#DarkTheme`);

const e9 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#DateField`);

const e10 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#DeleteButton`);

const e11 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#Edit`);

const e12 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#EditButton`);

const e13 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#EmailField`);

const e14 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ErrorComponent`);

const e15 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ExportButton`);

const e16 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#FileField`);

const e17 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#HamburgerMenu`);

const e18 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#Header`);

const e19 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ImportButton`);

const e20 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#Layout`);

const e21 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#LightTheme`);

const e22 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#List`);

const e23 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ListButton`);

const e24 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#LoginPage`);

const e25 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#MarkdownField`);

const e26 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#NotistackSnackbarContent`);

const e27 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#NumberField`);

const e28 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ReadyPage`);

const e29 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#RefineSnackbarProvider`);

const e30 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#RefineThemes`);

const e31 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#RefreshButton`);

const e32 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#SaveButton`);

const e33 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#Show`);

const e34 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ShowButton`);

const e35 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#Sider`);

const e36 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#SnackbarProvider`);

const e37 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#TagField`);

const e38 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#TextFieldComponent`);

const e39 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedHeader`);

const e40 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedHeaderV2`);

const e41 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedLayout`);

const e42 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedLayoutContext`);

const e43 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedLayoutContextProvider`);

const e44 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedLayoutV2`);

const e45 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedSider`);

const e46 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedSiderV2`);

const e47 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedTitle`);

const e48 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#ThemedTitleV2`);

const e49 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#Title`);

const e50 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#UrlField`);

const e51 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#WelcomePage`);

const e52 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#notificationProvider`);

const e53 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#useAutocomplete`);

const e54 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#useDataGrid`);

const e55 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#useNotificationProvider`);

const e56 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#useSiderVisible`);

const e57 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#useSnackbar`);

const e58 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#useThemedLayoutContext`);

const e59 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/mui/dist/index.mjs#withSnackbar`);


/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/nextjs-router/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $$typeof: () => (/* binding */ $$typeof),
/* harmony export */   NavigateToResource: () => (/* binding */ e0),
/* harmony export */   RefineRoutes: () => (/* binding */ e1),
/* harmony export */   __esModule: () => (/* binding */ __esModule),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   paramsFromCurrentPath: () => (/* binding */ e2),
/* harmony export */   parseTableParams: () => (/* binding */ e3),
/* harmony export */   stringifyConfig: () => (/* binding */ e4)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/nextjs-router/dist/index.mjs`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/nextjs-router/dist/index.mjs#NavigateToResource`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/nextjs-router/dist/index.mjs#RefineRoutes`);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/nextjs-router/dist/index.mjs#default`));

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/nextjs-router/dist/index.mjs#paramsFromCurrentPath`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/nextjs-router/dist/index.mjs#parseTableParams`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/mac/Documents/Dashboard/node_modules/@refinedev/nextjs-router/dist/index.mjs#stringifyConfig`);


/***/ })

};
;